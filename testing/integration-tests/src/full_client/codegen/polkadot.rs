#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 68usize] = [
        "System",
        "Utility",
        "Babe",
        "Timestamp",
        "Authorship",
        "Indices",
        "Balances",
        "TransactionPayment",
        "AssetTxPayment",
        "AssetConversionTxPayment",
        "ElectionProviderMultiPhase",
        "Staking",
        "Session",
        "Democracy",
        "Council",
        "TechnicalCommittee",
        "Elections",
        "TechnicalMembership",
        "Grandpa",
        "Treasury",
        "AssetRate",
        "Contracts",
        "Sudo",
        "ImOnline",
        "AuthorityDiscovery",
        "Offences",
        "Historical",
        "RandomnessCollectiveFlip",
        "Identity",
        "Society",
        "Recovery",
        "Vesting",
        "Scheduler",
        "Glutton",
        "Preimage",
        "Proxy",
        "Multisig",
        "Bounties",
        "Tips",
        "Assets",
        "PoolAssets",
        "Mmr",
        "Lottery",
        "Nis",
        "Uniques",
        "Nfts",
        "NftFractionalization",
        "Salary",
        "CoreFellowship",
        "TransactionStorage",
        "VoterList",
        "StateTrieMigration",
        "ChildBounties",
        "Referenda",
        "Remark",
        "RootTesting",
        "ConvictionVoting",
        "Whitelist",
        "AllianceMotion",
        "Alliance",
        "NominationPools",
        "RankedPolls",
        "RankedCollective",
        "AssetConversion",
        "FastUnstake",
        "MessageQueue",
        "Pov",
        "Statement",
    ];
    pub static RUNTIME_APIS: [&str; 20usize] = [
        "Core",
        "Metadata",
        "BlockBuilder",
        "TaggedTransactionQueue",
        "ValidateStatement",
        "OffchainWorkerApi",
        "GrandpaApi",
        "NominationPoolsApi",
        "StakingApi",
        "BabeApi",
        "AuthorityDiscoveryApi",
        "AccountNonceApi",
        "AssetsApi",
        "ContractsApi",
        "TransactionPaymentApi",
        "AssetConversionApi",
        "TransactionPaymentCallApi",
        "NftsApi",
        "MmrApi",
        "SessionKeys",
    ];
    #[doc = r" Outer most event."]
    pub type RuntimeEvent = runtime_types::kitchensink_runtime::RuntimeEvent;
    #[doc = r" Outer most event."]
    pub type RuntimeError = runtime_types::kitchensink_runtime::RuntimeError;
    #[doc = r" Outer most event."]
    pub type Call = runtime_types::kitchensink_runtime::RuntimeCall;
    #[doc = r" The error type returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    impl ::subxt::events::RootEvent for Event {
        fn root_event(
            pallet_bytes: &[u8],
            pallet_name: &str,
            pallet_ty: u32,
            metadata: &::subxt::Metadata,
        ) -> Result<Self, ::subxt::Error> {
            use subxt::metadata::DecodeWithMetadata;
            if pallet_name == "System" {
                return Ok(Event::System(system::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Utility" {
                return Ok(Event::Utility(utility::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Indices" {
                return Ok(Event::Indices(indices::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Balances" {
                return Ok(Event::Balances(balances::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "TransactionPayment" {
                return Ok(Event::TransactionPayment(
                    transaction_payment::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "AssetTxPayment" {
                return Ok(Event::AssetTxPayment(
                    asset_tx_payment::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "AssetConversionTxPayment" {
                return Ok(Event::AssetConversionTxPayment(
                    asset_conversion_tx_payment::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "ElectionProviderMultiPhase" {
                return Ok(Event::ElectionProviderMultiPhase(
                    election_provider_multi_phase::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Staking" {
                return Ok(Event::Staking(staking::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Session" {
                return Ok(Event::Session(session::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Democracy" {
                return Ok(Event::Democracy(democracy::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Council" {
                return Ok(Event::Council(council::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "TechnicalCommittee" {
                return Ok(Event::TechnicalCommittee(
                    technical_committee::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Elections" {
                return Ok(Event::Elections(elections::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "TechnicalMembership" {
                return Ok(Event::TechnicalMembership(
                    technical_membership::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Grandpa" {
                return Ok(Event::Grandpa(grandpa::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Treasury" {
                return Ok(Event::Treasury(treasury::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "AssetRate" {
                return Ok(Event::AssetRate(asset_rate::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Contracts" {
                return Ok(Event::Contracts(contracts::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Sudo" {
                return Ok(Event::Sudo(sudo::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "ImOnline" {
                return Ok(Event::ImOnline(im_online::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Offences" {
                return Ok(Event::Offences(offences::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Identity" {
                return Ok(Event::Identity(identity::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Society" {
                return Ok(Event::Society(society::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Recovery" {
                return Ok(Event::Recovery(recovery::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Vesting" {
                return Ok(Event::Vesting(vesting::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Scheduler" {
                return Ok(Event::Scheduler(scheduler::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Glutton" {
                return Ok(Event::Glutton(glutton::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Preimage" {
                return Ok(Event::Preimage(preimage::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Proxy" {
                return Ok(Event::Proxy(proxy::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Multisig" {
                return Ok(Event::Multisig(multisig::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Bounties" {
                return Ok(Event::Bounties(bounties::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Tips" {
                return Ok(Event::Tips(tips::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Assets" {
                return Ok(Event::Assets(assets::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "PoolAssets" {
                return Ok(Event::PoolAssets(pool_assets::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Lottery" {
                return Ok(Event::Lottery(lottery::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Nis" {
                return Ok(Event::Nis(nis::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Uniques" {
                return Ok(Event::Uniques(uniques::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Nfts" {
                return Ok(Event::Nfts(nfts::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "NftFractionalization" {
                return Ok(Event::NftFractionalization(
                    nft_fractionalization::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Salary" {
                return Ok(Event::Salary(salary::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "CoreFellowship" {
                return Ok(Event::CoreFellowship(
                    core_fellowship::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "TransactionStorage" {
                return Ok(Event::TransactionStorage(
                    transaction_storage::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "VoterList" {
                return Ok(Event::VoterList(voter_list::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "StateTrieMigration" {
                return Ok(Event::StateTrieMigration(
                    state_trie_migration::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "ChildBounties" {
                return Ok(Event::ChildBounties(
                    child_bounties::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Referenda" {
                return Ok(Event::Referenda(referenda::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Remark" {
                return Ok(Event::Remark(remark::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "ConvictionVoting" {
                return Ok(Event::ConvictionVoting(
                    conviction_voting::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Whitelist" {
                return Ok(Event::Whitelist(whitelist::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "AllianceMotion" {
                return Ok(Event::AllianceMotion(
                    alliance_motion::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Alliance" {
                return Ok(Event::Alliance(alliance::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "NominationPools" {
                return Ok(Event::NominationPools(
                    nomination_pools::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "RankedPolls" {
                return Ok(Event::RankedPolls(
                    ranked_polls::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "RankedCollective" {
                return Ok(Event::RankedCollective(
                    ranked_collective::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "AssetConversion" {
                return Ok(Event::AssetConversion(
                    asset_conversion::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "FastUnstake" {
                return Ok(Event::FastUnstake(
                    fast_unstake::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "MessageQueue" {
                return Ok(Event::MessageQueue(
                    message_queue::Event::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Pov" {
                return Ok(Event::Pov(pov::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Statement" {
                return Ok(Event::Statement(statement::Event::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            Err(::subxt::ext::scale_decode::Error::custom(format!(
                "Pallet name '{}' not found in root Event enum",
                pallet_name
            ))
            .into())
        }
    }
    impl ::subxt::blocks::RootExtrinsic for Call {
        fn root_extrinsic(
            pallet_bytes: &[u8],
            pallet_name: &str,
            pallet_ty: u32,
            metadata: &::subxt::Metadata,
        ) -> Result<Self, ::subxt::Error> {
            use subxt::metadata::DecodeWithMetadata;
            if pallet_name == "System" {
                return Ok(Call::System(system::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Utility" {
                return Ok(Call::Utility(utility::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Babe" {
                return Ok(Call::Babe(babe::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Timestamp" {
                return Ok(Call::Timestamp(timestamp::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Indices" {
                return Ok(Call::Indices(indices::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Balances" {
                return Ok(Call::Balances(balances::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "ElectionProviderMultiPhase" {
                return Ok(Call::ElectionProviderMultiPhase(
                    election_provider_multi_phase::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Staking" {
                return Ok(Call::Staking(staking::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Session" {
                return Ok(Call::Session(session::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Democracy" {
                return Ok(Call::Democracy(democracy::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Council" {
                return Ok(Call::Council(council::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "TechnicalCommittee" {
                return Ok(Call::TechnicalCommittee(
                    technical_committee::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Elections" {
                return Ok(Call::Elections(elections::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "TechnicalMembership" {
                return Ok(Call::TechnicalMembership(
                    technical_membership::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Grandpa" {
                return Ok(Call::Grandpa(grandpa::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Treasury" {
                return Ok(Call::Treasury(treasury::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "AssetRate" {
                return Ok(Call::AssetRate(asset_rate::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Contracts" {
                return Ok(Call::Contracts(contracts::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Sudo" {
                return Ok(Call::Sudo(sudo::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "ImOnline" {
                return Ok(Call::ImOnline(im_online::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Identity" {
                return Ok(Call::Identity(identity::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Society" {
                return Ok(Call::Society(society::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Recovery" {
                return Ok(Call::Recovery(recovery::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Vesting" {
                return Ok(Call::Vesting(vesting::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Scheduler" {
                return Ok(Call::Scheduler(scheduler::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Glutton" {
                return Ok(Call::Glutton(glutton::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Preimage" {
                return Ok(Call::Preimage(preimage::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Proxy" {
                return Ok(Call::Proxy(proxy::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Multisig" {
                return Ok(Call::Multisig(multisig::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Bounties" {
                return Ok(Call::Bounties(bounties::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Tips" {
                return Ok(Call::Tips(tips::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Assets" {
                return Ok(Call::Assets(assets::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "PoolAssets" {
                return Ok(Call::PoolAssets(pool_assets::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Lottery" {
                return Ok(Call::Lottery(lottery::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Nis" {
                return Ok(Call::Nis(nis::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Uniques" {
                return Ok(Call::Uniques(uniques::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Nfts" {
                return Ok(Call::Nfts(nfts::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "NftFractionalization" {
                return Ok(Call::NftFractionalization(
                    nft_fractionalization::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Salary" {
                return Ok(Call::Salary(salary::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "CoreFellowship" {
                return Ok(Call::CoreFellowship(
                    core_fellowship::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "TransactionStorage" {
                return Ok(Call::TransactionStorage(
                    transaction_storage::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "VoterList" {
                return Ok(Call::VoterList(voter_list::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "StateTrieMigration" {
                return Ok(Call::StateTrieMigration(
                    state_trie_migration::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "ChildBounties" {
                return Ok(Call::ChildBounties(
                    child_bounties::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Referenda" {
                return Ok(Call::Referenda(referenda::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "Remark" {
                return Ok(Call::Remark(remark::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "RootTesting" {
                return Ok(Call::RootTesting(root_testing::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "ConvictionVoting" {
                return Ok(Call::ConvictionVoting(
                    conviction_voting::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Whitelist" {
                return Ok(Call::Whitelist(whitelist::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "AllianceMotion" {
                return Ok(Call::AllianceMotion(
                    alliance_motion::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Alliance" {
                return Ok(Call::Alliance(alliance::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "NominationPools" {
                return Ok(Call::NominationPools(
                    nomination_pools::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "RankedPolls" {
                return Ok(Call::RankedPolls(ranked_polls::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "RankedCollective" {
                return Ok(Call::RankedCollective(
                    ranked_collective::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "AssetConversion" {
                return Ok(Call::AssetConversion(
                    asset_conversion::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "FastUnstake" {
                return Ok(Call::FastUnstake(fast_unstake::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            if pallet_name == "MessageQueue" {
                return Ok(Call::MessageQueue(
                    message_queue::Call::decode_with_metadata(
                        &mut &*pallet_bytes,
                        pallet_ty,
                        metadata,
                    )?,
                ));
            }
            if pallet_name == "Pov" {
                return Ok(Call::Pov(pov::Call::decode_with_metadata(
                    &mut &*pallet_bytes,
                    pallet_ty,
                    metadata,
                )?));
            }
            Err(::subxt::ext::scale_decode::Error::custom(format!(
                "Pallet name '{}' not found in root Call enum",
                pallet_name
            ))
            .into())
        }
    }
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub fn apis() -> runtime_apis::RuntimeApi {
        runtime_apis::RuntimeApi
    }
    pub mod runtime_apis {
        use super::root_mod;
        use super::runtime_types;
        use subxt::ext::codec::Encode;
        pub struct RuntimeApi;
        impl RuntimeApi {
            pub fn core(&self) -> core::Core {
                core::Core
            }
            pub fn metadata(&self) -> metadata::Metadata {
                metadata::Metadata
            }
            pub fn block_builder(&self) -> block_builder::BlockBuilder {
                block_builder::BlockBuilder
            }
            pub fn tagged_transaction_queue(
                &self,
            ) -> tagged_transaction_queue::TaggedTransactionQueue {
                tagged_transaction_queue::TaggedTransactionQueue
            }
            pub fn validate_statement(&self) -> validate_statement::ValidateStatement {
                validate_statement::ValidateStatement
            }
            pub fn offchain_worker_api(&self) -> offchain_worker_api::OffchainWorkerApi {
                offchain_worker_api::OffchainWorkerApi
            }
            pub fn grandpa_api(&self) -> grandpa_api::GrandpaApi {
                grandpa_api::GrandpaApi
            }
            pub fn nomination_pools_api(&self) -> nomination_pools_api::NominationPoolsApi {
                nomination_pools_api::NominationPoolsApi
            }
            pub fn staking_api(&self) -> staking_api::StakingApi {
                staking_api::StakingApi
            }
            pub fn babe_api(&self) -> babe_api::BabeApi {
                babe_api::BabeApi
            }
            pub fn authority_discovery_api(
                &self,
            ) -> authority_discovery_api::AuthorityDiscoveryApi {
                authority_discovery_api::AuthorityDiscoveryApi
            }
            pub fn account_nonce_api(&self) -> account_nonce_api::AccountNonceApi {
                account_nonce_api::AccountNonceApi
            }
            pub fn assets_api(&self) -> assets_api::AssetsApi {
                assets_api::AssetsApi
            }
            pub fn contracts_api(&self) -> contracts_api::ContractsApi {
                contracts_api::ContractsApi
            }
            pub fn transaction_payment_api(
                &self,
            ) -> transaction_payment_api::TransactionPaymentApi {
                transaction_payment_api::TransactionPaymentApi
            }
            pub fn asset_conversion_api(&self) -> asset_conversion_api::AssetConversionApi {
                asset_conversion_api::AssetConversionApi
            }
            pub fn transaction_payment_call_api(
                &self,
            ) -> transaction_payment_call_api::TransactionPaymentCallApi {
                transaction_payment_call_api::TransactionPaymentCallApi
            }
            pub fn nfts_api(&self) -> nfts_api::NftsApi {
                nfts_api::NftsApi
            }
            pub fn mmr_api(&self) -> mmr_api::MmrApi {
                mmr_api::MmrApi
            }
            pub fn session_keys(&self) -> session_keys::SessionKeys {
                session_keys::SessionKeys
            }
        }
        pub mod core {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Core` runtime api that every Substrate runtime needs to implement."]
            pub struct Core;
            impl Core {
                #[doc = " Returns the version of the runtime."]
                pub fn version(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::Version,
                    runtime_types::sp_version::RuntimeVersion,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Core",
                        "version",
                        types::Version {},
                        [
                            208u8, 156u8, 242u8, 175u8, 91u8, 142u8, 140u8, 147u8, 202u8, 252u8,
                            59u8, 236u8, 42u8, 221u8, 134u8, 39u8, 177u8, 160u8, 223u8, 74u8, 36u8,
                            141u8, 74u8, 4u8, 248u8, 111u8, 254u8, 214u8, 23u8, 59u8, 59u8, 160u8,
                        ],
                    )
                }
                #[doc = " Execute the given block."]
                pub fn execute_block(
                    &self,
                    block : runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > >,
                ) -> ::subxt::runtime_api::Payload<types::ExecuteBlock, ()> {
                    ::subxt::runtime_api::Payload::new_static(
                        "Core",
                        "execute_block",
                        types::ExecuteBlock { block },
                        [
                            101u8, 219u8, 22u8, 226u8, 108u8, 12u8, 117u8, 235u8, 185u8, 6u8,
                            210u8, 196u8, 241u8, 124u8, 122u8, 100u8, 196u8, 226u8, 6u8, 228u8,
                            75u8, 247u8, 160u8, 208u8, 56u8, 53u8, 18u8, 69u8, 235u8, 125u8, 86u8,
                            54u8,
                        ],
                    )
                }
                #[doc = " Initialize a block with the given header."]
                pub fn initialize_block(
                    &self,
                    header: runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                ) -> ::subxt::runtime_api::Payload<types::InitializeBlock, ()> {
                    ::subxt::runtime_api::Payload::new_static(
                        "Core",
                        "initialize_block",
                        types::InitializeBlock { header },
                        [
                            49u8, 128u8, 189u8, 185u8, 156u8, 217u8, 149u8, 251u8, 64u8, 175u8,
                            28u8, 121u8, 111u8, 219u8, 161u8, 62u8, 176u8, 22u8, 167u8, 137u8,
                            137u8, 14u8, 56u8, 29u8, 3u8, 98u8, 204u8, 14u8, 65u8, 79u8, 199u8,
                            112u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Version {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecuteBlock { pub block : runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InitializeBlock {
                    pub header: runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                }
            }
        }
        pub mod metadata {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Metadata` api trait that returns metadata for the runtime."]
            pub struct Metadata;
            impl Metadata {
                #[doc = " Returns the metadata of a runtime."]
                pub fn metadata(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::Metadata,
                    runtime_types::sp_core::OpaqueMetadata,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Metadata",
                        "metadata",
                        types::Metadata {},
                        [
                            231u8, 24u8, 67u8, 152u8, 23u8, 26u8, 188u8, 82u8, 229u8, 6u8, 185u8,
                            27u8, 175u8, 68u8, 83u8, 122u8, 69u8, 89u8, 185u8, 74u8, 248u8, 87u8,
                            217u8, 124u8, 193u8, 252u8, 199u8, 186u8, 196u8, 179u8, 179u8, 96u8,
                        ],
                    )
                }
                #[doc = " Returns the metadata at a given version."]
                #[doc = ""]
                #[doc = " If the given `version` isn't supported, this will return `None`."]
                #[doc = " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."]
                pub fn metadata_at_version(
                    &self,
                    version: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<
                    types::MetadataAtVersion,
                    ::core::option::Option<runtime_types::sp_core::OpaqueMetadata>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Metadata",
                        "metadata_at_version",
                        types::MetadataAtVersion { version },
                        [
                            131u8, 53u8, 212u8, 234u8, 16u8, 25u8, 120u8, 252u8, 153u8, 153u8,
                            216u8, 28u8, 54u8, 113u8, 52u8, 236u8, 146u8, 68u8, 142u8, 8u8, 10u8,
                            169u8, 131u8, 142u8, 204u8, 38u8, 48u8, 108u8, 134u8, 86u8, 226u8,
                            61u8,
                        ],
                    )
                }
                #[doc = " Returns the supported metadata versions."]
                #[doc = ""]
                #[doc = " This can be used to call `metadata_at_version`."]
                pub fn metadata_versions(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::MetadataVersions,
                    ::std::vec::Vec<::core::primitive::u32>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "Metadata",
                        "metadata_versions",
                        types::MetadataVersions {},
                        [
                            23u8, 144u8, 137u8, 91u8, 188u8, 39u8, 231u8, 208u8, 252u8, 218u8,
                            224u8, 176u8, 77u8, 32u8, 130u8, 212u8, 223u8, 76u8, 100u8, 190u8,
                            82u8, 94u8, 190u8, 8u8, 82u8, 244u8, 225u8, 179u8, 85u8, 176u8, 56u8,
                            16u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Metadata {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MetadataAtVersion {
                    pub version: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MetadataVersions {}
            }
        }
        pub mod block_builder {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `BlockBuilder` api trait that provides the required functionality for building a block."]
            pub struct BlockBuilder;
            impl BlockBuilder {
                #[doc = " Apply the given extrinsic."]
                #[doc = ""]
                #[doc = " Returns an inclusion outcome which specifies if this extrinsic is included in"]
                #[doc = " this block or not."]
                pub fn apply_extrinsic(
                    &self,
                    extrinsic : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) >,
                ) -> ::subxt::runtime_api::Payload<
                    types::ApplyExtrinsic,
                    ::core::result::Result<
                        ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                        runtime_types::sp_runtime::transaction_validity::TransactionValidityError,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "apply_extrinsic",
                        types::ApplyExtrinsic { extrinsic },
                        [
                            194u8, 184u8, 67u8, 94u8, 64u8, 72u8, 93u8, 72u8, 96u8, 149u8, 129u8,
                            222u8, 62u8, 97u8, 38u8, 93u8, 138u8, 205u8, 203u8, 209u8, 100u8,
                            130u8, 254u8, 59u8, 207u8, 44u8, 235u8, 194u8, 91u8, 119u8, 138u8,
                            196u8,
                        ],
                    )
                }
                #[doc = " Finish the current block."]
                pub fn finalize_block(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::FinalizeBlock,
                    runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "finalize_block",
                        types::FinalizeBlock {},
                        [
                            23u8, 247u8, 179u8, 24u8, 180u8, 7u8, 52u8, 202u8, 187u8, 15u8, 199u8,
                            213u8, 193u8, 75u8, 103u8, 56u8, 190u8, 154u8, 81u8, 21u8, 209u8,
                            178u8, 133u8, 136u8, 180u8, 112u8, 213u8, 76u8, 117u8, 156u8, 126u8,
                            30u8,
                        ],
                    )
                }
                #[doc = " Generate inherent extrinsics. The inherent data will vary from chain to chain."]                pub fn inherent_extrinsics (& self , inherent : runtime_types :: sp_inherents :: InherentData ,) -> :: subxt :: runtime_api :: Payload < types :: InherentExtrinsics , :: std :: vec :: Vec < runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > > >{
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "inherent_extrinsics",
                        types::InherentExtrinsics { inherent },
                        [
                            98u8, 190u8, 193u8, 3u8, 42u8, 89u8, 80u8, 230u8, 153u8, 241u8, 71u8,
                            43u8, 108u8, 107u8, 63u8, 181u8, 9u8, 86u8, 244u8, 9u8, 237u8, 198u8,
                            249u8, 164u8, 242u8, 137u8, 216u8, 210u8, 2u8, 197u8, 33u8, 169u8,
                        ],
                    )
                }
                #[doc = " Check that the inherents are valid. The inherent data will vary from chain to chain."]
                pub fn check_inherents(
                    &self,
                    block : runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > >,
                    data: runtime_types::sp_inherents::InherentData,
                ) -> ::subxt::runtime_api::Payload<
                    types::CheckInherents,
                    runtime_types::sp_inherents::CheckInherentsResult,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BlockBuilder",
                        "check_inherents",
                        types::CheckInherents { block, data },
                        [
                            195u8, 85u8, 54u8, 114u8, 231u8, 129u8, 188u8, 241u8, 167u8, 99u8,
                            249u8, 100u8, 0u8, 48u8, 234u8, 88u8, 140u8, 75u8, 180u8, 233u8, 135u8,
                            186u8, 31u8, 179u8, 64u8, 199u8, 12u8, 212u8, 191u8, 179u8, 71u8,
                            226u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApplyExtrinsic { pub extrinsic : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FinalizeBlock {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InherentExtrinsics {
                    pub inherent: runtime_types::sp_inherents::InherentData,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CheckInherents { pub block : runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header :: Header < :: core :: primitive :: u32 , runtime_types :: sp_runtime :: traits :: BlakeTwo256 > , runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > > , pub data : runtime_types :: sp_inherents :: InherentData , }
            }
        }
        pub mod tagged_transaction_queue {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."]
            pub struct TaggedTransactionQueue;
            impl TaggedTransactionQueue {
                #[doc = " Validate the transaction."]
                #[doc = ""]
                #[doc = " This method is invoked by the transaction pool to learn details about given transaction."]
                #[doc = " The implementation should make sure to verify the correctness of the transaction"]
                #[doc = " against current state. The given `block_hash` corresponds to the hash of the block"]
                #[doc = " that is used as current state."]
                #[doc = ""]
                #[doc = " Note that this call may be performed by the pool multiple times and transactions"]
                #[doc = " might be verified in any possible order."]
                pub fn validate_transaction(
                    &self,
                    source: runtime_types::sp_runtime::transaction_validity::TransactionSource,
                    tx : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) >,
                    block_hash: ::subxt::utils::H256,
                ) -> ::subxt::runtime_api::Payload<
                    types::ValidateTransaction,
                    ::core::result::Result<
                        runtime_types::sp_runtime::transaction_validity::ValidTransaction,
                        runtime_types::sp_runtime::transaction_validity::TransactionValidityError,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TaggedTransactionQueue",
                        "validate_transaction",
                        types::ValidateTransaction {
                            source,
                            tx,
                            block_hash,
                        },
                        [
                            0u8, 184u8, 223u8, 131u8, 207u8, 216u8, 71u8, 7u8, 51u8, 252u8, 130u8,
                            189u8, 9u8, 21u8, 39u8, 75u8, 0u8, 1u8, 21u8, 157u8, 208u8, 5u8, 110u8,
                            10u8, 212u8, 177u8, 59u8, 194u8, 178u8, 244u8, 238u8, 238u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidateTransaction { pub source : runtime_types :: sp_runtime :: transaction_validity :: TransactionSource , pub tx : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > , pub block_hash : :: subxt :: utils :: H256 , }
            }
        }
        pub mod validate_statement {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Runtime API trait for statement validation."]
            pub struct ValidateStatement;
            impl ValidateStatement {
                #[doc = " Validate the statement."]
                pub fn validate_statement(
                    &self,
                    source: runtime_types::sp_statement_store::runtime_api::StatementSource,
                    statement: runtime_types::sp_statement_store::Statement,
                ) -> ::subxt::runtime_api::Payload<
                    types::ValidateStatement,
                    ::core::result::Result<
                        runtime_types::sp_statement_store::runtime_api::ValidStatement,
                        runtime_types::sp_statement_store::runtime_api::InvalidStatement,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "ValidateStatement",
                        "validate_statement",
                        types::ValidateStatement { source, statement },
                        [
                            36u8, 135u8, 237u8, 254u8, 246u8, 18u8, 122u8, 221u8, 40u8, 71u8,
                            186u8, 174u8, 138u8, 233u8, 31u8, 162u8, 128u8, 97u8, 128u8, 206u8,
                            4u8, 184u8, 63u8, 241u8, 213u8, 209u8, 223u8, 242u8, 233u8, 214u8,
                            169u8, 131u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidateStatement {
                    pub source: runtime_types::sp_statement_store::runtime_api::StatementSource,
                    pub statement: runtime_types::sp_statement_store::Statement,
                }
            }
        }
        pub mod offchain_worker_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The offchain worker api."]
            pub struct OffchainWorkerApi;
            impl OffchainWorkerApi {
                #[doc = " Starts the off-chain task for given block header."]
                pub fn offchain_worker(
                    &self,
                    header: runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                ) -> ::subxt::runtime_api::Payload<types::OffchainWorker, ()> {
                    ::subxt::runtime_api::Payload::new_static(
                        "OffchainWorkerApi",
                        "offchain_worker",
                        types::OffchainWorker { header },
                        [
                            203u8, 137u8, 171u8, 220u8, 51u8, 190u8, 230u8, 10u8, 77u8, 8u8, 141u8,
                            224u8, 144u8, 82u8, 45u8, 116u8, 23u8, 223u8, 254u8, 209u8, 49u8,
                            228u8, 161u8, 170u8, 202u8, 99u8, 200u8, 20u8, 61u8, 17u8, 191u8,
                            203u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OffchainWorker {
                    pub header: runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                }
            }
        }
        pub mod grandpa_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " APIs for integrating the GRANDPA finality gadget into runtimes."]
            #[doc = " This should be implemented on the runtime side."]
            #[doc = ""]
            #[doc = " This is primarily used for negotiating authority-set changes for the"]
            #[doc = " gadget. GRANDPA uses a signaling model of changing authority sets:"]
            #[doc = " changes should be signaled with a delay of N blocks, and then automatically"]
            #[doc = " applied in the runtime after those N blocks have passed."]
            #[doc = ""]
            #[doc = " The consensus protocol will coordinate the handoff externally."]
            pub struct GrandpaApi;
            impl GrandpaApi {
                #[doc = " Get the current GRANDPA authorities and weights. This should not change except"]
                #[doc = " for when changes are scheduled and the corresponding delay has passed."]
                #[doc = ""]
                #[doc = " When called at block B, it will return the set of authorities that should be"]
                #[doc = " used to finalize descendants of this block (B+1, B+2, ...). The block B itself"]
                #[doc = " is finalized by the authorities from block B-1."]
                pub fn grandpa_authorities(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::GrandpaAuthorities,
                    ::std::vec::Vec<(
                        runtime_types::sp_consensus_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "GrandpaApi",
                        "grandpa_authorities",
                        types::GrandpaAuthorities {},
                        [
                            166u8, 76u8, 160u8, 101u8, 242u8, 145u8, 213u8, 10u8, 16u8, 130u8,
                            230u8, 196u8, 125u8, 152u8, 92u8, 143u8, 119u8, 223u8, 140u8, 189u8,
                            203u8, 95u8, 52u8, 105u8, 147u8, 107u8, 135u8, 228u8, 62u8, 178u8,
                            128u8, 33u8,
                        ],
                    )
                }
                #[doc = " Submits an unsigned extrinsic to report an equivocation. The caller"]
                #[doc = " must provide the equivocation proof and a key ownership proof"]
                #[doc = " (should be obtained using `generate_key_ownership_proof`). The"]
                #[doc = " extrinsic will be unsigned and should only be accepted for local"]
                #[doc = " authorship (not to be broadcast to the network). This method returns"]
                #[doc = " `None` when creation of the extrinsic fails, e.g. if equivocation"]
                #[doc = " reporting is disabled for the given runtime (i.e. this method is"]
                #[doc = " hardcoded to return `None`). Only useful in an offchain context."]
                pub fn submit_report_equivocation_unsigned_extrinsic(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    key_owner_proof: runtime_types::sp_consensus_grandpa::OpaqueKeyOwnershipProof,
                ) -> ::subxt::runtime_api::Payload<
                    types::SubmitReportEquivocationUnsignedExtrinsic,
                    ::core::option::Option<()>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "GrandpaApi",
                        "submit_report_equivocation_unsigned_extrinsic",
                        types::SubmitReportEquivocationUnsignedExtrinsic {
                            equivocation_proof,
                            key_owner_proof,
                        },
                        [
                            125u8, 230u8, 200u8, 151u8, 177u8, 13u8, 231u8, 44u8, 254u8, 4u8, 31u8,
                            47u8, 190u8, 197u8, 208u8, 155u8, 198u8, 236u8, 136u8, 50u8, 81u8,
                            35u8, 182u8, 150u8, 200u8, 56u8, 160u8, 180u8, 18u8, 85u8, 4u8, 253u8,
                        ],
                    )
                }
                #[doc = " Generates a proof of key ownership for the given authority in the"]
                #[doc = " given set. An example usage of this module is coupled with the"]
                #[doc = " session historical module to prove that a given authority key is"]
                #[doc = " tied to a given staking identity during a specific session. Proofs"]
                #[doc = " of key ownership are necessary for submitting equivocation reports."]
                #[doc = " NOTE: even though the API takes a `set_id` as parameter the current"]
                #[doc = " implementations ignore this parameter and instead rely on this"]
                #[doc = " method being called at the correct block height, i.e. any point at"]
                #[doc = " which the given set id is live on-chain. Future implementations will"]
                #[doc = " instead use indexed data through an offchain worker, not requiring"]
                #[doc = " older states to be available."]
                pub fn generate_key_ownership_proof(
                    &self,
                    set_id: ::core::primitive::u64,
                    authority_id: runtime_types::sp_consensus_grandpa::app::Public,
                ) -> ::subxt::runtime_api::Payload<
                    types::GenerateKeyOwnershipProof,
                    ::core::option::Option<
                        runtime_types::sp_consensus_grandpa::OpaqueKeyOwnershipProof,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "GrandpaApi",
                        "generate_key_ownership_proof",
                        types::GenerateKeyOwnershipProof {
                            set_id,
                            authority_id,
                        },
                        [
                            192u8, 4u8, 250u8, 56u8, 51u8, 13u8, 210u8, 127u8, 92u8, 159u8, 91u8,
                            139u8, 62u8, 18u8, 63u8, 52u8, 162u8, 69u8, 57u8, 186u8, 134u8, 63u8,
                            31u8, 88u8, 23u8, 137u8, 131u8, 131u8, 117u8, 253u8, 46u8, 133u8,
                        ],
                    )
                }
                #[doc = " Get current GRANDPA authority set id."]
                pub fn current_set_id(
                    &self,
                ) -> ::subxt::runtime_api::Payload<types::CurrentSetId, ::core::primitive::u64>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "GrandpaApi",
                        "current_set_id",
                        types::CurrentSetId {},
                        [
                            42u8, 230u8, 120u8, 211u8, 156u8, 245u8, 109u8, 86u8, 100u8, 146u8,
                            234u8, 205u8, 41u8, 183u8, 109u8, 42u8, 17u8, 33u8, 156u8, 25u8, 139u8,
                            84u8, 101u8, 75u8, 232u8, 198u8, 87u8, 136u8, 218u8, 233u8, 103u8,
                            156u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GrandpaAuthorities {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SubmitReportEquivocationUnsignedExtrinsic {
                    pub equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    pub key_owner_proof:
                        runtime_types::sp_consensus_grandpa::OpaqueKeyOwnershipProof,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GenerateKeyOwnershipProof {
                    pub set_id: ::core::primitive::u64,
                    pub authority_id: runtime_types::sp_consensus_grandpa::app::Public,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CurrentSetId {}
            }
        }
        pub mod nomination_pools_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Runtime api for accessing information about nomination pools."]
            pub struct NominationPoolsApi;
            impl NominationPoolsApi {
                #[doc = " Returns the pending rewards for the member that the AccountId was given for."]
                pub fn pending_rewards(
                    &self,
                    who: ::subxt::utils::AccountId32,
                ) -> ::subxt::runtime_api::Payload<types::PendingRewards, ::core::primitive::u128>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "NominationPoolsApi",
                        "pending_rewards",
                        types::PendingRewards { who },
                        [
                            78u8, 79u8, 88u8, 196u8, 232u8, 243u8, 82u8, 234u8, 115u8, 130u8,
                            124u8, 165u8, 217u8, 64u8, 17u8, 48u8, 245u8, 181u8, 130u8, 120u8,
                            217u8, 158u8, 146u8, 242u8, 41u8, 206u8, 90u8, 201u8, 244u8, 10u8,
                            137u8, 19u8,
                        ],
                    )
                }
                #[doc = " Returns the equivalent balance of `points` for a given pool."]
                pub fn points_to_balance(
                    &self,
                    pool_id: ::core::primitive::u32,
                    points: ::core::primitive::u128,
                ) -> ::subxt::runtime_api::Payload<types::PointsToBalance, ::core::primitive::u128>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "NominationPoolsApi",
                        "points_to_balance",
                        types::PointsToBalance { pool_id, points },
                        [
                            185u8, 86u8, 75u8, 107u8, 174u8, 197u8, 17u8, 216u8, 194u8, 41u8,
                            170u8, 1u8, 113u8, 207u8, 77u8, 143u8, 211u8, 210u8, 181u8, 131u8,
                            16u8, 223u8, 77u8, 134u8, 152u8, 8u8, 160u8, 20u8, 83u8, 241u8, 195u8,
                            2u8,
                        ],
                    )
                }
                #[doc = " Returns the equivalent points of `new_funds` for a given pool."]
                pub fn balance_to_points(
                    &self,
                    pool_id: ::core::primitive::u32,
                    new_funds: ::core::primitive::u128,
                ) -> ::subxt::runtime_api::Payload<types::BalanceToPoints, ::core::primitive::u128>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "NominationPoolsApi",
                        "balance_to_points",
                        types::BalanceToPoints { pool_id, new_funds },
                        [
                            95u8, 31u8, 119u8, 229u8, 217u8, 163u8, 94u8, 190u8, 149u8, 114u8,
                            81u8, 21u8, 215u8, 86u8, 237u8, 48u8, 232u8, 142u8, 114u8, 162u8,
                            176u8, 6u8, 210u8, 190u8, 56u8, 45u8, 229u8, 161u8, 201u8, 84u8, 137u8,
                            76u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PendingRewards {
                    pub who: ::subxt::utils::AccountId32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PointsToBalance {
                    pub pool_id: ::core::primitive::u32,
                    pub points: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BalanceToPoints {
                    pub pool_id: ::core::primitive::u32,
                    pub new_funds: ::core::primitive::u128,
                }
            }
        }
        pub mod staking_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct StakingApi;
            impl StakingApi {
                #[doc = " Returns the nominations quota for a nominator with a given balance."]
                pub fn nominations_quota(
                    &self,
                    balance: ::core::primitive::u128,
                ) -> ::subxt::runtime_api::Payload<types::NominationsQuota, ::core::primitive::u32>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "StakingApi",
                        "nominations_quota",
                        types::NominationsQuota { balance },
                        [
                            221u8, 113u8, 50u8, 150u8, 51u8, 181u8, 158u8, 235u8, 25u8, 160u8,
                            135u8, 47u8, 196u8, 129u8, 90u8, 137u8, 157u8, 167u8, 212u8, 104u8,
                            33u8, 48u8, 83u8, 106u8, 84u8, 220u8, 62u8, 85u8, 25u8, 151u8, 189u8,
                            114u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NominationsQuota {
                    pub balance: ::core::primitive::u128,
                }
            }
        }
        pub mod babe_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API necessary for block authorship with BABE."]
            pub struct BabeApi;
            impl BabeApi {
                #[doc = " Return the configuration for BABE."]
                pub fn configuration(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::Configuration,
                    runtime_types::sp_consensus_babe::BabeConfiguration,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BabeApi",
                        "configuration",
                        types::Configuration {},
                        [
                            94u8, 3u8, 187u8, 249u8, 239u8, 178u8, 74u8, 180u8, 159u8, 1u8, 114u8,
                            106u8, 121u8, 13u8, 242u8, 142u8, 148u8, 59u8, 232u8, 229u8, 242u8,
                            166u8, 230u8, 134u8, 161u8, 101u8, 45u8, 95u8, 118u8, 139u8, 144u8,
                            168u8,
                        ],
                    )
                }
                #[doc = " Returns the slot that started the current epoch."]
                pub fn current_epoch_start(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::CurrentEpochStart,
                    runtime_types::sp_consensus_slots::Slot,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BabeApi",
                        "current_epoch_start",
                        types::CurrentEpochStart {},
                        [
                            122u8, 125u8, 246u8, 170u8, 27u8, 50u8, 128u8, 137u8, 228u8, 62u8,
                            145u8, 64u8, 65u8, 119u8, 166u8, 237u8, 115u8, 92u8, 125u8, 124u8,
                            11u8, 33u8, 96u8, 88u8, 88u8, 122u8, 141u8, 137u8, 58u8, 182u8, 148u8,
                            170u8,
                        ],
                    )
                }
                #[doc = " Returns information regarding the current epoch."]
                pub fn current_epoch(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::CurrentEpoch,
                    runtime_types::sp_consensus_babe::Epoch,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BabeApi",
                        "current_epoch",
                        types::CurrentEpoch {},
                        [
                            232u8, 243u8, 129u8, 8u8, 254u8, 134u8, 15u8, 29u8, 174u8, 98u8, 249u8,
                            165u8, 104u8, 134u8, 102u8, 116u8, 92u8, 70u8, 116u8, 107u8, 161u8,
                            131u8, 122u8, 23u8, 108u8, 88u8, 11u8, 95u8, 175u8, 21u8, 54u8, 158u8,
                        ],
                    )
                }
                #[doc = " Returns information regarding the next epoch (which was already"]
                #[doc = " previously announced)."]
                pub fn next_epoch(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::NextEpoch,
                    runtime_types::sp_consensus_babe::Epoch,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BabeApi",
                        "next_epoch",
                        types::NextEpoch {},
                        [
                            185u8, 92u8, 222u8, 66u8, 8u8, 41u8, 95u8, 28u8, 145u8, 214u8, 27u8,
                            236u8, 228u8, 42u8, 184u8, 185u8, 255u8, 169u8, 59u8, 63u8, 68u8, 50u8,
                            97u8, 72u8, 77u8, 181u8, 120u8, 30u8, 233u8, 217u8, 89u8, 80u8,
                        ],
                    )
                }
                #[doc = " Generates a proof of key ownership for the given authority in the"]
                #[doc = " current epoch. An example usage of this module is coupled with the"]
                #[doc = " session historical module to prove that a given authority key is"]
                #[doc = " tied to a given staking identity during a specific session. Proofs"]
                #[doc = " of key ownership are necessary for submitting equivocation reports."]
                #[doc = " NOTE: even though the API takes a `slot` as parameter the current"]
                #[doc = " implementations ignores this parameter and instead relies on this"]
                #[doc = " method being called at the correct block height, i.e. any point at"]
                #[doc = " which the epoch for the given slot is live on-chain. Future"]
                #[doc = " implementations will instead use indexed data through an offchain"]
                #[doc = " worker, not requiring older states to be available."]
                pub fn generate_key_ownership_proof(
                    &self,
                    slot: runtime_types::sp_consensus_slots::Slot,
                    authority_id: runtime_types::sp_consensus_babe::app::Public,
                ) -> ::subxt::runtime_api::Payload<
                    types::GenerateKeyOwnershipProof,
                    ::core::option::Option<
                        runtime_types::sp_consensus_babe::OpaqueKeyOwnershipProof,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BabeApi",
                        "generate_key_ownership_proof",
                        types::GenerateKeyOwnershipProof { slot, authority_id },
                        [
                            129u8, 33u8, 146u8, 23u8, 214u8, 217u8, 211u8, 76u8, 213u8, 195u8,
                            64u8, 182u8, 252u8, 42u8, 94u8, 121u8, 115u8, 198u8, 9u8, 45u8, 213u8,
                            239u8, 48u8, 237u8, 16u8, 104u8, 233u8, 246u8, 99u8, 66u8, 177u8, 60u8,
                        ],
                    )
                }
                #[doc = " Submits an unsigned extrinsic to report an equivocation. The caller"]
                #[doc = " must provide the equivocation proof and a key ownership proof"]
                #[doc = " (should be obtained using `generate_key_ownership_proof`). The"]
                #[doc = " extrinsic will be unsigned and should only be accepted for local"]
                #[doc = " authorship (not to be broadcast to the network). This method returns"]
                #[doc = " `None` when creation of the extrinsic fails, e.g. if equivocation"]
                #[doc = " reporting is disabled for the given runtime (i.e. this method is"]
                #[doc = " hardcoded to return `None`). Only useful in an offchain context."]
                pub fn submit_report_equivocation_unsigned_extrinsic(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    key_owner_proof: runtime_types::sp_consensus_babe::OpaqueKeyOwnershipProof,
                ) -> ::subxt::runtime_api::Payload<
                    types::SubmitReportEquivocationUnsignedExtrinsic,
                    ::core::option::Option<()>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "BabeApi",
                        "submit_report_equivocation_unsigned_extrinsic",
                        types::SubmitReportEquivocationUnsignedExtrinsic {
                            equivocation_proof,
                            key_owner_proof,
                        },
                        [
                            246u8, 96u8, 99u8, 104u8, 13u8, 88u8, 201u8, 38u8, 92u8, 57u8, 253u8,
                            173u8, 123u8, 68u8, 14u8, 101u8, 57u8, 89u8, 153u8, 236u8, 99u8, 117u8,
                            202u8, 79u8, 213u8, 216u8, 216u8, 97u8, 107u8, 68u8, 89u8, 138u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Configuration {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CurrentEpochStart {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CurrentEpoch {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NextEpoch {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GenerateKeyOwnershipProof {
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                    pub authority_id: runtime_types::sp_consensus_babe::app::Public,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SubmitReportEquivocationUnsignedExtrinsic {
                    pub equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    pub key_owner_proof: runtime_types::sp_consensus_babe::OpaqueKeyOwnershipProof,
                }
            }
        }
        pub mod authority_discovery_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The authority discovery api."]
            #[doc = ""]
            #[doc = " This api is used by the `client/authority-discovery` module to retrieve identifiers"]
            #[doc = " of the current and next authority set."]
            pub struct AuthorityDiscoveryApi;
            impl AuthorityDiscoveryApi {
                #[doc = " Retrieve authority identifiers of the current and next authority set."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::Authorities,
                    ::std::vec::Vec<runtime_types::sp_authority_discovery::app::Public>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AuthorityDiscoveryApi",
                        "authorities",
                        types::Authorities {},
                        [
                            231u8, 109u8, 175u8, 33u8, 103u8, 6u8, 157u8, 241u8, 62u8, 92u8, 246u8,
                            9u8, 109u8, 137u8, 233u8, 96u8, 103u8, 59u8, 201u8, 132u8, 102u8, 32u8,
                            19u8, 183u8, 106u8, 146u8, 41u8, 172u8, 147u8, 55u8, 156u8, 77u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Authorities {}
            }
        }
        pub mod account_nonce_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The API to query account nonce (aka transaction index)."]
            pub struct AccountNonceApi;
            impl AccountNonceApi {
                #[doc = " Get current account nonce of given `AccountId`."]
                pub fn account_nonce(
                    &self,
                    account: ::subxt::utils::AccountId32,
                ) -> ::subxt::runtime_api::Payload<types::AccountNonce, ::core::primitive::u32>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "AccountNonceApi",
                        "account_nonce",
                        types::AccountNonce { account },
                        [
                            231u8, 82u8, 7u8, 227u8, 131u8, 2u8, 215u8, 252u8, 173u8, 82u8, 11u8,
                            103u8, 200u8, 25u8, 114u8, 116u8, 79u8, 229u8, 152u8, 150u8, 236u8,
                            37u8, 101u8, 26u8, 220u8, 146u8, 182u8, 101u8, 73u8, 55u8, 191u8,
                            171u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccountNonce {
                    pub account: ::subxt::utils::AccountId32,
                }
            }
        }
        pub mod assets_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct AssetsApi;
            impl AssetsApi {
                #[doc = " Returns the list of `AssetId`s and corresponding balance that an `AccountId` has."]
                pub fn account_balances(
                    &self,
                    account: ::subxt::utils::AccountId32,
                ) -> ::subxt::runtime_api::Payload<
                    types::AccountBalances,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u128)>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AssetsApi",
                        "account_balances",
                        types::AccountBalances { account },
                        [
                            15u8, 233u8, 252u8, 152u8, 14u8, 46u8, 220u8, 50u8, 101u8, 86u8, 163u8,
                            194u8, 252u8, 112u8, 73u8, 122u8, 4u8, 128u8, 152u8, 174u8, 169u8,
                            233u8, 54u8, 170u8, 34u8, 28u8, 194u8, 43u8, 87u8, 161u8, 251u8, 107u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccountBalances {
                    pub account: ::subxt::utils::AccountId32,
                }
            }
        }
        pub mod contracts_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The API used to dry-run contract interactions."]
            pub struct ContractsApi;
            impl ContractsApi {
                #[doc = " Perform a call from a specified account to a given contract."]
                #[doc = ""]
                #[doc = " See [`crate::Pallet::bare_call`]."]
                pub fn call(
                    &self,
                    origin: ::subxt::utils::AccountId32,
                    dest: ::subxt::utils::AccountId32,
                    value: ::core::primitive::u128,
                    gas_limit: ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    storage_deposit_limit: ::core::option::Option<::core::primitive::u128>,
                    input_data: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::Call,
                    runtime_types::pallet_contracts_primitives::ContractResult<
                        ::core::result::Result<
                            runtime_types::pallet_contracts_primitives::ExecReturnValue,
                            runtime_types::sp_runtime::DispatchError,
                        >,
                        ::core::primitive::u128,
                        runtime_types::frame_system::EventRecord<
                            runtime_types::kitchensink_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "ContractsApi",
                        "call",
                        types::Call {
                            origin,
                            dest,
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            input_data,
                        },
                        [
                            11u8, 1u8, 59u8, 49u8, 71u8, 17u8, 60u8, 87u8, 208u8, 68u8, 192u8,
                            30u8, 75u8, 80u8, 171u8, 240u8, 205u8, 124u8, 64u8, 18u8, 96u8, 159u8,
                            125u8, 79u8, 98u8, 84u8, 244u8, 155u8, 244u8, 151u8, 208u8, 104u8,
                        ],
                    )
                }
                #[doc = " Instantiate a new contract."]
                #[doc = ""]
                #[doc = " See `[crate::Pallet::bare_instantiate]`."]
                pub fn instantiate(
                    &self,
                    origin: ::subxt::utils::AccountId32,
                    value: ::core::primitive::u128,
                    gas_limit: ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    storage_deposit_limit: ::core::option::Option<::core::primitive::u128>,
                    code: runtime_types::pallet_contracts_primitives::Code<::subxt::utils::H256>,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                    salt: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::Instantiate,
                    runtime_types::pallet_contracts_primitives::ContractResult<
                        ::core::result::Result<
                            runtime_types::pallet_contracts_primitives::InstantiateReturnValue<
                                ::subxt::utils::AccountId32,
                            >,
                            runtime_types::sp_runtime::DispatchError,
                        >,
                        ::core::primitive::u128,
                        runtime_types::frame_system::EventRecord<
                            runtime_types::kitchensink_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "ContractsApi",
                        "instantiate",
                        types::Instantiate {
                            origin,
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code,
                            data,
                            salt,
                        },
                        [
                            155u8, 6u8, 90u8, 1u8, 218u8, 21u8, 10u8, 134u8, 126u8, 248u8, 96u8,
                            245u8, 34u8, 231u8, 52u8, 21u8, 187u8, 45u8, 82u8, 125u8, 3u8, 164u8,
                            176u8, 235u8, 47u8, 171u8, 7u8, 91u8, 161u8, 182u8, 124u8, 140u8,
                        ],
                    )
                }
                #[doc = " Upload new code without instantiating a contract from it."]
                #[doc = ""]
                #[doc = " See [`crate::Pallet::bare_upload_code`]."]
                pub fn upload_code(
                    &self,
                    origin: ::subxt::utils::AccountId32,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                    storage_deposit_limit: ::core::option::Option<::core::primitive::u128>,
                    determinism: runtime_types::pallet_contracts::wasm::Determinism,
                ) -> ::subxt::runtime_api::Payload<
                    types::UploadCode,
                    ::core::result::Result<
                        runtime_types::pallet_contracts_primitives::CodeUploadReturnValue<
                            ::subxt::utils::H256,
                            ::core::primitive::u128,
                        >,
                        runtime_types::sp_runtime::DispatchError,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "ContractsApi",
                        "upload_code",
                        types::UploadCode {
                            origin,
                            code,
                            storage_deposit_limit,
                            determinism,
                        },
                        [
                            116u8, 219u8, 248u8, 245u8, 11u8, 219u8, 150u8, 62u8, 37u8, 53u8,
                            164u8, 177u8, 42u8, 232u8, 6u8, 27u8, 18u8, 25u8, 177u8, 131u8, 188u8,
                            83u8, 22u8, 198u8, 23u8, 43u8, 108u8, 211u8, 33u8, 57u8, 215u8, 142u8,
                        ],
                    )
                }
                #[doc = " Query a given storage key in a given contract."]
                #[doc = ""]
                #[doc = " Returns `Ok(Some(Vec<u8>))` if the storage value exists under the given key in the"]
                #[doc = " specified account and `Ok(None)` if it doesn't. If the account specified by the address"]
                #[doc = " doesn't exist, or doesn't have a contract then `Err` is returned."]
                pub fn get_storage(
                    &self,
                    address: ::subxt::utils::AccountId32,
                    key: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::GetStorage,
                    ::core::result::Result<
                        ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                        runtime_types::pallet_contracts_primitives::ContractAccessError,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "ContractsApi",
                        "get_storage",
                        types::GetStorage { address, key },
                        [
                            13u8, 211u8, 167u8, 167u8, 72u8, 189u8, 192u8, 0u8, 140u8, 150u8,
                            242u8, 145u8, 248u8, 183u8, 42u8, 42u8, 25u8, 151u8, 143u8, 155u8,
                            69u8, 40u8, 176u8, 77u8, 139u8, 217u8, 144u8, 8u8, 236u8, 14u8, 4u8,
                            2u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Call {
                    pub origin: ::subxt::utils::AccountId32,
                    pub dest: ::subxt::utils::AccountId32,
                    pub value: ::core::primitive::u128,
                    pub gas_limit:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub storage_deposit_limit: ::core::option::Option<::core::primitive::u128>,
                    pub input_data: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Instantiate {
                    pub origin: ::subxt::utils::AccountId32,
                    pub value: ::core::primitive::u128,
                    pub gas_limit:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub storage_deposit_limit: ::core::option::Option<::core::primitive::u128>,
                    pub code:
                        runtime_types::pallet_contracts_primitives::Code<::subxt::utils::H256>,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                    pub salt: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UploadCode {
                    pub origin: ::subxt::utils::AccountId32,
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                    pub storage_deposit_limit: ::core::option::Option<::core::primitive::u128>,
                    pub determinism: runtime_types::pallet_contracts::wasm::Determinism,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GetStorage {
                    pub address: ::subxt::utils::AccountId32,
                    pub key: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
        }
        pub mod transaction_payment_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentApi;
            impl TransactionPaymentApi {
                pub fn query_info(
                    &self,
                    uxt : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) >,
                    len: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryInfo,
                    runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                        ::core::primitive::u128,
                        runtime_types::sp_weights::weight_v2::Weight,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_info",
                        types::QueryInfo { uxt, len },
                        [
                            105u8, 184u8, 31u8, 255u8, 154u8, 206u8, 112u8, 245u8, 135u8, 114u8,
                            63u8, 219u8, 244u8, 245u8, 90u8, 185u8, 99u8, 24u8, 80u8, 67u8, 29u8,
                            137u8, 42u8, 248u8, 19u8, 227u8, 200u8, 7u8, 253u8, 118u8, 140u8, 53u8,
                        ],
                    )
                }
                pub fn query_fee_details(
                    &self,
                    uxt : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) >,
                    len: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryFeeDetails,
                    runtime_types::pallet_transaction_payment::types::FeeDetails<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_fee_details",
                        types::QueryFeeDetails { uxt, len },
                        [
                            226u8, 161u8, 181u8, 195u8, 172u8, 51u8, 19u8, 162u8, 77u8, 23u8,
                            200u8, 239u8, 132u8, 197u8, 106u8, 138u8, 122u8, 34u8, 234u8, 116u8,
                            104u8, 181u8, 213u8, 72u8, 154u8, 44u8, 110u8, 149u8, 49u8, 16u8,
                            223u8, 245u8,
                        ],
                    )
                }
                pub fn query_weight_to_fee(
                    &self,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::runtime_api::Payload<types::QueryWeightToFee, ::core::primitive::u128>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            45u8, 47u8, 133u8, 75u8, 72u8, 23u8, 150u8, 14u8, 71u8, 36u8, 148u8,
                            48u8, 133u8, 175u8, 154u8, 76u8, 168u8, 104u8, 47u8, 33u8, 96u8, 206u8,
                            67u8, 133u8, 104u8, 206u8, 126u8, 53u8, 225u8, 134u8, 14u8, 140u8,
                        ],
                    )
                }
                pub fn query_length_to_fee(
                    &self,
                    length: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<types::QueryLengthToFee, ::core::primitive::u128>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            92u8, 132u8, 29u8, 119u8, 66u8, 11u8, 196u8, 224u8, 129u8, 23u8, 249u8,
                            12u8, 32u8, 28u8, 92u8, 50u8, 188u8, 101u8, 203u8, 229u8, 248u8, 216u8,
                            130u8, 150u8, 212u8, 161u8, 81u8, 254u8, 116u8, 89u8, 162u8, 48u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryInfo { pub uxt : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > , pub len : :: core :: primitive :: u32 , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryFeeDetails { pub uxt : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: utils :: MultiAddress < :: subxt :: utils :: AccountId32 , :: core :: primitive :: u32 > , runtime_types :: kitchensink_runtime :: RuntimeCall , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender , runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_asset_conversion_tx_payment :: ChargeAssetTxPayment ,) > , pub len : :: core :: primitive :: u32 , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryWeightToFee {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryLengthToFee {
                    pub length: ::core::primitive::u32,
                }
            }
        }
        pub mod asset_conversion_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " This runtime api allows people to query the size of the liquidity pools"]
            #[doc = " and quote prices for swaps."]
            pub struct AssetConversionApi;
            impl AssetConversionApi {
                #[doc = " Provides a quote for [`Pallet::swap_tokens_for_exact_tokens`]."]
                #[doc = ""]
                #[doc = " Note that the price may have changed by the time the transaction is executed."]
                #[doc = " (Use `amount_in_max` to control slippage.)"]
                pub fn quote_price_tokens_for_exact_tokens(
                    &self,
                    asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                    include_fee: ::core::primitive::bool,
                ) -> ::subxt::runtime_api::Payload<
                    types::QuotePriceTokensForExactTokens,
                    ::core::option::Option<::core::primitive::u128>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AssetConversionApi",
                        "quote_price_tokens_for_exact_tokens",
                        types::QuotePriceTokensForExactTokens {
                            asset1,
                            asset2,
                            amount,
                            include_fee,
                        },
                        [
                            246u8, 44u8, 83u8, 30u8, 163u8, 236u8, 191u8, 178u8, 195u8, 24u8, 19u8,
                            162u8, 173u8, 7u8, 23u8, 86u8, 55u8, 79u8, 225u8, 104u8, 135u8, 192u8,
                            164u8, 223u8, 49u8, 80u8, 205u8, 27u8, 32u8, 166u8, 50u8, 241u8,
                        ],
                    )
                }
                #[doc = " Provides a quote for [`Pallet::swap_exact_tokens_for_tokens`]."]
                #[doc = ""]
                #[doc = " Note that the price may have changed by the time the transaction is executed."]
                #[doc = " (Use `amount_out_min` to control slippage.)"]
                pub fn quote_price_exact_tokens_for_tokens(
                    &self,
                    asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                    include_fee: ::core::primitive::bool,
                ) -> ::subxt::runtime_api::Payload<
                    types::QuotePriceExactTokensForTokens,
                    ::core::option::Option<::core::primitive::u128>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AssetConversionApi",
                        "quote_price_exact_tokens_for_tokens",
                        types::QuotePriceExactTokensForTokens {
                            asset1,
                            asset2,
                            amount,
                            include_fee,
                        },
                        [
                            87u8, 187u8, 131u8, 192u8, 150u8, 158u8, 141u8, 190u8, 22u8, 53u8,
                            58u8, 106u8, 115u8, 80u8, 55u8, 212u8, 200u8, 205u8, 209u8, 85u8,
                            124u8, 4u8, 139u8, 81u8, 197u8, 19u8, 55u8, 23u8, 7u8, 199u8, 13u8,
                            150u8,
                        ],
                    )
                }
                #[doc = " Returns the size of the liquidity pool for the given asset pair."]
                pub fn get_reserves(
                    &self,
                    asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::runtime_api::Payload<
                    types::GetReserves,
                    ::core::option::Option<(::core::primitive::u128, ::core::primitive::u128)>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "AssetConversionApi",
                        "get_reserves",
                        types::GetReserves { asset1, asset2 },
                        [
                            107u8, 210u8, 68u8, 93u8, 22u8, 146u8, 215u8, 216u8, 51u8, 6u8, 210u8,
                            33u8, 170u8, 45u8, 227u8, 99u8, 249u8, 168u8, 209u8, 62u8, 236u8, 80u8,
                            6u8, 58u8, 28u8, 51u8, 134u8, 135u8, 152u8, 190u8, 128u8, 226u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QuotePriceTokensForExactTokens {
                    pub asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub amount: ::core::primitive::u128,
                    pub include_fee: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QuotePriceExactTokensForTokens {
                    pub asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub amount: ::core::primitive::u128,
                    pub include_fee: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GetReserves {
                    pub asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                }
            }
        }
        pub mod transaction_payment_call_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentCallApi;
            impl TransactionPaymentCallApi {
                #[doc = " Query information of a dispatch class, weight, and fee of a given encoded `Call`."]
                pub fn query_call_info(
                    &self,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                    len: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryCallInfo,
                    runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                        ::core::primitive::u128,
                        runtime_types::sp_weights::weight_v2::Weight,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_info",
                        types::QueryCallInfo { call, len },
                        [
                            107u8, 120u8, 95u8, 201u8, 97u8, 136u8, 48u8, 235u8, 62u8, 184u8, 60u8,
                            67u8, 184u8, 196u8, 1u8, 142u8, 59u8, 97u8, 184u8, 24u8, 132u8, 109u8,
                            45u8, 254u8, 105u8, 146u8, 26u8, 70u8, 1u8, 144u8, 46u8, 183u8,
                        ],
                    )
                }
                #[doc = " Query fee details of a given encoded `Call`."]
                pub fn query_call_fee_details(
                    &self,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                    len: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<
                    types::QueryCallFeeDetails,
                    runtime_types::pallet_transaction_payment::types::FeeDetails<
                        ::core::primitive::u128,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_fee_details",
                        types::QueryCallFeeDetails { call, len },
                        [
                            183u8, 215u8, 60u8, 145u8, 66u8, 166u8, 179u8, 26u8, 114u8, 105u8,
                            71u8, 238u8, 99u8, 11u8, 89u8, 191u8, 51u8, 103u8, 187u8, 190u8, 35u8,
                            248u8, 162u8, 57u8, 167u8, 121u8, 151u8, 0u8, 169u8, 249u8, 71u8,
                            254u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `WeightToFee` given some input."]
                pub fn query_weight_to_fee(
                    &self,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::runtime_api::Payload<types::QueryWeightToFee, ::core::primitive::u128>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            88u8, 171u8, 36u8, 225u8, 227u8, 44u8, 19u8, 249u8, 142u8, 183u8,
                            164u8, 31u8, 32u8, 26u8, 157u8, 81u8, 128u8, 24u8, 163u8, 191u8, 228u8,
                            17u8, 217u8, 197u8, 135u8, 10u8, 178u8, 253u8, 155u8, 209u8, 136u8,
                            253u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `LengthToFee` given some input."]
                pub fn query_length_to_fee(
                    &self,
                    length: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<types::QueryLengthToFee, ::core::primitive::u128>
                {
                    ::subxt::runtime_api::Payload::new_static(
                        "TransactionPaymentCallApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            246u8, 40u8, 4u8, 160u8, 152u8, 94u8, 170u8, 53u8, 205u8, 122u8, 5u8,
                            69u8, 70u8, 25u8, 128u8, 156u8, 119u8, 134u8, 116u8, 147u8, 14u8,
                            164u8, 65u8, 140u8, 86u8, 13u8, 250u8, 218u8, 89u8, 95u8, 234u8, 228u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryCallInfo {
                    pub call: runtime_types::kitchensink_runtime::RuntimeCall,
                    pub len: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryCallFeeDetails {
                    pub call: runtime_types::kitchensink_runtime::RuntimeCall,
                    pub len: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryWeightToFee {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QueryLengthToFee {
                    pub length: ::core::primitive::u32,
                }
            }
        }
        pub mod nfts_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct NftsApi;
            impl NftsApi {
                pub fn owner(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<
                    types::Owner,
                    ::core::option::Option<::subxt::utils::AccountId32>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "NftsApi",
                        "owner",
                        types::Owner { collection, item },
                        [
                            147u8, 217u8, 146u8, 154u8, 223u8, 190u8, 219u8, 249u8, 38u8, 225u8,
                            81u8, 155u8, 45u8, 155u8, 58u8, 229u8, 65u8, 221u8, 115u8, 76u8, 61u8,
                            63u8, 232u8, 133u8, 195u8, 158u8, 29u8, 72u8, 3u8, 138u8, 132u8, 245u8,
                        ],
                    )
                }
                pub fn collection_owner(
                    &self,
                    collection: ::core::primitive::u32,
                ) -> ::subxt::runtime_api::Payload<
                    types::CollectionOwner,
                    ::core::option::Option<::subxt::utils::AccountId32>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "NftsApi",
                        "collection_owner",
                        types::CollectionOwner { collection },
                        [
                            213u8, 152u8, 42u8, 243u8, 110u8, 150u8, 66u8, 14u8, 73u8, 124u8, 71u8,
                            27u8, 241u8, 80u8, 218u8, 94u8, 189u8, 198u8, 173u8, 146u8, 210u8,
                            195u8, 137u8, 174u8, 46u8, 44u8, 188u8, 97u8, 133u8, 26u8, 119u8,
                            170u8,
                        ],
                    )
                }
                pub fn attribute(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    key: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::Attribute,
                    ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "NftsApi",
                        "attribute",
                        types::Attribute {
                            collection,
                            item,
                            key,
                        },
                        [
                            72u8, 188u8, 148u8, 51u8, 35u8, 114u8, 196u8, 205u8, 166u8, 25u8,
                            223u8, 83u8, 32u8, 194u8, 18u8, 54u8, 72u8, 203u8, 154u8, 36u8, 170u8,
                            131u8, 187u8, 239u8, 112u8, 26u8, 174u8, 169u8, 4u8, 142u8, 146u8,
                            206u8,
                        ],
                    )
                }
                pub fn custom_attribute(
                    &self,
                    account: ::subxt::utils::AccountId32,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    key: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::CustomAttribute,
                    ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "NftsApi",
                        "custom_attribute",
                        types::CustomAttribute {
                            account,
                            collection,
                            item,
                            key,
                        },
                        [
                            16u8, 2u8, 123u8, 104u8, 141u8, 151u8, 63u8, 137u8, 244u8, 10u8, 143u8,
                            199u8, 33u8, 54u8, 89u8, 252u8, 248u8, 156u8, 74u8, 126u8, 168u8, 28u8,
                            9u8, 133u8, 183u8, 58u8, 25u8, 86u8, 219u8, 230u8, 243u8, 199u8,
                        ],
                    )
                }
                pub fn system_attribute(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    key: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::SystemAttribute,
                    ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "NftsApi",
                        "system_attribute",
                        types::SystemAttribute {
                            collection,
                            item,
                            key,
                        },
                        [
                            115u8, 181u8, 178u8, 8u8, 246u8, 21u8, 251u8, 41u8, 193u8, 213u8,
                            187u8, 227u8, 197u8, 87u8, 246u8, 180u8, 207u8, 48u8, 91u8, 7u8, 129u8,
                            148u8, 91u8, 203u8, 200u8, 32u8, 57u8, 224u8, 179u8, 199u8, 130u8,
                            10u8,
                        ],
                    )
                }
                pub fn collection_attribute(
                    &self,
                    collection: ::core::primitive::u32,
                    key: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::CollectionAttribute,
                    ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "NftsApi",
                        "collection_attribute",
                        types::CollectionAttribute { collection, key },
                        [
                            143u8, 84u8, 4u8, 0u8, 233u8, 233u8, 59u8, 18u8, 162u8, 234u8, 253u8,
                            11u8, 31u8, 218u8, 65u8, 251u8, 8u8, 225u8, 124u8, 88u8, 22u8, 203u8,
                            224u8, 92u8, 183u8, 114u8, 82u8, 33u8, 88u8, 26u8, 218u8, 237u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Owner {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectionOwner {
                    pub collection: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Attribute {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub key: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CustomAttribute {
                    pub account: ::subxt::utils::AccountId32,
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub key: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SystemAttribute {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub key: ::std::vec::Vec<::core::primitive::u8>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectionAttribute {
                    pub collection: ::core::primitive::u32,
                    pub key: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
        }
        pub mod mmr_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API to interact with MMR pallet."]
            pub struct MmrApi;
            impl MmrApi {
                #[doc = " Return the on-chain MMR root hash."]
                pub fn mmr_root(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::MmrRoot,
                    ::core::result::Result<
                        ::subxt::utils::H256,
                        runtime_types::sp_mmr_primitives::Error,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "MmrApi",
                        "mmr_root",
                        types::MmrRoot {},
                        [
                            148u8, 252u8, 77u8, 233u8, 236u8, 8u8, 119u8, 105u8, 207u8, 161u8,
                            109u8, 158u8, 211u8, 64u8, 67u8, 216u8, 242u8, 52u8, 122u8, 4u8, 83u8,
                            113u8, 54u8, 77u8, 165u8, 89u8, 61u8, 159u8, 98u8, 51u8, 45u8, 90u8,
                        ],
                    )
                }
                #[doc = " Return the number of MMR blocks in the chain."]
                pub fn mmr_leaf_count(
                    &self,
                ) -> ::subxt::runtime_api::Payload<
                    types::MmrLeafCount,
                    ::core::result::Result<
                        ::core::primitive::u64,
                        runtime_types::sp_mmr_primitives::Error,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "MmrApi",
                        "mmr_leaf_count",
                        types::MmrLeafCount {},
                        [
                            165u8, 141u8, 127u8, 184u8, 27u8, 185u8, 251u8, 25u8, 44u8, 93u8,
                            239u8, 158u8, 104u8, 91u8, 22u8, 87u8, 101u8, 166u8, 90u8, 90u8, 45u8,
                            105u8, 254u8, 136u8, 233u8, 121u8, 9u8, 216u8, 179u8, 55u8, 126u8,
                            158u8,
                        ],
                    )
                }
                #[doc = " Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,"]
                #[doc = " use historical MMR state at given block height `n`. Else, use current MMR state."]
                pub fn generate_proof(
                    &self,
                    block_numbers: ::std::vec::Vec<::core::primitive::u32>,
                    best_known_block_number: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::runtime_api::Payload<
                    types::GenerateProof,
                    ::core::result::Result<
                        (
                            ::std::vec::Vec<runtime_types::sp_mmr_primitives::EncodableOpaqueLeaf>,
                            runtime_types::sp_mmr_primitives::Proof<::subxt::utils::H256>,
                        ),
                        runtime_types::sp_mmr_primitives::Error,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "MmrApi",
                        "generate_proof",
                        types::GenerateProof {
                            block_numbers,
                            best_known_block_number,
                        },
                        [
                            56u8, 239u8, 77u8, 199u8, 40u8, 38u8, 113u8, 43u8, 65u8, 189u8, 21u8,
                            81u8, 216u8, 8u8, 3u8, 155u8, 202u8, 186u8, 117u8, 31u8, 140u8, 237u8,
                            114u8, 30u8, 228u8, 77u8, 171u8, 183u8, 198u8, 198u8, 20u8, 98u8,
                        ],
                    )
                }
                #[doc = " Verify MMR proof against on-chain MMR for a batch of leaves."]
                #[doc = ""]
                #[doc = " Note this function will use on-chain MMR root hash and check if the proof matches the hash."]
                #[doc = " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the"]
                #[doc = " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"]
                pub fn verify_proof(
                    &self,
                    leaves: ::std::vec::Vec<runtime_types::sp_mmr_primitives::EncodableOpaqueLeaf>,
                    proof: runtime_types::sp_mmr_primitives::Proof<::subxt::utils::H256>,
                ) -> ::subxt::runtime_api::Payload<
                    types::VerifyProof,
                    ::core::result::Result<(), runtime_types::sp_mmr_primitives::Error>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "MmrApi",
                        "verify_proof",
                        types::VerifyProof { leaves, proof },
                        [
                            94u8, 245u8, 92u8, 162u8, 169u8, 237u8, 220u8, 144u8, 134u8, 89u8,
                            164u8, 205u8, 28u8, 67u8, 164u8, 15u8, 185u8, 160u8, 255u8, 91u8,
                            167u8, 63u8, 147u8, 199u8, 99u8, 103u8, 43u8, 182u8, 227u8, 1u8, 118u8,
                            174u8,
                        ],
                    )
                }
                #[doc = " Verify MMR proof against given root hash for a batch of leaves."]
                #[doc = ""]
                #[doc = " Note this function does not require any on-chain storage - the"]
                #[doc = " proof is verified against given MMR root hash."]
                #[doc = ""]
                #[doc = " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the"]
                #[doc = " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"]
                pub fn verify_proof_stateless(
                    &self,
                    root: ::subxt::utils::H256,
                    leaves: ::std::vec::Vec<runtime_types::sp_mmr_primitives::EncodableOpaqueLeaf>,
                    proof: runtime_types::sp_mmr_primitives::Proof<::subxt::utils::H256>,
                ) -> ::subxt::runtime_api::Payload<
                    types::VerifyProofStateless,
                    ::core::result::Result<(), runtime_types::sp_mmr_primitives::Error>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "MmrApi",
                        "verify_proof_stateless",
                        types::VerifyProofStateless {
                            root,
                            leaves,
                            proof,
                        },
                        [
                            100u8, 183u8, 97u8, 190u8, 137u8, 183u8, 228u8, 70u8, 184u8, 42u8,
                            195u8, 139u8, 234u8, 166u8, 137u8, 206u8, 128u8, 217u8, 40u8, 149u8,
                            55u8, 107u8, 30u8, 154u8, 234u8, 132u8, 247u8, 37u8, 133u8, 19u8,
                            141u8, 9u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MmrRoot {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MmrLeafCount {}
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GenerateProof {
                    pub block_numbers: ::std::vec::Vec<::core::primitive::u32>,
                    pub best_known_block_number: ::core::option::Option<::core::primitive::u32>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VerifyProof {
                    pub leaves:
                        ::std::vec::Vec<runtime_types::sp_mmr_primitives::EncodableOpaqueLeaf>,
                    pub proof: runtime_types::sp_mmr_primitives::Proof<::subxt::utils::H256>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VerifyProofStateless {
                    pub root: ::subxt::utils::H256,
                    pub leaves:
                        ::std::vec::Vec<runtime_types::sp_mmr_primitives::EncodableOpaqueLeaf>,
                    pub proof: runtime_types::sp_mmr_primitives::Proof<::subxt::utils::H256>,
                }
            }
        }
        pub mod session_keys {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Session keys runtime api."]
            pub struct SessionKeys;
            impl SessionKeys {
                #[doc = " Generate a set of session keys with optionally using the given seed."]
                #[doc = " The keys should be stored within the keystore exposed via runtime"]
                #[doc = " externalities."]
                #[doc = ""]
                #[doc = " The seed needs to be a valid `utf8` string."]
                #[doc = ""]
                #[doc = " Returns the concatenated SCALE encoded public keys."]
                pub fn generate_session_keys(
                    &self,
                    seed: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                ) -> ::subxt::runtime_api::Payload<
                    types::GenerateSessionKeys,
                    ::std::vec::Vec<::core::primitive::u8>,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "SessionKeys",
                        "generate_session_keys",
                        types::GenerateSessionKeys { seed },
                        [
                            169u8, 35u8, 108u8, 136u8, 239u8, 85u8, 250u8, 171u8, 92u8, 77u8,
                            200u8, 52u8, 59u8, 248u8, 134u8, 208u8, 101u8, 170u8, 160u8, 251u8,
                            245u8, 224u8, 34u8, 132u8, 85u8, 24u8, 162u8, 180u8, 151u8, 65u8, 51u8,
                            62u8,
                        ],
                    )
                }
                #[doc = " Decode the given public session keys."]
                #[doc = ""]
                #[doc = " Returns the list of public raw public keys + key type."]
                pub fn decode_session_keys(
                    &self,
                    encoded: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::runtime_api::Payload<
                    types::DecodeSessionKeys,
                    ::core::option::Option<
                        ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            runtime_types::sp_core::crypto::KeyTypeId,
                        )>,
                    >,
                > {
                    ::subxt::runtime_api::Payload::new_static(
                        "SessionKeys",
                        "decode_session_keys",
                        types::DecodeSessionKeys { encoded },
                        [
                            156u8, 244u8, 114u8, 80u8, 184u8, 235u8, 37u8, 160u8, 130u8, 28u8,
                            209u8, 72u8, 5u8, 200u8, 200u8, 213u8, 216u8, 137u8, 160u8, 10u8, 6u8,
                            238u8, 89u8, 31u8, 165u8, 174u8, 51u8, 198u8, 161u8, 156u8, 202u8,
                            151u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GenerateSessionKeys {
                    pub seed: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DecodeSessionKeys {
                    pub encoded: ::std::vec::Vec<::core::primitive::u8>,
                }
            }
        }
    }
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn babe(&self) -> babe::constants::ConstantsApi {
            babe::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn indices(&self) -> indices::constants::ConstantsApi {
            indices::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn election_provider_multi_phase(
            &self,
        ) -> election_provider_multi_phase::constants::ConstantsApi {
            election_provider_multi_phase::constants::ConstantsApi
        }
        pub fn staking(&self) -> staking::constants::ConstantsApi {
            staking::constants::ConstantsApi
        }
        pub fn democracy(&self) -> democracy::constants::ConstantsApi {
            democracy::constants::ConstantsApi
        }
        pub fn council(&self) -> council::constants::ConstantsApi {
            council::constants::ConstantsApi
        }
        pub fn technical_committee(&self) -> technical_committee::constants::ConstantsApi {
            technical_committee::constants::ConstantsApi
        }
        pub fn elections(&self) -> elections::constants::ConstantsApi {
            elections::constants::ConstantsApi
        }
        pub fn grandpa(&self) -> grandpa::constants::ConstantsApi {
            grandpa::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn contracts(&self) -> contracts::constants::ConstantsApi {
            contracts::constants::ConstantsApi
        }
        pub fn im_online(&self) -> im_online::constants::ConstantsApi {
            im_online::constants::ConstantsApi
        }
        pub fn identity(&self) -> identity::constants::ConstantsApi {
            identity::constants::ConstantsApi
        }
        pub fn society(&self) -> society::constants::ConstantsApi {
            society::constants::ConstantsApi
        }
        pub fn recovery(&self) -> recovery::constants::ConstantsApi {
            recovery::constants::ConstantsApi
        }
        pub fn vesting(&self) -> vesting::constants::ConstantsApi {
            vesting::constants::ConstantsApi
        }
        pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
            scheduler::constants::ConstantsApi
        }
        pub fn proxy(&self) -> proxy::constants::ConstantsApi {
            proxy::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn bounties(&self) -> bounties::constants::ConstantsApi {
            bounties::constants::ConstantsApi
        }
        pub fn tips(&self) -> tips::constants::ConstantsApi {
            tips::constants::ConstantsApi
        }
        pub fn assets(&self) -> assets::constants::ConstantsApi {
            assets::constants::ConstantsApi
        }
        pub fn pool_assets(&self) -> pool_assets::constants::ConstantsApi {
            pool_assets::constants::ConstantsApi
        }
        pub fn lottery(&self) -> lottery::constants::ConstantsApi {
            lottery::constants::ConstantsApi
        }
        pub fn nis(&self) -> nis::constants::ConstantsApi {
            nis::constants::ConstantsApi
        }
        pub fn uniques(&self) -> uniques::constants::ConstantsApi {
            uniques::constants::ConstantsApi
        }
        pub fn nfts(&self) -> nfts::constants::ConstantsApi {
            nfts::constants::ConstantsApi
        }
        pub fn nft_fractionalization(&self) -> nft_fractionalization::constants::ConstantsApi {
            nft_fractionalization::constants::ConstantsApi
        }
        pub fn salary(&self) -> salary::constants::ConstantsApi {
            salary::constants::ConstantsApi
        }
        pub fn core_fellowship(&self) -> core_fellowship::constants::ConstantsApi {
            core_fellowship::constants::ConstantsApi
        }
        pub fn voter_list(&self) -> voter_list::constants::ConstantsApi {
            voter_list::constants::ConstantsApi
        }
        pub fn state_trie_migration(&self) -> state_trie_migration::constants::ConstantsApi {
            state_trie_migration::constants::ConstantsApi
        }
        pub fn child_bounties(&self) -> child_bounties::constants::ConstantsApi {
            child_bounties::constants::ConstantsApi
        }
        pub fn referenda(&self) -> referenda::constants::ConstantsApi {
            referenda::constants::ConstantsApi
        }
        pub fn conviction_voting(&self) -> conviction_voting::constants::ConstantsApi {
            conviction_voting::constants::ConstantsApi
        }
        pub fn alliance_motion(&self) -> alliance_motion::constants::ConstantsApi {
            alliance_motion::constants::ConstantsApi
        }
        pub fn alliance(&self) -> alliance::constants::ConstantsApi {
            alliance::constants::ConstantsApi
        }
        pub fn nomination_pools(&self) -> nomination_pools::constants::ConstantsApi {
            nomination_pools::constants::ConstantsApi
        }
        pub fn ranked_polls(&self) -> ranked_polls::constants::ConstantsApi {
            ranked_polls::constants::ConstantsApi
        }
        pub fn asset_conversion(&self) -> asset_conversion::constants::ConstantsApi {
            asset_conversion::constants::ConstantsApi
        }
        pub fn fast_unstake(&self) -> fast_unstake::constants::ConstantsApi {
            fast_unstake::constants::ConstantsApi
        }
        pub fn message_queue(&self) -> message_queue::constants::ConstantsApi {
            message_queue::constants::ConstantsApi
        }
        pub fn statement(&self) -> statement::constants::ConstantsApi {
            statement::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn babe(&self) -> babe::storage::StorageApi {
            babe::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn indices(&self) -> indices::storage::StorageApi {
            indices::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn election_provider_multi_phase(
            &self,
        ) -> election_provider_multi_phase::storage::StorageApi {
            election_provider_multi_phase::storage::StorageApi
        }
        pub fn staking(&self) -> staking::storage::StorageApi {
            staking::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn democracy(&self) -> democracy::storage::StorageApi {
            democracy::storage::StorageApi
        }
        pub fn council(&self) -> council::storage::StorageApi {
            council::storage::StorageApi
        }
        pub fn technical_committee(&self) -> technical_committee::storage::StorageApi {
            technical_committee::storage::StorageApi
        }
        pub fn elections(&self) -> elections::storage::StorageApi {
            elections::storage::StorageApi
        }
        pub fn technical_membership(&self) -> technical_membership::storage::StorageApi {
            technical_membership::storage::StorageApi
        }
        pub fn grandpa(&self) -> grandpa::storage::StorageApi {
            grandpa::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn asset_rate(&self) -> asset_rate::storage::StorageApi {
            asset_rate::storage::StorageApi
        }
        pub fn contracts(&self) -> contracts::storage::StorageApi {
            contracts::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn im_online(&self) -> im_online::storage::StorageApi {
            im_online::storage::StorageApi
        }
        pub fn authority_discovery(&self) -> authority_discovery::storage::StorageApi {
            authority_discovery::storage::StorageApi
        }
        pub fn offences(&self) -> offences::storage::StorageApi {
            offences::storage::StorageApi
        }
        pub fn randomness_collective_flip(
            &self,
        ) -> randomness_collective_flip::storage::StorageApi {
            randomness_collective_flip::storage::StorageApi
        }
        pub fn identity(&self) -> identity::storage::StorageApi {
            identity::storage::StorageApi
        }
        pub fn society(&self) -> society::storage::StorageApi {
            society::storage::StorageApi
        }
        pub fn recovery(&self) -> recovery::storage::StorageApi {
            recovery::storage::StorageApi
        }
        pub fn vesting(&self) -> vesting::storage::StorageApi {
            vesting::storage::StorageApi
        }
        pub fn scheduler(&self) -> scheduler::storage::StorageApi {
            scheduler::storage::StorageApi
        }
        pub fn glutton(&self) -> glutton::storage::StorageApi {
            glutton::storage::StorageApi
        }
        pub fn preimage(&self) -> preimage::storage::StorageApi {
            preimage::storage::StorageApi
        }
        pub fn proxy(&self) -> proxy::storage::StorageApi {
            proxy::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn bounties(&self) -> bounties::storage::StorageApi {
            bounties::storage::StorageApi
        }
        pub fn tips(&self) -> tips::storage::StorageApi {
            tips::storage::StorageApi
        }
        pub fn assets(&self) -> assets::storage::StorageApi {
            assets::storage::StorageApi
        }
        pub fn pool_assets(&self) -> pool_assets::storage::StorageApi {
            pool_assets::storage::StorageApi
        }
        pub fn mmr(&self) -> mmr::storage::StorageApi {
            mmr::storage::StorageApi
        }
        pub fn lottery(&self) -> lottery::storage::StorageApi {
            lottery::storage::StorageApi
        }
        pub fn nis(&self) -> nis::storage::StorageApi {
            nis::storage::StorageApi
        }
        pub fn uniques(&self) -> uniques::storage::StorageApi {
            uniques::storage::StorageApi
        }
        pub fn nfts(&self) -> nfts::storage::StorageApi {
            nfts::storage::StorageApi
        }
        pub fn nft_fractionalization(&self) -> nft_fractionalization::storage::StorageApi {
            nft_fractionalization::storage::StorageApi
        }
        pub fn salary(&self) -> salary::storage::StorageApi {
            salary::storage::StorageApi
        }
        pub fn core_fellowship(&self) -> core_fellowship::storage::StorageApi {
            core_fellowship::storage::StorageApi
        }
        pub fn transaction_storage(&self) -> transaction_storage::storage::StorageApi {
            transaction_storage::storage::StorageApi
        }
        pub fn voter_list(&self) -> voter_list::storage::StorageApi {
            voter_list::storage::StorageApi
        }
        pub fn state_trie_migration(&self) -> state_trie_migration::storage::StorageApi {
            state_trie_migration::storage::StorageApi
        }
        pub fn child_bounties(&self) -> child_bounties::storage::StorageApi {
            child_bounties::storage::StorageApi
        }
        pub fn referenda(&self) -> referenda::storage::StorageApi {
            referenda::storage::StorageApi
        }
        pub fn conviction_voting(&self) -> conviction_voting::storage::StorageApi {
            conviction_voting::storage::StorageApi
        }
        pub fn whitelist(&self) -> whitelist::storage::StorageApi {
            whitelist::storage::StorageApi
        }
        pub fn alliance_motion(&self) -> alliance_motion::storage::StorageApi {
            alliance_motion::storage::StorageApi
        }
        pub fn alliance(&self) -> alliance::storage::StorageApi {
            alliance::storage::StorageApi
        }
        pub fn nomination_pools(&self) -> nomination_pools::storage::StorageApi {
            nomination_pools::storage::StorageApi
        }
        pub fn ranked_polls(&self) -> ranked_polls::storage::StorageApi {
            ranked_polls::storage::StorageApi
        }
        pub fn ranked_collective(&self) -> ranked_collective::storage::StorageApi {
            ranked_collective::storage::StorageApi
        }
        pub fn asset_conversion(&self) -> asset_conversion::storage::StorageApi {
            asset_conversion::storage::StorageApi
        }
        pub fn fast_unstake(&self) -> fast_unstake::storage::StorageApi {
            fast_unstake::storage::StorageApi
        }
        pub fn message_queue(&self) -> message_queue::storage::StorageApi {
            message_queue::storage::StorageApi
        }
        pub fn pov(&self) -> pov::storage::StorageApi {
            pov::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn babe(&self) -> babe::calls::TransactionApi {
            babe::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn indices(&self) -> indices::calls::TransactionApi {
            indices::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn election_provider_multi_phase(
            &self,
        ) -> election_provider_multi_phase::calls::TransactionApi {
            election_provider_multi_phase::calls::TransactionApi
        }
        pub fn staking(&self) -> staking::calls::TransactionApi {
            staking::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn democracy(&self) -> democracy::calls::TransactionApi {
            democracy::calls::TransactionApi
        }
        pub fn council(&self) -> council::calls::TransactionApi {
            council::calls::TransactionApi
        }
        pub fn technical_committee(&self) -> technical_committee::calls::TransactionApi {
            technical_committee::calls::TransactionApi
        }
        pub fn elections(&self) -> elections::calls::TransactionApi {
            elections::calls::TransactionApi
        }
        pub fn technical_membership(&self) -> technical_membership::calls::TransactionApi {
            technical_membership::calls::TransactionApi
        }
        pub fn grandpa(&self) -> grandpa::calls::TransactionApi {
            grandpa::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn asset_rate(&self) -> asset_rate::calls::TransactionApi {
            asset_rate::calls::TransactionApi
        }
        pub fn contracts(&self) -> contracts::calls::TransactionApi {
            contracts::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn im_online(&self) -> im_online::calls::TransactionApi {
            im_online::calls::TransactionApi
        }
        pub fn identity(&self) -> identity::calls::TransactionApi {
            identity::calls::TransactionApi
        }
        pub fn society(&self) -> society::calls::TransactionApi {
            society::calls::TransactionApi
        }
        pub fn recovery(&self) -> recovery::calls::TransactionApi {
            recovery::calls::TransactionApi
        }
        pub fn vesting(&self) -> vesting::calls::TransactionApi {
            vesting::calls::TransactionApi
        }
        pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
            scheduler::calls::TransactionApi
        }
        pub fn glutton(&self) -> glutton::calls::TransactionApi {
            glutton::calls::TransactionApi
        }
        pub fn preimage(&self) -> preimage::calls::TransactionApi {
            preimage::calls::TransactionApi
        }
        pub fn proxy(&self) -> proxy::calls::TransactionApi {
            proxy::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn bounties(&self) -> bounties::calls::TransactionApi {
            bounties::calls::TransactionApi
        }
        pub fn tips(&self) -> tips::calls::TransactionApi {
            tips::calls::TransactionApi
        }
        pub fn assets(&self) -> assets::calls::TransactionApi {
            assets::calls::TransactionApi
        }
        pub fn pool_assets(&self) -> pool_assets::calls::TransactionApi {
            pool_assets::calls::TransactionApi
        }
        pub fn lottery(&self) -> lottery::calls::TransactionApi {
            lottery::calls::TransactionApi
        }
        pub fn nis(&self) -> nis::calls::TransactionApi {
            nis::calls::TransactionApi
        }
        pub fn uniques(&self) -> uniques::calls::TransactionApi {
            uniques::calls::TransactionApi
        }
        pub fn nfts(&self) -> nfts::calls::TransactionApi {
            nfts::calls::TransactionApi
        }
        pub fn nft_fractionalization(&self) -> nft_fractionalization::calls::TransactionApi {
            nft_fractionalization::calls::TransactionApi
        }
        pub fn salary(&self) -> salary::calls::TransactionApi {
            salary::calls::TransactionApi
        }
        pub fn core_fellowship(&self) -> core_fellowship::calls::TransactionApi {
            core_fellowship::calls::TransactionApi
        }
        pub fn transaction_storage(&self) -> transaction_storage::calls::TransactionApi {
            transaction_storage::calls::TransactionApi
        }
        pub fn voter_list(&self) -> voter_list::calls::TransactionApi {
            voter_list::calls::TransactionApi
        }
        pub fn state_trie_migration(&self) -> state_trie_migration::calls::TransactionApi {
            state_trie_migration::calls::TransactionApi
        }
        pub fn child_bounties(&self) -> child_bounties::calls::TransactionApi {
            child_bounties::calls::TransactionApi
        }
        pub fn referenda(&self) -> referenda::calls::TransactionApi {
            referenda::calls::TransactionApi
        }
        pub fn remark(&self) -> remark::calls::TransactionApi {
            remark::calls::TransactionApi
        }
        pub fn root_testing(&self) -> root_testing::calls::TransactionApi {
            root_testing::calls::TransactionApi
        }
        pub fn conviction_voting(&self) -> conviction_voting::calls::TransactionApi {
            conviction_voting::calls::TransactionApi
        }
        pub fn whitelist(&self) -> whitelist::calls::TransactionApi {
            whitelist::calls::TransactionApi
        }
        pub fn alliance_motion(&self) -> alliance_motion::calls::TransactionApi {
            alliance_motion::calls::TransactionApi
        }
        pub fn alliance(&self) -> alliance::calls::TransactionApi {
            alliance::calls::TransactionApi
        }
        pub fn nomination_pools(&self) -> nomination_pools::calls::TransactionApi {
            nomination_pools::calls::TransactionApi
        }
        pub fn ranked_polls(&self) -> ranked_polls::calls::TransactionApi {
            ranked_polls::calls::TransactionApi
        }
        pub fn ranked_collective(&self) -> ranked_collective::calls::TransactionApi {
            ranked_collective::calls::TransactionApi
        }
        pub fn asset_conversion(&self) -> asset_conversion::calls::TransactionApi {
            asset_conversion::calls::TransactionApi
        }
        pub fn fast_unstake(&self) -> fast_unstake::calls::TransactionApi {
            fast_unstake::calls::TransactionApi
        }
        pub fn message_queue(&self) -> message_queue::calls::TransactionApi {
            message_queue::calls::TransactionApi
        }
        pub fn pov(&self) -> pov::calls::TransactionApi {
            pov::calls::TransactionApi
        }
    }
    #[doc = r" check whether the metadata provided is aligned with this statically generated code."]
    pub fn is_codegen_valid_for(metadata: &::subxt::Metadata) -> bool {
        let runtime_metadata_hash = metadata
            .hasher()
            .only_these_pallets(&PALLETS)
            .only_these_runtime_apis(&RUNTIME_APIS)
            .hash();
        runtime_metadata_hash
            == [
                240u8, 250u8, 216u8, 145u8, 84u8, 71u8, 44u8, 57u8, 110u8, 177u8, 192u8, 187u8,
                101u8, 148u8, 84u8, 91u8, 240u8, 80u8, 28u8, 153u8, 126u8, 52u8, 148u8, 53u8, 74u8,
                128u8, 111u8, 164u8, 213u8, 57u8, 92u8, 242u8,
            ]
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the System pallet"]
        pub type Error = runtime_types::frame_system::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::frame_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Remark {
                    pub remark: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Remark {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetHeapPages {
                    pub pages: ::core::primitive::u64,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetHeapPages {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_heap_pages";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCode {
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCodeWithoutChecks {
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCodeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetStorage {
                    pub items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillStorage {
                    pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillPrefix {
                    pub prefix: ::std::vec::Vec<::core::primitive::u8>,
                    pub subkeys: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillPrefix {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_prefix";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemarkWithEvent {
                    pub remark: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemarkWithEvent {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark_with_event";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::remark`]."]
                pub fn remark(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::Remark> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark",
                        types::Remark { remark },
                        [
                            43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
                            216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
                            250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_heap_pages`]."]
                pub fn set_heap_pages(
                    &self,
                    pages: ::core::primitive::u64,
                ) -> ::subxt::tx::Payload<types::SetHeapPages> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_heap_pages",
                        types::SetHeapPages { pages },
                        [
                            188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
                            215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
                            134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
                            57u8, 147u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_code`]."]
                pub fn set_code(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code",
                        types::SetCode { code },
                        [
                            233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
                            203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
                            27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_code_without_checks`]."]
                pub fn set_code_without_checks(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SetCodeWithoutChecks> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code_without_checks",
                        types::SetCodeWithoutChecks { code },
                        [
                            82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
                            157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
                            147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
                            115u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_storage`]."]
                pub fn set_storage(
                    &self,
                    items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                ) -> ::subxt::tx::Payload<types::SetStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_storage",
                        types::SetStorage { items },
                        [
                            184u8, 169u8, 248u8, 68u8, 40u8, 193u8, 190u8, 151u8, 96u8, 159u8,
                            19u8, 237u8, 241u8, 156u8, 5u8, 158u8, 191u8, 237u8, 9u8, 13u8, 86u8,
                            213u8, 77u8, 58u8, 48u8, 139u8, 1u8, 85u8, 220u8, 233u8, 139u8, 164u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill_storage`]."]
                pub fn kill_storage(
                    &self,
                    keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                ) -> ::subxt::tx::Payload<types::KillStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_storage",
                        types::KillStorage { keys },
                        [
                            73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
                            234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
                            156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
                            35u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill_prefix`]."]
                pub fn kill_prefix(
                    &self,
                    prefix: ::std::vec::Vec<::core::primitive::u8>,
                    subkeys: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::KillPrefix> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_prefix",
                        types::KillPrefix { prefix, subkeys },
                        [
                            184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
                            175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
                            67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
                            85u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remark_with_event`]."]
                pub fn remark_with_event(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::RemarkWithEvent> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark_with_event",
                        types::RemarkWithEvent { remark },
                        [
                            120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
                            228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
                            147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: runtime_types::sp_runtime::DispatchError,
                pub dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
            }
            impl ::subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: ::subxt::utils::AccountId32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            234u8, 12u8, 167u8, 96u8, 2u8, 244u8, 235u8, 62u8, 153u8, 200u8, 96u8,
                            74u8, 135u8, 8u8, 35u8, 188u8, 146u8, 249u8, 246u8, 40u8, 224u8, 22u8,
                            15u8, 99u8, 150u8, 222u8, 82u8, 85u8, 123u8, 123u8, 19u8, 110u8,
                        ],
                    )
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        Vec::new(),
                        [
                            234u8, 12u8, 167u8, 96u8, 2u8, 244u8, 235u8, 62u8, 153u8, 200u8, 96u8,
                            74u8, 135u8, 8u8, 35u8, 188u8, 146u8, 249u8, 246u8, 40u8, 224u8, 22u8,
                            15u8, 99u8, 150u8, 222u8, 82u8, 85u8, 123u8, 123u8, 19u8, 110u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
                            153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
                            120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
                            159u8, 79u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            52u8, 191u8, 212u8, 137u8, 26u8, 39u8, 239u8, 35u8, 182u8, 32u8, 39u8,
                            103u8, 56u8, 184u8, 60u8, 159u8, 167u8, 232u8, 193u8, 116u8, 105u8,
                            56u8, 98u8, 127u8, 124u8, 188u8, 214u8, 154u8, 160u8, 41u8, 20u8,
                            162u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
                            243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
                            101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
                            242u8, 65u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        Vec::new(),
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        Vec::new(),
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Number",
                        vec![],
                        [
                            30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
                            9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
                            200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
                            192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
                            71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_runtime::generic::digest::Digest,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Digest",
                        vec![],
                        [
                            70u8, 156u8, 127u8, 89u8, 115u8, 250u8, 103u8, 62u8, 185u8, 153u8,
                            26u8, 72u8, 39u8, 226u8, 181u8, 97u8, 137u8, 225u8, 45u8, 158u8, 212u8,
                            254u8, 142u8, 136u8, 90u8, 22u8, 243u8, 125u8, 226u8, 49u8, 235u8,
                            215u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]
                pub fn events(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::kitchensink_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Events",
                        vec![],
                        [
                            152u8, 105u8, 24u8, 141u8, 128u8, 219u8, 163u8, 210u8, 76u8, 214u8,
                            165u8, 129u8, 227u8, 80u8, 57u8, 134u8, 91u8, 182u8, 98u8, 170u8,
                            117u8, 164u8, 17u8, 124u8, 10u8, 66u8, 107u8, 71u8, 13u8, 20u8, 201u8,
                            248u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
                            151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
                            254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            154u8, 29u8, 31u8, 148u8, 254u8, 7u8, 124u8, 251u8, 241u8, 77u8, 24u8,
                            37u8, 28u8, 75u8, 205u8, 17u8, 159u8, 79u8, 239u8, 62u8, 67u8, 60u8,
                            252u8, 112u8, 215u8, 145u8, 103u8, 170u8, 110u8, 186u8, 221u8, 76u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        Vec::new(),
                        [
                            154u8, 29u8, 31u8, 148u8, 254u8, 7u8, 124u8, 251u8, 241u8, 77u8, 24u8,
                            37u8, 28u8, 75u8, 205u8, 17u8, 159u8, 79u8, 239u8, 62u8, 67u8, 60u8,
                            252u8, 112u8, 215u8, 145u8, 103u8, 170u8, 110u8, 186u8, 221u8, 76u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::LastRuntimeUpgradeInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
                            148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
                            194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
                            130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
                            107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
                            101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
                            167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::frame_system::Phase,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
                            0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
                            35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockWeights",
                        [
                            238u8, 20u8, 221u8, 11u8, 146u8, 236u8, 47u8, 103u8, 8u8, 239u8, 13u8,
                            176u8, 202u8, 10u8, 151u8, 68u8, 110u8, 162u8, 99u8, 40u8, 211u8,
                            136u8, 71u8, 82u8, 50u8, 80u8, 244u8, 211u8, 231u8, 198u8, 36u8, 152u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockLength",
                        [
                            117u8, 144u8, 154u8, 125u8, 106u8, 34u8, 224u8, 228u8, 80u8, 76u8,
                            126u8, 0u8, 177u8, 223u8, 116u8, 244u8, 167u8, 23u8, 253u8, 44u8,
                            128u8, 116u8, 155u8, 245u8, 163u8, 20u8, 21u8, 222u8, 174u8, 237u8,
                            162u8, 240u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "DbWeight",
                        [
                            206u8, 53u8, 134u8, 247u8, 42u8, 38u8, 197u8, 59u8, 191u8, 83u8, 160u8,
                            9u8, 207u8, 133u8, 108u8, 152u8, 150u8, 103u8, 109u8, 228u8, 218u8,
                            24u8, 27u8, 210u8, 106u8, 252u8, 74u8, 93u8, 27u8, 63u8, 109u8, 252u8,
                        ],
                    )
                }
                #[doc = " Get the chain's current version."]
                pub fn version(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "Version",
                        [
                            134u8, 0u8, 23u8, 0u8, 199u8, 213u8, 89u8, 240u8, 194u8, 186u8, 239u8,
                            157u8, 168u8, 211u8, 223u8, 156u8, 138u8, 140u8, 194u8, 23u8, 167u8,
                            158u8, 195u8, 233u8, 25u8, 165u8, 27u8, 237u8, 198u8, 206u8, 233u8,
                            28u8,
                        ],
                    )
                }
                #[doc = " The designated SS58 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_utility::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_utility::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Batch {
                    pub calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsDerivative {
                    pub index: ::core::primitive::u16,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for AsDerivative {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "as_derivative";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BatchAll {
                    pub calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for BatchAll {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchAs {
                    pub as_origin:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::OriginCaller>,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchAs {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "dispatch_as";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceBatch {
                    pub calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceBatch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "force_batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WithWeight {
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for WithWeight {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "with_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::batch`]."]
                pub fn batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<types::Batch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch",
                        types::Batch { calls },
                        [
                            102u8, 157u8, 225u8, 114u8, 244u8, 195u8, 3u8, 217u8, 14u8, 43u8,
                            254u8, 71u8, 219u8, 52u8, 110u8, 128u8, 230u8, 231u8, 55u8, 25u8,
                            108u8, 246u8, 69u8, 110u8, 155u8, 216u8, 184u8, 246u8, 49u8, 203u8,
                            43u8, 95u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::as_derivative`]."]
                pub fn as_derivative(
                    &self,
                    index: ::core::primitive::u16,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::AsDerivative> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "as_derivative",
                        types::AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            39u8, 177u8, 161u8, 165u8, 226u8, 22u8, 164u8, 211u8, 152u8, 63u8,
                            123u8, 244u8, 162u8, 21u8, 230u8, 163u8, 150u8, 143u8, 109u8, 69u8,
                            30u8, 52u8, 193u8, 30u8, 26u8, 119u8, 69u8, 213u8, 194u8, 62u8, 176u8,
                            44u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::batch_all`]."]
                pub fn batch_all(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<types::BatchAll> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch_all",
                        types::BatchAll { calls },
                        [
                            246u8, 93u8, 116u8, 27u8, 82u8, 160u8, 37u8, 165u8, 199u8, 220u8,
                            208u8, 209u8, 127u8, 75u8, 24u8, 37u8, 44u8, 92u8, 26u8, 48u8, 0u8,
                            185u8, 122u8, 225u8, 138u8, 158u8, 228u8, 87u8, 182u8, 63u8, 176u8,
                            249u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::dispatch_as`]."]
                pub fn dispatch_as(
                    &self,
                    as_origin: runtime_types::kitchensink_runtime::OriginCaller,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::DispatchAs> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "dispatch_as",
                        types::DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            181u8, 91u8, 19u8, 220u8, 56u8, 20u8, 10u8, 10u8, 54u8, 97u8, 220u8,
                            240u8, 233u8, 155u8, 129u8, 33u8, 142u8, 144u8, 124u8, 46u8, 194u8,
                            252u8, 197u8, 35u8, 95u8, 168u8, 172u8, 209u8, 2u8, 189u8, 185u8,
                            111u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_batch`]."]
                pub fn force_batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<types::ForceBatch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "force_batch",
                        types::ForceBatch { calls },
                        [
                            14u8, 14u8, 113u8, 125u8, 120u8, 76u8, 132u8, 117u8, 35u8, 176u8,
                            137u8, 149u8, 19u8, 231u8, 113u8, 92u8, 221u8, 193u8, 133u8, 207u8,
                            141u8, 245u8, 76u8, 251u8, 125u8, 204u8, 44u8, 37u8, 133u8, 143u8,
                            122u8, 159u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::with_weight`]."]
                pub fn with_weight(
                    &self,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::WithWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "with_weight",
                        types::WithWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            224u8, 123u8, 194u8, 158u8, 66u8, 222u8, 128u8, 151u8, 236u8, 137u8,
                            55u8, 119u8, 247u8, 77u8, 180u8, 31u8, 154u8, 221u8, 198u8, 246u8,
                            66u8, 233u8, 134u8, 86u8, 236u8, 4u8, 15u8, 102u8, 45u8, 255u8, 210u8,
                            252u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: ::core::primitive::u32,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod babe {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_babe::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_babe::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReportEquivocation {
                    pub equivocation_proof: ::std::boxed::Box<
                        runtime_types::sp_consensus_slots::EquivocationProof<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                                runtime_types::sp_runtime::traits::BlakeTwo256,
                            >,
                            runtime_types::sp_consensus_babe::app::Public,
                        >,
                    >,
                    pub key_owner_proof: runtime_types::sp_session::MembershipProof,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReportEquivocation {
                    const PALLET: &'static str = "Babe";
                    const CALL: &'static str = "report_equivocation";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReportEquivocationUnsigned {
                    pub equivocation_proof: ::std::boxed::Box<
                        runtime_types::sp_consensus_slots::EquivocationProof<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                                runtime_types::sp_runtime::traits::BlakeTwo256,
                            >,
                            runtime_types::sp_consensus_babe::app::Public,
                        >,
                    >,
                    pub key_owner_proof: runtime_types::sp_session::MembershipProof,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReportEquivocationUnsigned {
                    const PALLET: &'static str = "Babe";
                    const CALL: &'static str = "report_equivocation_unsigned";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PlanConfigChange {
                    pub config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                }
                impl ::subxt::blocks::StaticExtrinsic for PlanConfigChange {
                    const PALLET: &'static str = "Babe";
                    const CALL: &'static str = "plan_config_change";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::report_equivocation`]."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<types::ReportEquivocation> {
                    ::subxt::tx::Payload::new_static(
                        "Babe",
                        "report_equivocation",
                        types::ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            112u8, 178u8, 160u8, 11u8, 51u8, 221u8, 60u8, 95u8, 15u8, 167u8, 168u8,
                            70u8, 155u8, 189u8, 58u8, 243u8, 79u8, 173u8, 99u8, 82u8, 251u8, 179u8,
                            132u8, 84u8, 12u8, 32u8, 191u8, 217u8, 116u8, 65u8, 86u8, 123u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::report_equivocation_unsigned`]."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<types::ReportEquivocationUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "Babe",
                        "report_equivocation_unsigned",
                        types::ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            155u8, 41u8, 95u8, 173u8, 63u8, 104u8, 36u8, 189u8, 159u8, 197u8,
                            201u8, 219u8, 89u8, 137u8, 114u8, 123u8, 200u8, 209u8, 69u8, 124u8,
                            253u8, 170u8, 159u8, 144u8, 12u8, 166u8, 159u8, 231u8, 223u8, 243u8,
                            103u8, 121u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::plan_config_change`]."]
                pub fn plan_config_change(
                    &self,
                    config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                ) -> ::subxt::tx::Payload<types::PlanConfigChange> {
                    ::subxt::tx::Payload::new_static(
                        "Babe",
                        "plan_config_change",
                        types::PlanConfigChange { config },
                        [
                            165u8, 26u8, 134u8, 130u8, 137u8, 42u8, 127u8, 161u8, 117u8, 251u8,
                            215u8, 241u8, 69u8, 224u8, 134u8, 1u8, 187u8, 203u8, 168u8, 139u8,
                            121u8, 243u8, 235u8, 223u8, 135u8, 128u8, 227u8, 129u8, 183u8, 51u8,
                            135u8, 79u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current epoch index."]
                pub fn epoch_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "EpochIndex",
                        vec![],
                        [
                            32u8, 82u8, 130u8, 31u8, 190u8, 162u8, 237u8, 189u8, 104u8, 244u8,
                            30u8, 199u8, 179u8, 0u8, 161u8, 107u8, 72u8, 240u8, 201u8, 222u8,
                            177u8, 222u8, 35u8, 156u8, 81u8, 132u8, 162u8, 118u8, 238u8, 84u8,
                            112u8, 89u8,
                        ],
                    )
                }
                #[doc = " Current epoch authorities."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_babe::app::Public,
                        ::core::primitive::u64,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Authorities",
                        vec![],
                        [
                            67u8, 196u8, 244u8, 13u8, 246u8, 245u8, 198u8, 98u8, 81u8, 55u8, 182u8,
                            187u8, 214u8, 5u8, 181u8, 76u8, 251u8, 213u8, 144u8, 166u8, 36u8,
                            153u8, 234u8, 181u8, 252u8, 55u8, 198u8, 175u8, 55u8, 211u8, 105u8,
                            85u8,
                        ],
                    )
                }
                #[doc = " The slot at which the first epoch actually started. This is 0"]
                #[doc = " until the first block of the chain."]
                pub fn genesis_slot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_slots::Slot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "GenesisSlot",
                        vec![],
                        [
                            218u8, 174u8, 152u8, 76u8, 188u8, 214u8, 7u8, 88u8, 253u8, 187u8,
                            139u8, 234u8, 51u8, 28u8, 220u8, 57u8, 73u8, 1u8, 18u8, 205u8, 80u8,
                            160u8, 120u8, 216u8, 139u8, 191u8, 100u8, 108u8, 162u8, 106u8, 175u8,
                            107u8,
                        ],
                    )
                }
                #[doc = " Current slot number."]
                pub fn current_slot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_slots::Slot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "CurrentSlot",
                        vec![],
                        [
                            112u8, 199u8, 115u8, 248u8, 217u8, 242u8, 45u8, 231u8, 178u8, 53u8,
                            236u8, 167u8, 219u8, 238u8, 81u8, 243u8, 39u8, 140u8, 68u8, 19u8,
                            201u8, 169u8, 211u8, 133u8, 135u8, 213u8, 150u8, 105u8, 60u8, 252u8,
                            43u8, 57u8,
                        ],
                    )
                }
                #[doc = " The epoch randomness for the *current* epoch."]
                #[doc = ""]
                #[doc = " # Security"]
                #[doc = ""]
                #[doc = " This MUST NOT be used for gambling, as it can be influenced by a"]
                #[doc = " malicious validator in the short term. It MAY be used in many"]
                #[doc = " cryptographic protocols, however, so long as one remembers that this"]
                #[doc = " (like everything else on-chain) it is public. For example, it can be"]
                #[doc = " used where a number is needed that cannot have been chosen by an"]
                #[doc = " adversary, for purposes such as public-coin zero-knowledge proofs."]
                pub fn randomness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::primitive::u8; 32usize],
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Randomness",
                        vec![],
                        [
                            36u8, 15u8, 52u8, 73u8, 195u8, 177u8, 186u8, 125u8, 134u8, 11u8, 103u8,
                            248u8, 170u8, 237u8, 105u8, 239u8, 168u8, 204u8, 147u8, 52u8, 15u8,
                            226u8, 126u8, 176u8, 133u8, 186u8, 169u8, 241u8, 156u8, 118u8, 67u8,
                            58u8,
                        ],
                    )
                }
                #[doc = " Pending epoch configuration change that will be applied when the next epoch is enacted."]
                pub fn pending_epoch_config_change(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "PendingEpochConfigChange",
                        vec![],
                        [
                            71u8, 143u8, 197u8, 44u8, 242u8, 120u8, 71u8, 244u8, 41u8, 201u8,
                            132u8, 103u8, 96u8, 23u8, 111u8, 232u8, 30u8, 35u8, 154u8, 251u8,
                            183u8, 23u8, 144u8, 80u8, 101u8, 117u8, 43u8, 228u8, 174u8, 221u8,
                            183u8, 165u8,
                        ],
                    )
                }
                #[doc = " Next epoch randomness."]
                pub fn next_randomness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::primitive::u8; 32usize],
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "NextRandomness",
                        vec![],
                        [
                            96u8, 191u8, 139u8, 171u8, 144u8, 92u8, 33u8, 58u8, 23u8, 219u8, 164u8,
                            121u8, 59u8, 209u8, 112u8, 244u8, 50u8, 8u8, 14u8, 244u8, 103u8, 125u8,
                            120u8, 210u8, 16u8, 250u8, 54u8, 192u8, 72u8, 8u8, 219u8, 152u8,
                        ],
                    )
                }
                #[doc = " Next epoch authorities."]
                pub fn next_authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_babe::app::Public,
                        ::core::primitive::u64,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "NextAuthorities",
                        vec![],
                        [
                            116u8, 95u8, 126u8, 199u8, 237u8, 90u8, 202u8, 227u8, 247u8, 56u8,
                            201u8, 113u8, 239u8, 191u8, 151u8, 56u8, 156u8, 133u8, 61u8, 64u8,
                            141u8, 26u8, 8u8, 95u8, 177u8, 255u8, 54u8, 223u8, 132u8, 74u8, 210u8,
                            128u8,
                        ],
                    )
                }
                #[doc = " Randomness under construction."]
                #[doc = ""]
                #[doc = " We make a trade-off between storage accesses and list length."]
                #[doc = " We store the under-construction randomness in segments of up to"]
                #[doc = " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`."]
                #[doc = ""]
                #[doc = " Once a segment reaches this length, we begin the next one."]
                #[doc = " We reset all segments and return to `0` at the beginning of every"]
                #[doc = " epoch."]
                pub fn segment_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "SegmentIndex",
                        vec![],
                        [
                            145u8, 91u8, 142u8, 240u8, 184u8, 94u8, 68u8, 52u8, 130u8, 3u8, 75u8,
                            175u8, 155u8, 130u8, 66u8, 9u8, 150u8, 242u8, 123u8, 111u8, 124u8,
                            241u8, 100u8, 128u8, 220u8, 133u8, 96u8, 227u8, 164u8, 241u8, 170u8,
                            34u8,
                        ],
                    )
                }
                #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
                pub fn under_construction(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        [::core::primitive::u8; 32usize],
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "UnderConstruction",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            120u8, 120u8, 59u8, 247u8, 50u8, 6u8, 220u8, 14u8, 2u8, 76u8, 203u8,
                            244u8, 232u8, 144u8, 253u8, 191u8, 101u8, 35u8, 99u8, 85u8, 111u8,
                            168u8, 31u8, 110u8, 187u8, 124u8, 72u8, 32u8, 43u8, 66u8, 8u8, 215u8,
                        ],
                    )
                }
                #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
                pub fn under_construction_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        [::core::primitive::u8; 32usize],
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "UnderConstruction",
                        Vec::new(),
                        [
                            120u8, 120u8, 59u8, 247u8, 50u8, 6u8, 220u8, 14u8, 2u8, 76u8, 203u8,
                            244u8, 232u8, 144u8, 253u8, 191u8, 101u8, 35u8, 99u8, 85u8, 111u8,
                            168u8, 31u8, 110u8, 187u8, 124u8, 72u8, 32u8, 43u8, 66u8, 8u8, 215u8,
                        ],
                    )
                }
                #[doc = " Temporary value (cleared at block finalization) which is `Some`"]
                #[doc = " if per-block initialization has already been called for current block."]
                pub fn initialized(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<runtime_types::sp_consensus_babe::digests::PreDigest>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Initialized",
                        vec![],
                        [
                            61u8, 100u8, 12u8, 43u8, 50u8, 166u8, 173u8, 130u8, 86u8, 36u8, 92u8,
                            221u8, 44u8, 235u8, 241u8, 150u8, 231u8, 108u8, 15u8, 134u8, 12u8, 6u8,
                            198u8, 102u8, 63u8, 69u8, 201u8, 171u8, 14u8, 135u8, 254u8, 239u8,
                        ],
                    )
                }
                #[doc = " This field should always be populated during block processing unless"]
                #[doc = " secondary plain slots are enabled (which don't contain a VRF output)."]
                #[doc = ""]
                #[doc = " It is set in `on_finalize`, before it will contain the value from the last block."]
                pub fn author_vrf_randomness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "AuthorVrfRandomness",
                        vec![],
                        [
                            160u8, 157u8, 62u8, 48u8, 196u8, 136u8, 63u8, 132u8, 155u8, 183u8,
                            91u8, 201u8, 146u8, 29u8, 192u8, 142u8, 168u8, 152u8, 197u8, 233u8,
                            5u8, 25u8, 0u8, 154u8, 234u8, 180u8, 146u8, 132u8, 106u8, 164u8, 149u8,
                            63u8,
                        ],
                    )
                }
                #[doc = " The block numbers when the last and current epoch have started, respectively `N-1` and"]
                #[doc = " `N`."]
                #[doc = " NOTE: We track this is in order to annotate the block number when a given pool of"]
                #[doc = " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in"]
                #[doc = " slots, which may be skipped, the block numbers may not line up with the slot numbers."]
                pub fn epoch_start(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "EpochStart",
                        vec![],
                        [
                            246u8, 69u8, 165u8, 217u8, 181u8, 138u8, 201u8, 64u8, 251u8, 121u8,
                            50u8, 231u8, 221u8, 144u8, 225u8, 249u8, 42u8, 135u8, 31u8, 136u8,
                            21u8, 160u8, 186u8, 148u8, 139u8, 232u8, 182u8, 121u8, 82u8, 110u8,
                            14u8, 160u8,
                        ],
                    )
                }
                #[doc = " How late the current block is compared to its parent."]
                #[doc = ""]
                #[doc = " This entry is populated as part of block execution and is cleaned up"]
                #[doc = " on block finalization. Querying this storage entry outside of block"]
                #[doc = " execution context should always yield zero."]
                pub fn lateness(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "Lateness",
                        vec![],
                        [
                            229u8, 214u8, 133u8, 149u8, 32u8, 159u8, 26u8, 22u8, 252u8, 131u8,
                            200u8, 191u8, 231u8, 176u8, 178u8, 127u8, 33u8, 212u8, 139u8, 220u8,
                            157u8, 38u8, 4u8, 226u8, 204u8, 32u8, 55u8, 20u8, 205u8, 141u8, 29u8,
                            87u8,
                        ],
                    )
                }
                #[doc = " The configuration for the current epoch. Should never be `None` as it is initialized in"]
                #[doc = " genesis."]
                pub fn epoch_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_babe::BabeEpochConfiguration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "EpochConfig",
                        vec![],
                        [
                            23u8, 188u8, 70u8, 119u8, 36u8, 199u8, 230u8, 191u8, 131u8, 219u8,
                            85u8, 201u8, 237u8, 70u8, 214u8, 149u8, 212u8, 94u8, 87u8, 87u8, 62u8,
                            16u8, 46u8, 143u8, 73u8, 169u8, 42u8, 139u8, 157u8, 139u8, 190u8,
                            166u8,
                        ],
                    )
                }
                #[doc = " The configuration for the next epoch, `None` if the config will not change"]
                #[doc = " (you can fallback to `EpochConfig` instead in that case)."]
                pub fn next_epoch_config(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_consensus_babe::BabeEpochConfiguration,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "NextEpochConfig",
                        vec![],
                        [
                            35u8, 132u8, 198u8, 33u8, 167u8, 69u8, 180u8, 215u8, 207u8, 40u8, 35u8,
                            78u8, 167u8, 22u8, 32u8, 246u8, 111u8, 207u8, 88u8, 13u8, 28u8, 86u8,
                            220u8, 102u8, 35u8, 105u8, 160u8, 163u8, 13u8, 99u8, 142u8, 69u8,
                        ],
                    )
                }
                #[doc = " A list of the last 100 skipped epochs and the corresponding session index"]
                #[doc = " when the epoch was skipped."]
                #[doc = ""]
                #[doc = " This is only used for validating equivocation proofs. An equivocation proof"]
                #[doc = " must contains a key-ownership proof for a given session, therefore we need a"]
                #[doc = " way to tie together sessions and epoch indices, i.e. we need to validate that"]
                #[doc = " a validator was the owner of a given key on a given session, and what the"]
                #[doc = " active epoch index was during that session."]
                pub fn skipped_epochs(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Babe",
                        "SkippedEpochs",
                        vec![],
                        [
                            120u8, 167u8, 144u8, 97u8, 41u8, 216u8, 103u8, 90u8, 3u8, 86u8, 196u8,
                            35u8, 160u8, 150u8, 144u8, 233u8, 128u8, 35u8, 119u8, 66u8, 6u8, 63u8,
                            114u8, 140u8, 182u8, 228u8, 192u8, 30u8, 50u8, 145u8, 217u8, 108u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount of time, in slots, that each epoch should last."]
                #[doc = " NOTE: Currently it is not possible to change the epoch duration after"]
                #[doc = " the chain has started. Attempting to do so will brick block production."]
                pub fn epoch_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Babe",
                        "EpochDuration",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The expected average block time at which BABE should be creating"]
                #[doc = " blocks. Since BABE is probabilistic it is not trivial to figure out"]
                #[doc = " what the expected average block time should be based on the slot"]
                #[doc = " duration and the security parameter `c` (where `1 - c` represents"]
                #[doc = " the probability of a slot being empty)."]
                pub fn expected_block_time(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Babe",
                        "ExpectedBlockTime",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " Max number of authorities allowed"]
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Babe",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_timestamp::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Set {
                    #[codec(compact)]
                    pub now: ::core::primitive::u64,
                }
                impl ::subxt::blocks::StaticExtrinsic for Set {
                    const PALLET: &'static str = "Timestamp";
                    const CALL: &'static str = "set";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set`]."]
                pub fn set(&self, now: ::core::primitive::u64) -> ::subxt::tx::Payload<types::Set> {
                    ::subxt::tx::Payload::new_static(
                        "Timestamp",
                        "set",
                        types::Set { now },
                        [
                            37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
                            199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
                            200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current time for the current block."]
                pub fn now(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
                            92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
                            141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
                        ],
                    )
                }
                #[doc = " Did the timestamp get updated in this block?"]
                pub fn did_update(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
                            205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
                            248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
                            214u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
                #[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
                #[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
                #[doc = " double this period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Author of current block."]
                pub fn author(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Authorship",
                        "Author",
                        vec![],
                        [
                            247u8, 192u8, 118u8, 227u8, 47u8, 20u8, 203u8, 199u8, 216u8, 87u8,
                            220u8, 50u8, 166u8, 61u8, 168u8, 213u8, 253u8, 62u8, 202u8, 199u8,
                            61u8, 192u8, 237u8, 53u8, 22u8, 148u8, 164u8, 245u8, 99u8, 24u8, 146u8,
                            18u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod indices {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_indices::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_indices::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Claim {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Claim {
                    const PALLET: &'static str = "Indices";
                    const CALL: &'static str = "claim";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Indices";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Free {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Free {
                    const PALLET: &'static str = "Indices";
                    const CALL: &'static str = "free";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    pub new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub index: ::core::primitive::u32,
                    pub freeze: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Indices";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Freeze {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Freeze {
                    const PALLET: &'static str = "Indices";
                    const CALL: &'static str = "freeze";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::claim`]."]
                pub fn claim(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Claim> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "claim",
                        types::Claim { index },
                        [
                            146u8, 58u8, 246u8, 135u8, 59u8, 90u8, 3u8, 5u8, 140u8, 169u8, 232u8,
                            195u8, 11u8, 107u8, 36u8, 141u8, 118u8, 174u8, 160u8, 160u8, 19u8,
                            205u8, 177u8, 193u8, 18u8, 102u8, 115u8, 31u8, 72u8, 29u8, 91u8, 235u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer`]."]
                pub fn transfer(
                    &self,
                    new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "transfer",
                        types::Transfer { new, index },
                        [
                            139u8, 89u8, 163u8, 53u8, 141u8, 131u8, 135u8, 107u8, 0u8, 131u8, 53u8,
                            202u8, 117u8, 99u8, 239u8, 205u8, 101u8, 97u8, 251u8, 247u8, 116u8,
                            128u8, 220u8, 186u8, 151u8, 203u8, 82u8, 222u8, 199u8, 137u8, 41u8,
                            199u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::free`]."]
                pub fn free(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Free> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "free",
                        types::Free { index },
                        [
                            241u8, 211u8, 234u8, 102u8, 189u8, 22u8, 209u8, 27u8, 8u8, 229u8, 80u8,
                            227u8, 138u8, 252u8, 222u8, 111u8, 77u8, 201u8, 235u8, 51u8, 163u8,
                            247u8, 13u8, 126u8, 216u8, 136u8, 57u8, 222u8, 56u8, 66u8, 215u8,
                            244u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_transfer`]."]
                pub fn force_transfer(
                    &self,
                    new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    index: ::core::primitive::u32,
                    freeze: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "force_transfer",
                        types::ForceTransfer { new, index, freeze },
                        [
                            160u8, 55u8, 190u8, 50u8, 35u8, 79u8, 28u8, 117u8, 9u8, 2u8, 34u8,
                            99u8, 247u8, 50u8, 77u8, 158u8, 156u8, 101u8, 90u8, 246u8, 129u8,
                            106u8, 23u8, 142u8, 213u8, 88u8, 191u8, 232u8, 99u8, 139u8, 61u8,
                            125u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::freeze`]."]
                pub fn freeze(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Freeze> {
                    ::subxt::tx::Payload::new_static(
                        "Indices",
                        "freeze",
                        types::Freeze { index },
                        [
                            238u8, 215u8, 108u8, 156u8, 84u8, 240u8, 130u8, 229u8, 27u8, 132u8,
                            93u8, 78u8, 2u8, 251u8, 43u8, 203u8, 2u8, 142u8, 147u8, 48u8, 92u8,
                            101u8, 207u8, 24u8, 51u8, 16u8, 36u8, 229u8, 188u8, 129u8, 160u8,
                            117u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_indices::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A account index was assigned."]
            pub struct IndexAssigned {
                pub who: ::subxt::utils::AccountId32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for IndexAssigned {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexAssigned";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A account index has been freed up (unassigned)."]
            pub struct IndexFreed {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for IndexFreed {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFreed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A account index has been frozen to its current account ID."]
            pub struct IndexFrozen {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for IndexFrozen {
                const PALLET: &'static str = "Indices";
                const EVENT: &'static str = "IndexFrozen";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The lookup from index to account."]
                pub fn accounts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::bool,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Indices",
                        "Accounts",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            48u8, 189u8, 43u8, 119u8, 32u8, 168u8, 28u8, 12u8, 245u8, 81u8, 119u8,
                            182u8, 23u8, 201u8, 33u8, 147u8, 128u8, 171u8, 155u8, 134u8, 71u8,
                            87u8, 100u8, 248u8, 107u8, 129u8, 36u8, 197u8, 220u8, 90u8, 11u8,
                            238u8,
                        ],
                    )
                }
                #[doc = " The lookup from index to account."]
                pub fn accounts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::bool,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Indices",
                        "Accounts",
                        Vec::new(),
                        [
                            48u8, 189u8, 43u8, 119u8, 32u8, 168u8, 28u8, 12u8, 245u8, 81u8, 119u8,
                            182u8, 23u8, 201u8, 33u8, 147u8, 128u8, 171u8, 155u8, 134u8, 71u8,
                            87u8, 100u8, 248u8, 107u8, 129u8, 36u8, 197u8, 220u8, 90u8, 11u8,
                            238u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The deposit needed for reserving an index."]
                pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Indices",
                        "Deposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_balances::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_balances::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferAllowDeath {
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAllowDeath {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_allow_death";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetBalanceDeprecated {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub new_free: ::core::primitive::u128,
                    #[codec(compact)]
                    pub old_reserved: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBalanceDeprecated {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "set_balance_deprecated";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    pub source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferKeepAlive {
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferAll {
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub keep_alive: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAll {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceUnreserve {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnreserve {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_unreserve";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpgradeAccounts {
                    pub who: ::std::vec::Vec<::subxt::utils::AccountId32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpgradeAccounts {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "upgrade_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetBalance {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub new_free: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetBalance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_set_balance";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::transfer_allow_death`]."]
                pub fn transfer_allow_death(
                    &self,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferAllowDeath> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_allow_death",
                        types::TransferAllowDeath { dest, value },
                        [
                            100u8, 112u8, 63u8, 118u8, 67u8, 47u8, 63u8, 58u8, 249u8, 180u8, 242u8,
                            65u8, 237u8, 246u8, 118u8, 80u8, 181u8, 220u8, 5u8, 1u8, 144u8, 184u8,
                            214u8, 24u8, 170u8, 165u8, 227u8, 142u8, 9u8, 43u8, 152u8, 101u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_balance_deprecated`]."]
                pub fn set_balance_deprecated(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    new_free: ::core::primitive::u128,
                    old_reserved: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetBalanceDeprecated> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "set_balance_deprecated",
                        types::SetBalanceDeprecated {
                            who,
                            new_free,
                            old_reserved,
                        },
                        [
                            135u8, 204u8, 148u8, 253u8, 76u8, 20u8, 79u8, 5u8, 133u8, 232u8, 10u8,
                            79u8, 199u8, 52u8, 199u8, 42u8, 124u8, 55u8, 82u8, 71u8, 102u8, 81u8,
                            46u8, 101u8, 38u8, 183u8, 219u8, 188u8, 227u8, 255u8, 136u8, 124u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_transfer`]."]
                pub fn force_transfer(
                    &self,
                    source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_transfer",
                        types::ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            192u8, 208u8, 171u8, 116u8, 91u8, 20u8, 177u8, 202u8, 113u8, 195u8,
                            44u8, 49u8, 140u8, 190u8, 168u8, 41u8, 165u8, 202u8, 68u8, 127u8,
                            247u8, 183u8, 126u8, 38u8, 124u8, 41u8, 13u8, 11u8, 69u8, 32u8, 35u8,
                            12u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_keep_alive`]."]
                pub fn transfer_keep_alive(
                    &self,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { dest, value },
                        [
                            186u8, 56u8, 39u8, 71u8, 205u8, 98u8, 251u8, 252u8, 106u8, 6u8, 92u8,
                            217u8, 254u8, 186u8, 113u8, 196u8, 114u8, 248u8, 54u8, 226u8, 53u8,
                            73u8, 6u8, 66u8, 96u8, 54u8, 117u8, 23u8, 34u8, 200u8, 84u8, 227u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_all`]."]
                pub fn transfer_all(
                    &self,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::TransferAll> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_all",
                        types::TransferAll { dest, keep_alive },
                        [
                            39u8, 244u8, 99u8, 182u8, 181u8, 159u8, 95u8, 217u8, 8u8, 210u8, 113u8,
                            254u8, 171u8, 199u8, 93u8, 146u8, 209u8, 229u8, 55u8, 97u8, 131u8,
                            226u8, 155u8, 41u8, 199u8, 145u8, 177u8, 137u8, 198u8, 241u8, 90u8,
                            20u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_unreserve`]."]
                pub fn force_unreserve(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceUnreserve> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_unreserve",
                        types::ForceUnreserve { who, amount },
                        [
                            153u8, 166u8, 64u8, 196u8, 251u8, 238u8, 79u8, 171u8, 169u8, 183u8,
                            68u8, 220u8, 117u8, 237u8, 231u8, 156u8, 6u8, 186u8, 196u8, 238u8,
                            195u8, 16u8, 84u8, 236u8, 40u8, 6u8, 228u8, 211u8, 19u8, 248u8, 171u8,
                            137u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::upgrade_accounts`]."]
                pub fn upgrade_accounts(
                    &self,
                    who: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<types::UpgradeAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "upgrade_accounts",
                        types::UpgradeAccounts { who },
                        [
                            66u8, 200u8, 179u8, 104u8, 65u8, 2u8, 101u8, 56u8, 130u8, 161u8, 224u8,
                            233u8, 255u8, 124u8, 70u8, 122u8, 8u8, 49u8, 103u8, 178u8, 68u8, 47u8,
                            214u8, 166u8, 217u8, 116u8, 178u8, 50u8, 212u8, 164u8, 98u8, 226u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer`]."]
                pub fn transfer(
                    &self,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer",
                        types::Transfer { dest, value },
                        [
                            78u8, 137u8, 180u8, 250u8, 225u8, 152u8, 150u8, 139u8, 30u8, 4u8, 57u8,
                            241u8, 135u8, 108u8, 67u8, 239u8, 65u8, 13u8, 10u8, 205u8, 125u8,
                            208u8, 237u8, 60u8, 18u8, 13u8, 232u8, 47u8, 47u8, 151u8, 79u8, 23u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_set_balance`]."]
                pub fn force_set_balance(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    new_free: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceSetBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_set_balance",
                        types::ForceSetBalance { who, new_free },
                        [
                            171u8, 138u8, 53u8, 85u8, 202u8, 35u8, 151u8, 115u8, 143u8, 67u8, 81u8,
                            25u8, 250u8, 108u8, 179u8, 46u8, 194u8, 23u8, 169u8, 223u8, 6u8, 179u8,
                            240u8, 4u8, 26u8, 9u8, 229u8, 29u8, 248u8, 6u8, 23u8, 232u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: ::subxt::utils::AccountId32,
                pub free_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: ::subxt::utils::AccountId32,
                pub free: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub destination_status:
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was minted into an account."]
            pub struct Minted {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Minted {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Minted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was burned from an account."]
            pub struct Burned {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was suspended from an account (it can be restored later)."]
            pub struct Suspended {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Suspended {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Suspended";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was restored into an account."]
            pub struct Restored {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Restored {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Restored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was upgraded."]
            pub struct Upgraded {
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Upgraded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Upgraded";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
            pub struct Issued {
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
            pub struct Rescinded {
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rescinded {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Rescinded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was locked."]
            pub struct Locked {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Locked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Locked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was unlocked."]
            pub struct Unlocked {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unlocked {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unlocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was frozen."]
            pub struct Frozen {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was thawed."]
            pub struct Thawed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Thawed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total units issued in the system."]
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            116u8, 70u8, 119u8, 194u8, 69u8, 37u8, 116u8, 206u8, 171u8, 70u8,
                            171u8, 210u8, 226u8, 111u8, 184u8, 204u8, 206u8, 11u8, 68u8, 72u8,
                            255u8, 19u8, 194u8, 11u8, 27u8, 194u8, 81u8, 204u8, 59u8, 224u8, 202u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " The total units of outstanding deactivated balance in the system."]
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "InactiveIssuance",
                        vec![],
                        [
                            212u8, 185u8, 19u8, 50u8, 250u8, 72u8, 173u8, 50u8, 4u8, 104u8, 161u8,
                            249u8, 77u8, 247u8, 204u8, 248u8, 11u8, 18u8, 57u8, 4u8, 82u8, 110u8,
                            30u8, 216u8, 16u8, 37u8, 87u8, 67u8, 189u8, 235u8, 214u8, 155u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            47u8, 253u8, 83u8, 165u8, 18u8, 176u8, 62u8, 239u8, 78u8, 85u8, 231u8,
                            235u8, 157u8, 145u8, 251u8, 35u8, 225u8, 171u8, 82u8, 167u8, 68u8,
                            206u8, 28u8, 169u8, 8u8, 93u8, 169u8, 101u8, 180u8, 206u8, 231u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_balances::types::AccountData<::core::primitive::u128>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        Vec::new(),
                        [
                            47u8, 253u8, 83u8, 165u8, 18u8, 176u8, 62u8, 239u8, 78u8, 85u8, 231u8,
                            235u8, 157u8, 145u8, 251u8, 35u8, 225u8, 171u8, 82u8, 167u8, 68u8,
                            206u8, 28u8, 169u8, 8u8, 93u8, 169u8, 101u8, 180u8, 206u8, 231u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::types::BalanceLock<::core::primitive::u128>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            44u8, 44u8, 48u8, 20u8, 121u8, 168u8, 200u8, 87u8, 205u8, 172u8, 111u8,
                            208u8, 62u8, 243u8, 225u8, 223u8, 181u8, 36u8, 197u8, 9u8, 52u8, 182u8,
                            113u8, 55u8, 126u8, 164u8, 82u8, 209u8, 151u8, 126u8, 186u8, 85u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::types::BalanceLock<::core::primitive::u128>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        Vec::new(),
                        [
                            44u8, 44u8, 48u8, 20u8, 121u8, 168u8, 200u8, 87u8, 205u8, 172u8, 111u8,
                            208u8, 62u8, 243u8, 225u8, 223u8, 181u8, 36u8, 197u8, 9u8, 52u8, 182u8,
                            113u8, 55u8, 126u8, 164u8, 82u8, 209u8, 151u8, 126u8, 186u8, 85u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            192u8, 99u8, 91u8, 129u8, 195u8, 73u8, 153u8, 126u8, 82u8, 52u8, 56u8,
                            85u8, 105u8, 178u8, 113u8, 101u8, 229u8, 37u8, 242u8, 174u8, 166u8,
                            244u8, 68u8, 173u8, 14u8, 225u8, 172u8, 70u8, 181u8, 211u8, 165u8,
                            134u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        Vec::new(),
                        [
                            192u8, 99u8, 91u8, 129u8, 195u8, 73u8, 153u8, 126u8, 82u8, 52u8, 56u8,
                            85u8, 105u8, 178u8, 113u8, 101u8, 229u8, 37u8, 242u8, 174u8, 166u8,
                            244u8, 68u8, 173u8, 14u8, 225u8, 172u8, 70u8, 181u8, 211u8, 165u8,
                            134u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            runtime_types::kitchensink_runtime::RuntimeHoldReason,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            101u8, 189u8, 104u8, 111u8, 53u8, 88u8, 169u8, 36u8, 101u8, 136u8,
                            85u8, 143u8, 13u8, 98u8, 134u8, 30u8, 62u8, 217u8, 75u8, 161u8, 225u8,
                            108u8, 204u8, 143u8, 71u8, 38u8, 162u8, 123u8, 182u8, 164u8, 25u8,
                            113u8,
                        ],
                    )
                }
                #[doc = " Holds on account balances."]
                pub fn holds_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            runtime_types::kitchensink_runtime::RuntimeHoldReason,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Holds",
                        Vec::new(),
                        [
                            101u8, 189u8, 104u8, 111u8, 53u8, 88u8, 169u8, 36u8, 101u8, 136u8,
                            85u8, 143u8, 13u8, 98u8, 134u8, 30u8, 62u8, 217u8, 75u8, 161u8, 225u8,
                            108u8, 204u8, 143u8, 71u8, 38u8, 162u8, 123u8, 182u8, 164u8, 25u8,
                            113u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
                            112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
                            163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
                        ],
                    )
                }
                #[doc = " Freeze locks on account balances."]
                pub fn freezes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::types::IdAmount<
                            (),
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Freezes",
                        Vec::new(),
                        [
                            69u8, 49u8, 165u8, 76u8, 135u8, 142u8, 179u8, 118u8, 50u8, 109u8, 53u8,
                            112u8, 110u8, 94u8, 30u8, 93u8, 173u8, 38u8, 27u8, 142u8, 19u8, 5u8,
                            163u8, 4u8, 68u8, 218u8, 179u8, 224u8, 118u8, 218u8, 115u8, 64u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!"]
                #[doc = ""]
                #[doc = " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for"]
                #[doc = " this pallet. However, you do so at your own risk: this will open up a major DoS vector."]
                #[doc = " In case you have multiple sources of provider references, you may also get unexpected"]
                #[doc = " behaviour if you set this to zero."]
                #[doc = ""]
                #[doc = " Bottom line: Do yourself a favour and make it at least one!"]
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of holds that can exist on an account at any time."]
                pub fn max_holds(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxHolds",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of individual freeze locks that can exist on an account at any time."]
                pub fn max_freezes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxFreezes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: ::subxt::utils::AccountId32,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
                            147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
                            159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
                            197u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_transaction_payment::Releases,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
                            178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
                            251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
                            144u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_tx_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_asset_tx_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who` in an asset `asset_id`."]
            pub struct AssetTxFeePaid {
                pub who: ::subxt::utils::AccountId32,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
                pub asset_id: ::core::option::Option<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for AssetTxFeePaid {
                const PALLET: &'static str = "AssetTxPayment";
                const EVENT: &'static str = "AssetTxFeePaid";
            }
        }
    }
    pub mod asset_conversion_tx_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_asset_conversion_tx_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who` in an asset `asset_id`."]
            pub struct AssetTxFeePaid {
                pub who: ::subxt::utils::AccountId32,
                pub actual_fee: ::core::primitive::u128,
                pub tip: ::core::primitive::u128,
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetTxFeePaid {
                const PALLET: &'static str = "AssetConversionTxPayment";
                const EVENT: &'static str = "AssetTxFeePaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A swap of the refund in native currency back to asset failed."]
            pub struct AssetRefundFailed {
                pub native_amount_kept: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetRefundFailed {
                const PALLET: &'static str = "AssetConversionTxPayment";
                const EVENT: &'static str = "AssetRefundFailed";
            }
        }
    }
    pub mod election_provider_multi_phase {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error of the pallet that can be returned in response to dispatches."]
        pub type Error = runtime_types::pallet_election_provider_multi_phase::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_election_provider_multi_phase::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SubmitUnsigned {
                    pub raw_solution: ::std::boxed::Box<
                        runtime_types::pallet_election_provider_multi_phase::RawSolution<
                            runtime_types::kitchensink_runtime::NposSolution16,
                        >,
                    >,
                    pub witness:
                        runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
                }
                impl ::subxt::blocks::StaticExtrinsic for SubmitUnsigned {
                    const PALLET: &'static str = "ElectionProviderMultiPhase";
                    const CALL: &'static str = "submit_unsigned";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMinimumUntrustedScore {
                    pub maybe_next_score:
                        ::core::option::Option<runtime_types::sp_npos_elections::ElectionScore>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMinimumUntrustedScore {
                    const PALLET: &'static str = "ElectionProviderMultiPhase";
                    const CALL: &'static str = "set_minimum_untrusted_score";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetEmergencyElectionResult {
                    pub supports: ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::sp_npos_elections::Support<::subxt::utils::AccountId32>,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetEmergencyElectionResult {
                    const PALLET: &'static str = "ElectionProviderMultiPhase";
                    const CALL: &'static str = "set_emergency_election_result";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Submit {
                    pub raw_solution: ::std::boxed::Box<
                        runtime_types::pallet_election_provider_multi_phase::RawSolution<
                            runtime_types::kitchensink_runtime::NposSolution16,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Submit {
                    const PALLET: &'static str = "ElectionProviderMultiPhase";
                    const CALL: &'static str = "submit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GovernanceFallback {
                    pub maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
                    pub maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for GovernanceFallback {
                    const PALLET: &'static str = "ElectionProviderMultiPhase";
                    const CALL: &'static str = "governance_fallback";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::submit_unsigned`]."]
                pub fn submit_unsigned(
                    &self,
                    raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
                        runtime_types::kitchensink_runtime::NposSolution16,
                    >,
                    witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize,
                ) -> ::subxt::tx::Payload<types::SubmitUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "ElectionProviderMultiPhase",
                        "submit_unsigned",
                        types::SubmitUnsigned {
                            raw_solution: ::std::boxed::Box::new(raw_solution),
                            witness,
                        },
                        [
                            34u8, 115u8, 43u8, 180u8, 202u8, 212u8, 42u8, 17u8, 187u8, 233u8, 54u8,
                            206u8, 238u8, 239u8, 35u8, 240u8, 136u8, 197u8, 117u8, 113u8, 213u8,
                            46u8, 94u8, 47u8, 84u8, 186u8, 177u8, 61u8, 3u8, 202u8, 2u8, 186u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_minimum_untrusted_score`]."]
                pub fn set_minimum_untrusted_score(
                    &self,
                    maybe_next_score: ::core::option::Option<
                        runtime_types::sp_npos_elections::ElectionScore,
                    >,
                ) -> ::subxt::tx::Payload<types::SetMinimumUntrustedScore> {
                    ::subxt::tx::Payload::new_static(
                        "ElectionProviderMultiPhase",
                        "set_minimum_untrusted_score",
                        types::SetMinimumUntrustedScore { maybe_next_score },
                        [
                            36u8, 32u8, 197u8, 96u8, 189u8, 98u8, 96u8, 138u8, 84u8, 99u8, 235u8,
                            44u8, 103u8, 25u8, 118u8, 194u8, 166u8, 158u8, 212u8, 36u8, 243u8,
                            86u8, 202u8, 231u8, 189u8, 226u8, 21u8, 112u8, 20u8, 163u8, 229u8,
                            240u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_emergency_election_result`]."]
                pub fn set_emergency_election_result(
                    &self,
                    supports: ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::sp_npos_elections::Support<::subxt::utils::AccountId32>,
                    )>,
                ) -> ::subxt::tx::Payload<types::SetEmergencyElectionResult> {
                    ::subxt::tx::Payload::new_static(
                        "ElectionProviderMultiPhase",
                        "set_emergency_election_result",
                        types::SetEmergencyElectionResult { supports },
                        [
                            158u8, 35u8, 6u8, 145u8, 37u8, 239u8, 101u8, 90u8, 121u8, 123u8, 240u8,
                            131u8, 154u8, 13u8, 111u8, 120u8, 146u8, 151u8, 203u8, 125u8, 115u8,
                            255u8, 58u8, 154u8, 177u8, 204u8, 140u8, 87u8, 9u8, 63u8, 146u8, 209u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::submit`]."]
                pub fn submit(
                    &self,
                    raw_solution: runtime_types::pallet_election_provider_multi_phase::RawSolution<
                        runtime_types::kitchensink_runtime::NposSolution16,
                    >,
                ) -> ::subxt::tx::Payload<types::Submit> {
                    ::subxt::tx::Payload::new_static(
                        "ElectionProviderMultiPhase",
                        "submit",
                        types::Submit {
                            raw_solution: ::std::boxed::Box::new(raw_solution),
                        },
                        [
                            55u8, 153u8, 215u8, 21u8, 19u8, 192u8, 199u8, 19u8, 145u8, 27u8, 54u8,
                            128u8, 23u8, 3u8, 255u8, 87u8, 27u8, 75u8, 248u8, 145u8, 238u8, 75u8,
                            204u8, 173u8, 71u8, 252u8, 29u8, 71u8, 45u8, 143u8, 179u8, 154u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::governance_fallback`]."]
                pub fn governance_fallback(
                    &self,
                    maybe_max_voters: ::core::option::Option<::core::primitive::u32>,
                    maybe_max_targets: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::GovernanceFallback> {
                    ::subxt::tx::Payload::new_static(
                        "ElectionProviderMultiPhase",
                        "governance_fallback",
                        types::GovernanceFallback {
                            maybe_max_voters,
                            maybe_max_targets,
                        },
                        [
                            168u8, 109u8, 243u8, 125u8, 188u8, 177u8, 251u8, 179u8, 158u8, 246u8,
                            179u8, 247u8, 87u8, 217u8, 190u8, 107u8, 207u8, 249u8, 204u8, 27u8,
                            166u8, 49u8, 135u8, 71u8, 88u8, 142u8, 58u8, 206u8, 137u8, 142u8, 75u8,
                            127u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_election_provider_multi_phase::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A solution was stored with the given compute."]
            #[doc = ""]
            #[doc = "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,"]
            #[doc = "the stored solution was submited in the signed phase by a miner with the `AccountId`."]
            #[doc = "Otherwise, the solution was stored either during the unsigned phase or by"]
            #[doc = "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make"]
            #[doc = "room for this one."]
            pub struct SolutionStored {
                pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
                pub origin: ::core::option::Option<::subxt::utils::AccountId32>,
                pub prev_ejected: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for SolutionStored {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "SolutionStored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The election has been finalized, with the given computation and score."]
            pub struct ElectionFinalized {
                pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
                pub score: runtime_types::sp_npos_elections::ElectionScore,
            }
            impl ::subxt::events::StaticEvent for ElectionFinalized {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "ElectionFinalized";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An election failed."]
            #[doc = ""]
            #[doc = "Not much can be said about which computes failed in the process."]
            pub struct ElectionFailed;
            impl ::subxt::events::StaticEvent for ElectionFailed {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "ElectionFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has been rewarded for their signed submission being finalized."]
            pub struct Rewarded {
                pub account: ::subxt::utils::AccountId32,
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "Rewarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has been slashed for submitting an invalid signed submission."]
            pub struct Slashed {
                pub account: ::subxt::utils::AccountId32,
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "There was a phase transition in a given round."]
            pub struct PhaseTransitioned {
                pub from: runtime_types::pallet_election_provider_multi_phase::Phase<
                    ::core::primitive::u32,
                >,
                pub to: runtime_types::pallet_election_provider_multi_phase::Phase<
                    ::core::primitive::u32,
                >,
                pub round: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for PhaseTransitioned {
                const PALLET: &'static str = "ElectionProviderMultiPhase";
                const EVENT: &'static str = "PhaseTransitioned";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Internal counter for the number of rounds."]
                #[doc = ""]
                #[doc = " This is useful for de-duplication of transactions submitted to the pool, and general"]
                #[doc = " diagnostics of the pallet."]
                #[doc = ""]
                #[doc = " This is merely incremented once per every time that an upstream `elect` is called."]
                pub fn round(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "Round",
                        vec![],
                        [
                            37u8, 2u8, 47u8, 240u8, 18u8, 213u8, 214u8, 74u8, 57u8, 4u8, 103u8,
                            253u8, 45u8, 17u8, 123u8, 203u8, 173u8, 170u8, 234u8, 109u8, 139u8,
                            143u8, 216u8, 3u8, 161u8, 5u8, 0u8, 106u8, 181u8, 214u8, 170u8, 105u8,
                        ],
                    )
                }
                #[doc = " Current phase."]
                pub fn current_phase(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_election_provider_multi_phase::Phase<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "CurrentPhase",
                        vec![],
                        [
                            230u8, 7u8, 51u8, 158u8, 77u8, 36u8, 148u8, 175u8, 138u8, 205u8, 195u8,
                            236u8, 66u8, 148u8, 0u8, 77u8, 160u8, 249u8, 128u8, 58u8, 189u8, 48u8,
                            195u8, 198u8, 115u8, 251u8, 13u8, 206u8, 163u8, 180u8, 108u8, 10u8,
                        ],
                    )
                }
                #[doc = " Current best solution, signed or unsigned, queued to be returned upon `elect`."]
                #[doc = ""]
                #[doc = " Always sorted by score."]
                pub fn queued_solution(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_election_provider_multi_phase::ReadySolution,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "QueuedSolution",
                        vec![],
                        [
                            64u8, 237u8, 221u8, 29u8, 144u8, 141u8, 147u8, 4u8, 46u8, 239u8, 34u8,
                            242u8, 164u8, 69u8, 108u8, 145u8, 95u8, 167u8, 34u8, 211u8, 103u8,
                            165u8, 183u8, 193u8, 245u8, 226u8, 140u8, 50u8, 176u8, 127u8, 108u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " Snapshot data of the round."]
                #[doc = ""]
                #[doc = " This is created at the beginning of the signed phase and cleared upon calling `elect`."]
                pub fn snapshot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_election_provider_multi_phase::RoundSnapshot<
                        ::subxt::utils::AccountId32,
                        (
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u64,
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::subxt::utils::AccountId32,
                            >,
                        ),
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "Snapshot",
                        vec![],
                        [
                            180u8, 77u8, 217u8, 249u8, 212u8, 99u8, 36u8, 26u8, 237u8, 4u8, 94u8,
                            80u8, 160u8, 6u8, 194u8, 98u8, 174u8, 153u8, 127u8, 124u8, 109u8,
                            188u8, 143u8, 151u8, 51u8, 200u8, 133u8, 66u8, 68u8, 226u8, 124u8,
                            158u8,
                        ],
                    )
                }
                #[doc = " Desired number of targets to elect for this round."]
                #[doc = ""]
                #[doc = " Only exists when [`Snapshot`] is present."]
                pub fn desired_targets(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "DesiredTargets",
                        vec![],
                        [
                            67u8, 241u8, 33u8, 113u8, 62u8, 173u8, 233u8, 76u8, 99u8, 12u8, 61u8,
                            237u8, 21u8, 252u8, 39u8, 37u8, 86u8, 167u8, 173u8, 53u8, 238u8, 172u8,
                            97u8, 59u8, 27u8, 164u8, 163u8, 76u8, 140u8, 37u8, 159u8, 250u8,
                        ],
                    )
                }
                #[doc = " The metadata of the [`RoundSnapshot`]"]
                #[doc = ""]
                #[doc = " Only exists when [`Snapshot`] is present."]
                pub fn snapshot_metadata(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_election_provider_multi_phase::SolutionOrSnapshotSize,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SnapshotMetadata",
                        vec![],
                        [
                            14u8, 189u8, 135u8, 84u8, 238u8, 133u8, 76u8, 176u8, 181u8, 185u8,
                            111u8, 102u8, 181u8, 14u8, 172u8, 86u8, 188u8, 139u8, 73u8, 192u8,
                            203u8, 117u8, 39u8, 119u8, 108u8, 225u8, 163u8, 36u8, 91u8, 30u8, 0u8,
                            196u8,
                        ],
                    )
                }
                #[doc = " The next index to be assigned to an incoming signed submission."]
                #[doc = ""]
                #[doc = " Every accepted submission is assigned a unique index; that index is bound to that particular"]
                #[doc = " submission for the duration of the election. On election finalization, the next index is"]
                #[doc = " reset to 0."]
                #[doc = ""]
                #[doc = " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its"]
                #[doc = " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,"]
                #[doc = " because iteration is slow. Instead, we store the value here."]
                pub fn signed_submission_next_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedSubmissionNextIndex",
                        vec![],
                        [
                            188u8, 126u8, 77u8, 166u8, 42u8, 81u8, 12u8, 239u8, 195u8, 16u8, 132u8,
                            178u8, 217u8, 158u8, 28u8, 19u8, 201u8, 148u8, 47u8, 105u8, 178u8,
                            115u8, 17u8, 78u8, 71u8, 178u8, 205u8, 171u8, 71u8, 52u8, 194u8, 82u8,
                        ],
                    )
                }
                #[doc = " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a"]
                #[doc = " value in `SignedSubmissions`."]
                #[doc = ""]
                #[doc = " We never need to process more than a single signed submission at a time. Signed submissions"]
                #[doc = " can be quite large, so we're willing to pay the cost of multiple database accesses to access"]
                #[doc = " them one at a time instead of reading and decoding all of them at once."]
                pub fn signed_submission_indices(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::sp_npos_elections::ElectionScore,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedSubmissionIndices",
                        vec![],
                        [
                            203u8, 96u8, 121u8, 1u8, 24u8, 150u8, 185u8, 93u8, 129u8, 63u8, 52u8,
                            163u8, 67u8, 45u8, 100u8, 11u8, 254u8, 224u8, 18u8, 1u8, 133u8, 246u8,
                            125u8, 211u8, 93u8, 99u8, 194u8, 105u8, 176u8, 162u8, 238u8, 181u8,
                        ],
                    )
                }
                #[doc = " Unchecked, signed solutions."]
                #[doc = ""]
                #[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
                #[doc = " allowing us to keep only a single one in memory at a time."]
                #[doc = ""]
                #[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
                #[doc = " affect; we shouldn't need a cryptographically secure hasher."]
                pub fn signed_submissions_map(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_election_provider_multi_phase::signed::SignedSubmission<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        runtime_types::kitchensink_runtime::NposSolution16,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedSubmissionsMap",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            79u8, 183u8, 109u8, 221u8, 2u8, 64u8, 197u8, 162u8, 221u8, 170u8,
                            140u8, 136u8, 205u8, 111u8, 8u8, 179u8, 166u8, 104u8, 74u8, 219u8,
                            202u8, 123u8, 31u8, 129u8, 207u8, 58u8, 241u8, 91u8, 147u8, 112u8,
                            162u8, 105u8,
                        ],
                    )
                }
                #[doc = " Unchecked, signed solutions."]
                #[doc = ""]
                #[doc = " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while"]
                #[doc = " allowing us to keep only a single one in memory at a time."]
                #[doc = ""]
                #[doc = " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or"]
                #[doc = " affect; we shouldn't need a cryptographically secure hasher."]
                pub fn signed_submissions_map_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_election_provider_multi_phase::signed::SignedSubmission<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        runtime_types::kitchensink_runtime::NposSolution16,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedSubmissionsMap",
                        Vec::new(),
                        [
                            79u8, 183u8, 109u8, 221u8, 2u8, 64u8, 197u8, 162u8, 221u8, 170u8,
                            140u8, 136u8, 205u8, 111u8, 8u8, 179u8, 166u8, 104u8, 74u8, 219u8,
                            202u8, 123u8, 31u8, 129u8, 207u8, 58u8, 241u8, 91u8, 147u8, 112u8,
                            162u8, 105u8,
                        ],
                    )
                }
                #[doc = " The minimum score that each 'untrusted' solution must attain in order to be considered"]
                #[doc = " feasible."]
                #[doc = ""]
                #[doc = " Can be set via `set_minimum_untrusted_score`."]
                pub fn minimum_untrusted_score(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_npos_elections::ElectionScore,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MinimumUntrustedScore",
                        vec![],
                        [
                            105u8, 218u8, 96u8, 38u8, 82u8, 115u8, 30u8, 178u8, 21u8, 89u8, 59u8,
                            7u8, 203u8, 240u8, 224u8, 209u8, 78u8, 28u8, 198u8, 236u8, 252u8,
                            122u8, 72u8, 59u8, 156u8, 242u8, 26u8, 160u8, 145u8, 40u8, 6u8, 101u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Duration of the unsigned phase."]
                pub fn unsigned_phase(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "UnsignedPhase",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Duration of the signed phase."]
                pub fn signed_phase(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedPhase",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
                #[doc = " \"better\" in the Signed phase."]
                pub fn better_signed_threshold(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Perbill>
                {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "BetterSignedThreshold",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of improvement to the solution score that defines a solution as"]
                #[doc = " \"better\" in the Unsigned phase."]
                pub fn better_unsigned_threshold(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Perbill>
                {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "BetterUnsignedThreshold",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The repeat threshold of the offchain worker."]
                #[doc = ""]
                #[doc = " For example, if it is 5, that means that at least 5 blocks will elapse between attempts"]
                #[doc = " to submit the worker's solution."]
                pub fn offchain_repeat(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "OffchainRepeat",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The priority of the unsigned transaction submitted in the unsigned-phase"]
                pub fn miner_tx_priority(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MinerTxPriority",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " Maximum number of signed submissions that can be queued."]
                #[doc = ""]
                #[doc = " It is best to avoid adjusting this during an election, as it impacts downstream data"]
                #[doc = " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you"]
                #[doc = " update this value during an election, you _must_ ensure that"]
                #[doc = " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,"]
                #[doc = " attempts to submit new solutions may cause a runtime panic."]
                pub fn signed_max_submissions(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedMaxSubmissions",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum weight of a signed solution."]
                #[doc = ""]
                #[doc = " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of"]
                #[doc = " this pallet), then [`MinerConfig::solution_weight`] is used to compare against"]
                #[doc = " this value."]
                pub fn signed_max_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedMaxWeight",
                        [
                            222u8, 183u8, 203u8, 169u8, 31u8, 134u8, 28u8, 12u8, 47u8, 140u8, 71u8,
                            74u8, 61u8, 55u8, 71u8, 236u8, 215u8, 83u8, 28u8, 70u8, 45u8, 128u8,
                            184u8, 57u8, 101u8, 83u8, 42u8, 165u8, 34u8, 155u8, 64u8, 145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of unchecked solutions to refund the call fee for."]
                pub fn signed_max_refunds(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedMaxRefunds",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Base reward for a signed solution"]
                pub fn signed_reward_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedRewardBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Base deposit for a signed solution."]
                pub fn signed_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Per-byte deposit for a signed solution."]
                pub fn signed_deposit_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedDepositByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Per-weight deposit for a signed solution."]
                pub fn signed_deposit_weight(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "SignedDepositWeight",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of electing voters to put in the snapshot. At the moment, snapshots"]
                #[doc = " are only over a single block, but once multi-block elections are introduced they will"]
                #[doc = " take place over multiple blocks."]
                pub fn max_electing_voters(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MaxElectingVoters",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of electable targets to put in the snapshot."]
                pub fn max_electable_targets(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MaxElectableTargets",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                #[doc = " The maximum number of winners that can be elected by this `ElectionProvider`"]
                #[doc = " implementation."]
                #[doc = ""]
                #[doc = " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."]
                pub fn max_winners(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MaxWinners",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn miner_max_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MinerMaxLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn miner_max_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MinerMaxWeight",
                        [
                            222u8, 183u8, 203u8, 169u8, 31u8, 134u8, 28u8, 12u8, 47u8, 140u8, 71u8,
                            74u8, 61u8, 55u8, 71u8, 236u8, 215u8, 83u8, 28u8, 70u8, 45u8, 128u8,
                            184u8, 57u8, 101u8, 83u8, 42u8, 165u8, 34u8, 155u8, 64u8, 145u8,
                        ],
                    )
                }
                pub fn miner_max_votes_per_voter(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MinerMaxVotesPerVoter",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn miner_max_winners(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ElectionProviderMultiPhase",
                        "MinerMaxWinners",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod staking {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_staking::pallet::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_staking::pallet::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bond {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub payee: runtime_types::pallet_staking::RewardDestination<
                        ::subxt::utils::AccountId32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Bond {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "bond";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BondExtra {
                    #[codec(compact)]
                    pub max_additional: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for BondExtra {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "bond_extra";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unbond {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Unbond {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "unbond";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WithdrawUnbonded {
                    pub num_slashing_spans: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for WithdrawUnbonded {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "withdraw_unbonded";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Validate {
                    pub prefs: runtime_types::pallet_staking::ValidatorPrefs,
                }
                impl ::subxt::blocks::StaticExtrinsic for Validate {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "validate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Nominate {
                    pub targets: ::std::vec::Vec<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Nominate {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "nominate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Chill;
                impl ::subxt::blocks::StaticExtrinsic for Chill {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "chill";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetPayee {
                    pub payee: runtime_types::pallet_staking::RewardDestination<
                        ::subxt::utils::AccountId32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetPayee {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "set_payee";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetController;
                impl ::subxt::blocks::StaticExtrinsic for SetController {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "set_controller";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetValidatorCount {
                    #[codec(compact)]
                    pub new: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetValidatorCount {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "set_validator_count";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IncreaseValidatorCount {
                    #[codec(compact)]
                    pub additional: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for IncreaseValidatorCount {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "increase_validator_count";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScaleValidatorCount {
                    pub factor: runtime_types::sp_arithmetic::per_things::Percent,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScaleValidatorCount {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "scale_validator_count";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceNoEras;
                impl ::subxt::blocks::StaticExtrinsic for ForceNoEras {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "force_no_eras";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceNewEra;
                impl ::subxt::blocks::StaticExtrinsic for ForceNewEra {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "force_new_era";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetInvulnerables {
                    pub invulnerables: ::std::vec::Vec<::subxt::utils::AccountId32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetInvulnerables {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "set_invulnerables";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceUnstake {
                    pub stash: ::subxt::utils::AccountId32,
                    pub num_slashing_spans: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnstake {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "force_unstake";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceNewEraAlways;
                impl ::subxt::blocks::StaticExtrinsic for ForceNewEraAlways {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "force_new_era_always";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelDeferredSlash {
                    pub era: ::core::primitive::u32,
                    pub slash_indices: ::std::vec::Vec<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelDeferredSlash {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "cancel_deferred_slash";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PayoutStakers {
                    pub validator_stash: ::subxt::utils::AccountId32,
                    pub era: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for PayoutStakers {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "payout_stakers";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Rebond {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Rebond {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "rebond";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReapStash {
                    pub stash: ::subxt::utils::AccountId32,
                    pub num_slashing_spans: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReapStash {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "reap_stash";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Kick {
                    pub who: ::std::vec::Vec<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Kick {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "kick";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetStakingConfigs {
                    pub min_nominator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u128,
                    >,
                    pub min_validator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u128,
                    >,
                    pub max_nominator_count:
                        runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                            ::core::primitive::u32,
                        >,
                    pub max_validator_count:
                        runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                            ::core::primitive::u32,
                        >,
                    pub chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Percent,
                    >,
                    pub min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStakingConfigs {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "set_staking_configs";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ChillOther {
                    pub controller: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ChillOther {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "chill_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceApplyMinCommission {
                    pub validator_stash: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceApplyMinCommission {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "force_apply_min_commission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMinCommission {
                    pub new: runtime_types::sp_arithmetic::per_things::Perbill,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMinCommission {
                    const PALLET: &'static str = "Staking";
                    const CALL: &'static str = "set_min_commission";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::bond`]."]
                pub fn bond(
                    &self,
                    value: ::core::primitive::u128,
                    payee: runtime_types::pallet_staking::RewardDestination<
                        ::subxt::utils::AccountId32,
                    >,
                ) -> ::subxt::tx::Payload<types::Bond> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "bond",
                        types::Bond { value, payee },
                        [
                            45u8, 207u8, 34u8, 221u8, 252u8, 224u8, 162u8, 185u8, 67u8, 224u8,
                            88u8, 91u8, 232u8, 114u8, 183u8, 44u8, 39u8, 5u8, 12u8, 163u8, 57u8,
                            31u8, 251u8, 58u8, 37u8, 232u8, 206u8, 75u8, 164u8, 26u8, 170u8, 101u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::bond_extra`]."]
                pub fn bond_extra(
                    &self,
                    max_additional: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::BondExtra> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "bond_extra",
                        types::BondExtra { max_additional },
                        [
                            9u8, 143u8, 179u8, 99u8, 91u8, 254u8, 114u8, 189u8, 202u8, 245u8, 48u8,
                            130u8, 103u8, 17u8, 183u8, 177u8, 172u8, 156u8, 227u8, 145u8, 191u8,
                            134u8, 81u8, 3u8, 170u8, 85u8, 40u8, 56u8, 216u8, 95u8, 232u8, 52u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unbond`]."]
                pub fn unbond(
                    &self,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Unbond> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "unbond",
                        types::Unbond { value },
                        [
                            70u8, 201u8, 146u8, 56u8, 51u8, 237u8, 90u8, 193u8, 69u8, 42u8, 168u8,
                            96u8, 215u8, 128u8, 253u8, 22u8, 239u8, 14u8, 214u8, 103u8, 170u8,
                            140u8, 2u8, 182u8, 3u8, 190u8, 184u8, 191u8, 231u8, 137u8, 50u8, 16u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::withdraw_unbonded`]."]
                pub fn withdraw_unbonded(
                    &self,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::WithdrawUnbonded> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "withdraw_unbonded",
                        types::WithdrawUnbonded { num_slashing_spans },
                        [
                            229u8, 128u8, 177u8, 224u8, 197u8, 118u8, 239u8, 142u8, 179u8, 164u8,
                            10u8, 205u8, 124u8, 254u8, 209u8, 157u8, 172u8, 87u8, 58u8, 120u8,
                            74u8, 12u8, 150u8, 117u8, 234u8, 32u8, 191u8, 182u8, 92u8, 97u8, 77u8,
                            59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::validate`]."]
                pub fn validate(
                    &self,
                    prefs: runtime_types::pallet_staking::ValidatorPrefs,
                ) -> ::subxt::tx::Payload<types::Validate> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "validate",
                        types::Validate { prefs },
                        [
                            63u8, 83u8, 12u8, 16u8, 56u8, 84u8, 41u8, 141u8, 202u8, 0u8, 37u8,
                            30u8, 115u8, 2u8, 145u8, 101u8, 168u8, 89u8, 94u8, 98u8, 8u8, 45u8,
                            140u8, 237u8, 101u8, 136u8, 179u8, 162u8, 205u8, 41u8, 88u8, 248u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::nominate`]."]
                pub fn nominate(
                    &self,
                    targets: ::std::vec::Vec<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::Nominate> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "nominate",
                        types::Nominate { targets },
                        [
                            15u8, 90u8, 71u8, 240u8, 160u8, 193u8, 136u8, 125u8, 36u8, 150u8,
                            105u8, 92u8, 188u8, 102u8, 160u8, 56u8, 164u8, 250u8, 75u8, 106u8,
                            10u8, 123u8, 18u8, 50u8, 59u8, 128u8, 35u8, 199u8, 103u8, 109u8, 45u8,
                            223u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::chill`]."]
                pub fn chill(&self) -> ::subxt::tx::Payload<types::Chill> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "chill",
                        types::Chill {},
                        [
                            157u8, 75u8, 243u8, 69u8, 110u8, 192u8, 22u8, 27u8, 107u8, 68u8, 236u8,
                            58u8, 179u8, 34u8, 118u8, 98u8, 131u8, 62u8, 242u8, 84u8, 149u8, 24u8,
                            83u8, 223u8, 78u8, 12u8, 192u8, 22u8, 111u8, 11u8, 171u8, 149u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_payee`]."]
                pub fn set_payee(
                    &self,
                    payee: runtime_types::pallet_staking::RewardDestination<
                        ::subxt::utils::AccountId32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetPayee> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "set_payee",
                        types::SetPayee { payee },
                        [
                            86u8, 172u8, 187u8, 98u8, 106u8, 240u8, 184u8, 60u8, 163u8, 244u8, 7u8,
                            64u8, 147u8, 168u8, 192u8, 177u8, 211u8, 138u8, 73u8, 188u8, 159u8,
                            154u8, 175u8, 219u8, 231u8, 235u8, 93u8, 195u8, 204u8, 100u8, 196u8,
                            241u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_controller`]."]
                pub fn set_controller(&self) -> ::subxt::tx::Payload<types::SetController> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "set_controller",
                        types::SetController {},
                        [
                            172u8, 27u8, 195u8, 188u8, 145u8, 203u8, 190u8, 174u8, 145u8, 43u8,
                            253u8, 87u8, 11u8, 229u8, 112u8, 18u8, 57u8, 101u8, 84u8, 235u8, 109u8,
                            228u8, 58u8, 129u8, 179u8, 174u8, 245u8, 169u8, 89u8, 240u8, 39u8,
                            67u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_validator_count`]."]
                pub fn set_validator_count(
                    &self,
                    new: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetValidatorCount> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "set_validator_count",
                        types::SetValidatorCount { new },
                        [
                            172u8, 225u8, 157u8, 48u8, 242u8, 217u8, 126u8, 206u8, 26u8, 156u8,
                            203u8, 100u8, 116u8, 189u8, 98u8, 89u8, 151u8, 101u8, 77u8, 236u8,
                            101u8, 8u8, 148u8, 236u8, 180u8, 175u8, 232u8, 146u8, 141u8, 141u8,
                            78u8, 165u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::increase_validator_count`]."]
                pub fn increase_validator_count(
                    &self,
                    additional: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::IncreaseValidatorCount> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "increase_validator_count",
                        types::IncreaseValidatorCount { additional },
                        [
                            108u8, 67u8, 131u8, 248u8, 139u8, 227u8, 224u8, 221u8, 248u8, 94u8,
                            141u8, 104u8, 131u8, 250u8, 127u8, 164u8, 137u8, 211u8, 5u8, 27u8,
                            185u8, 251u8, 120u8, 243u8, 165u8, 50u8, 197u8, 161u8, 125u8, 195u8,
                            16u8, 29u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::scale_validator_count`]."]
                pub fn scale_validator_count(
                    &self,
                    factor: runtime_types::sp_arithmetic::per_things::Percent,
                ) -> ::subxt::tx::Payload<types::ScaleValidatorCount> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "scale_validator_count",
                        types::ScaleValidatorCount { factor },
                        [
                            93u8, 200u8, 119u8, 240u8, 148u8, 144u8, 175u8, 135u8, 102u8, 130u8,
                            183u8, 216u8, 28u8, 215u8, 155u8, 233u8, 152u8, 65u8, 49u8, 125u8,
                            196u8, 79u8, 31u8, 195u8, 233u8, 79u8, 150u8, 138u8, 103u8, 161u8,
                            78u8, 154u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_no_eras`]."]
                pub fn force_no_eras(&self) -> ::subxt::tx::Payload<types::ForceNoEras> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "force_no_eras",
                        types::ForceNoEras {},
                        [
                            77u8, 5u8, 105u8, 167u8, 251u8, 78u8, 52u8, 80u8, 177u8, 226u8, 28u8,
                            130u8, 106u8, 62u8, 40u8, 210u8, 110u8, 62u8, 21u8, 113u8, 234u8,
                            227u8, 171u8, 205u8, 240u8, 46u8, 32u8, 84u8, 184u8, 208u8, 61u8,
                            207u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_new_era`]."]
                pub fn force_new_era(&self) -> ::subxt::tx::Payload<types::ForceNewEra> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "force_new_era",
                        types::ForceNewEra {},
                        [
                            119u8, 45u8, 11u8, 87u8, 236u8, 189u8, 41u8, 142u8, 130u8, 10u8, 132u8,
                            140u8, 210u8, 134u8, 66u8, 152u8, 149u8, 55u8, 60u8, 31u8, 190u8, 41u8,
                            177u8, 103u8, 245u8, 193u8, 95u8, 255u8, 29u8, 79u8, 112u8, 188u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_invulnerables`]."]
                pub fn set_invulnerables(
                    &self,
                    invulnerables: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<types::SetInvulnerables> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "set_invulnerables",
                        types::SetInvulnerables { invulnerables },
                        [
                            31u8, 115u8, 221u8, 229u8, 187u8, 61u8, 33u8, 22u8, 126u8, 142u8,
                            248u8, 190u8, 213u8, 35u8, 49u8, 208u8, 193u8, 0u8, 58u8, 18u8, 136u8,
                            220u8, 32u8, 8u8, 121u8, 36u8, 184u8, 57u8, 6u8, 125u8, 199u8, 245u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_unstake`]."]
                pub fn force_unstake(
                    &self,
                    stash: ::subxt::utils::AccountId32,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ForceUnstake> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "force_unstake",
                        types::ForceUnstake {
                            stash,
                            num_slashing_spans,
                        },
                        [
                            205u8, 115u8, 222u8, 58u8, 168u8, 3u8, 59u8, 58u8, 220u8, 98u8, 204u8,
                            90u8, 36u8, 250u8, 178u8, 45u8, 213u8, 158u8, 92u8, 107u8, 3u8, 94u8,
                            118u8, 194u8, 187u8, 196u8, 101u8, 250u8, 36u8, 119u8, 21u8, 19u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_new_era_always`]."]
                pub fn force_new_era_always(
                    &self,
                ) -> ::subxt::tx::Payload<types::ForceNewEraAlways> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "force_new_era_always",
                        types::ForceNewEraAlways {},
                        [
                            102u8, 153u8, 116u8, 85u8, 80u8, 52u8, 89u8, 215u8, 173u8, 159u8, 96u8,
                            99u8, 180u8, 5u8, 62u8, 142u8, 181u8, 101u8, 160u8, 57u8, 177u8, 182u8,
                            6u8, 252u8, 107u8, 252u8, 225u8, 104u8, 147u8, 123u8, 244u8, 134u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_deferred_slash`]."]
                pub fn cancel_deferred_slash(
                    &self,
                    era: ::core::primitive::u32,
                    slash_indices: ::std::vec::Vec<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::CancelDeferredSlash> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "cancel_deferred_slash",
                        types::CancelDeferredSlash { era, slash_indices },
                        [
                            65u8, 90u8, 54u8, 7u8, 89u8, 238u8, 254u8, 76u8, 219u8, 26u8, 137u8,
                            181u8, 154u8, 49u8, 35u8, 99u8, 181u8, 193u8, 209u8, 181u8, 212u8,
                            153u8, 49u8, 83u8, 77u8, 170u8, 175u8, 142u8, 63u8, 187u8, 183u8,
                            199u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::payout_stakers`]."]
                pub fn payout_stakers(
                    &self,
                    validator_stash: ::subxt::utils::AccountId32,
                    era: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::PayoutStakers> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "payout_stakers",
                        types::PayoutStakers {
                            validator_stash,
                            era,
                        },
                        [
                            69u8, 67u8, 140u8, 197u8, 89u8, 20u8, 59u8, 55u8, 142u8, 197u8, 62u8,
                            107u8, 239u8, 50u8, 237u8, 52u8, 4u8, 65u8, 119u8, 73u8, 138u8, 57u8,
                            46u8, 78u8, 252u8, 157u8, 187u8, 14u8, 232u8, 244u8, 217u8, 171u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::rebond`]."]
                pub fn rebond(
                    &self,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Rebond> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "rebond",
                        types::Rebond { value },
                        [
                            204u8, 209u8, 27u8, 219u8, 45u8, 129u8, 15u8, 39u8, 105u8, 165u8,
                            255u8, 55u8, 0u8, 59u8, 115u8, 79u8, 139u8, 82u8, 163u8, 197u8, 44u8,
                            89u8, 41u8, 234u8, 116u8, 214u8, 248u8, 123u8, 250u8, 49u8, 15u8, 77u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::reap_stash`]."]
                pub fn reap_stash(
                    &self,
                    stash: ::subxt::utils::AccountId32,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ReapStash> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "reap_stash",
                        types::ReapStash {
                            stash,
                            num_slashing_spans,
                        },
                        [
                            231u8, 240u8, 152u8, 33u8, 10u8, 60u8, 18u8, 233u8, 0u8, 229u8, 90u8,
                            45u8, 118u8, 29u8, 98u8, 109u8, 89u8, 7u8, 228u8, 254u8, 119u8, 125u8,
                            172u8, 209u8, 217u8, 107u8, 50u8, 226u8, 31u8, 5u8, 153u8, 93u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kick`]."]
                pub fn kick(
                    &self,
                    who: ::std::vec::Vec<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::Kick> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "kick",
                        types::Kick { who },
                        [
                            28u8, 254u8, 219u8, 14u8, 44u8, 187u8, 186u8, 72u8, 55u8, 21u8, 129u8,
                            205u8, 225u8, 204u8, 162u8, 53u8, 255u8, 56u8, 49u8, 194u8, 63u8, 43u8,
                            96u8, 177u8, 125u8, 0u8, 163u8, 97u8, 231u8, 159u8, 43u8, 249u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_staking_configs`]."]
                pub fn set_staking_configs(
                    &self,
                    min_nominator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u128,
                    >,
                    min_validator_bond: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u128,
                    >,
                    max_nominator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u32,
                    >,
                    max_validator_count: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        ::core::primitive::u32,
                    >,
                    chill_threshold: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Percent,
                    >,
                    min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                ) -> ::subxt::tx::Payload<types::SetStakingConfigs> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "set_staking_configs",
                        types::SetStakingConfigs {
                            min_nominator_bond,
                            min_validator_bond,
                            max_nominator_count,
                            max_validator_count,
                            chill_threshold,
                            min_commission,
                        },
                        [
                            198u8, 212u8, 176u8, 138u8, 79u8, 177u8, 241u8, 104u8, 72u8, 170u8,
                            35u8, 178u8, 205u8, 167u8, 218u8, 118u8, 42u8, 226u8, 180u8, 17u8,
                            112u8, 175u8, 55u8, 248u8, 64u8, 127u8, 51u8, 65u8, 132u8, 210u8, 88u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::chill_other`]."]
                pub fn chill_other(
                    &self,
                    controller: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::ChillOther> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "chill_other",
                        types::ChillOther { controller },
                        [
                            143u8, 82u8, 167u8, 43u8, 102u8, 136u8, 78u8, 139u8, 110u8, 159u8,
                            235u8, 226u8, 237u8, 140u8, 142u8, 47u8, 77u8, 57u8, 209u8, 208u8, 9u8,
                            193u8, 3u8, 77u8, 147u8, 41u8, 182u8, 122u8, 178u8, 185u8, 32u8, 182u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_apply_min_commission`]."]
                pub fn force_apply_min_commission(
                    &self,
                    validator_stash: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::ForceApplyMinCommission> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "force_apply_min_commission",
                        types::ForceApplyMinCommission { validator_stash },
                        [
                            158u8, 27u8, 152u8, 23u8, 97u8, 53u8, 54u8, 49u8, 179u8, 236u8, 69u8,
                            65u8, 253u8, 136u8, 232u8, 44u8, 207u8, 66u8, 5u8, 186u8, 49u8, 91u8,
                            173u8, 5u8, 84u8, 45u8, 154u8, 91u8, 239u8, 97u8, 62u8, 42u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_min_commission`]."]
                pub fn set_min_commission(
                    &self,
                    new: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> ::subxt::tx::Payload<types::SetMinCommission> {
                    ::subxt::tx::Payload::new_static(
                        "Staking",
                        "set_min_commission",
                        types::SetMinCommission { new },
                        [
                            96u8, 168u8, 55u8, 79u8, 79u8, 49u8, 8u8, 127u8, 98u8, 158u8, 106u8,
                            187u8, 177u8, 201u8, 68u8, 181u8, 219u8, 172u8, 63u8, 120u8, 172u8,
                            173u8, 251u8, 167u8, 84u8, 165u8, 238u8, 115u8, 110u8, 97u8, 144u8,
                            50u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_staking::pallet::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
            #[doc = "the remainder from the maximum amount of reward."]
            pub struct EraPaid {
                pub era_index: ::core::primitive::u32,
                pub validator_payout: ::core::primitive::u128,
                pub remainder: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for EraPaid {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "EraPaid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The nominator has been rewarded by this amount."]
            pub struct Rewarded {
                pub stash: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Rewarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A staker (validator or nominator) has been slashed by the given amount."]
            pub struct Slashed {
                pub staker: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A slash for the given validator, for the given percentage of their stake, at the given"]
            #[doc = "era as been reported."]
            pub struct SlashReported {
                pub validator: ::subxt::utils::AccountId32,
                pub fraction: runtime_types::sp_arithmetic::per_things::Perbill,
                pub slash_era: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for SlashReported {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "SlashReported";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An old slashing report from a prior era was discarded because it could"]
            #[doc = "not be processed."]
            pub struct OldSlashingReportDiscarded {
                pub session_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for OldSlashingReportDiscarded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "OldSlashingReportDiscarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new set of stakers was elected."]
            pub struct StakersElected;
            impl ::subxt::events::StaticEvent for StakersElected {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "StakersElected";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has bonded this amount. \\[stash, amount\\]"]
            #[doc = ""]
            #[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
            #[doc = "it will not be emitted for staking rewards when they are added to stake."]
            pub struct Bonded {
                pub stash: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Bonded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Bonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has unbonded this amount."]
            pub struct Unbonded {
                pub stash: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Unbonded {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Unbonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
            #[doc = "from the unlocking queue."]
            pub struct Withdrawn {
                pub stash: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A nominator has been kicked from a validator."]
            pub struct Kicked {
                pub nominator: ::subxt::utils::AccountId32,
                pub stash: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Kicked {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Kicked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The election failed. No new era is planned."]
            pub struct StakingElectionFailed;
            impl ::subxt::events::StaticEvent for StakingElectionFailed {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "StakingElectionFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has stopped participating as either a validator or nominator."]
            pub struct Chilled {
                pub stash: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Chilled {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "Chilled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The stakers' rewards are getting paid."]
            pub struct PayoutStarted {
                pub era_index: ::core::primitive::u32,
                pub validator_stash: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for PayoutStarted {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "PayoutStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A validator has set their preferences."]
            pub struct ValidatorPrefsSet {
                pub stash: ::subxt::utils::AccountId32,
                pub prefs: runtime_types::pallet_staking::ValidatorPrefs,
            }
            impl ::subxt::events::StaticEvent for ValidatorPrefsSet {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "ValidatorPrefsSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new force era mode was set."]
            pub struct ForceEra {
                pub mode: runtime_types::pallet_staking::Forcing,
            }
            impl ::subxt::events::StaticEvent for ForceEra {
                const PALLET: &'static str = "Staking";
                const EVENT: &'static str = "ForceEra";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The ideal number of active validators."]
                pub fn validator_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ValidatorCount",
                        vec![],
                        [
                            105u8, 251u8, 193u8, 198u8, 232u8, 118u8, 73u8, 115u8, 205u8, 78u8,
                            49u8, 253u8, 140u8, 193u8, 161u8, 205u8, 13u8, 147u8, 125u8, 102u8,
                            142u8, 244u8, 210u8, 227u8, 225u8, 46u8, 144u8, 122u8, 254u8, 48u8,
                            44u8, 169u8,
                        ],
                    )
                }
                #[doc = " Minimum number of staking participants before emergency conditions are imposed."]
                pub fn minimum_validator_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "MinimumValidatorCount",
                        vec![],
                        [
                            103u8, 178u8, 29u8, 91u8, 90u8, 31u8, 49u8, 9u8, 11u8, 58u8, 178u8,
                            30u8, 219u8, 55u8, 58u8, 181u8, 80u8, 155u8, 9u8, 11u8, 38u8, 46u8,
                            125u8, 179u8, 220u8, 20u8, 212u8, 181u8, 136u8, 103u8, 58u8, 48u8,
                        ],
                    )
                }
                #[doc = " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're"]
                #[doc = " easy to initialize and the performance hit is minimal (we expect no more than four"]
                #[doc = " invulnerables) and restricted to testnets."]
                pub fn invulnerables(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Invulnerables",
                        vec![],
                        [
                            199u8, 35u8, 0u8, 229u8, 160u8, 128u8, 139u8, 245u8, 27u8, 133u8, 47u8,
                            240u8, 86u8, 195u8, 90u8, 169u8, 158u8, 231u8, 128u8, 58u8, 24u8,
                            173u8, 138u8, 122u8, 226u8, 104u8, 239u8, 114u8, 91u8, 165u8, 207u8,
                            150u8,
                        ],
                    )
                }
                #[doc = " Map from all locked \"stash\" accounts to the controller account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn bonded(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Bonded",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            146u8, 230u8, 48u8, 190u8, 166u8, 127u8, 237u8, 216u8, 71u8, 33u8,
                            108u8, 121u8, 204u8, 211u8, 133u8, 123u8, 52u8, 164u8, 201u8, 209u8,
                            236u8, 35u8, 190u8, 77u8, 126u8, 150u8, 79u8, 244u8, 15u8, 247u8,
                            161u8, 107u8,
                        ],
                    )
                }
                #[doc = " Map from all locked \"stash\" accounts to the controller account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn bonded_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Bonded",
                        Vec::new(),
                        [
                            146u8, 230u8, 48u8, 190u8, 166u8, 127u8, 237u8, 216u8, 71u8, 33u8,
                            108u8, 121u8, 204u8, 211u8, 133u8, 123u8, 52u8, 164u8, 201u8, 209u8,
                            236u8, 35u8, 190u8, 77u8, 126u8, 150u8, 79u8, 244u8, 15u8, 247u8,
                            161u8, 107u8,
                        ],
                    )
                }
                #[doc = " The minimum active bond to become and maintain the role of a nominator."]
                pub fn min_nominator_bond(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "MinNominatorBond",
                        vec![],
                        [
                            102u8, 115u8, 254u8, 15u8, 191u8, 228u8, 85u8, 249u8, 112u8, 190u8,
                            129u8, 243u8, 236u8, 39u8, 195u8, 232u8, 10u8, 230u8, 11u8, 144u8,
                            115u8, 1u8, 45u8, 70u8, 181u8, 161u8, 17u8, 92u8, 19u8, 70u8, 100u8,
                            94u8,
                        ],
                    )
                }
                #[doc = " The minimum active bond to become and maintain the role of a validator."]
                pub fn min_validator_bond(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "MinValidatorBond",
                        vec![],
                        [
                            146u8, 249u8, 26u8, 52u8, 224u8, 81u8, 85u8, 153u8, 118u8, 169u8,
                            140u8, 37u8, 208u8, 242u8, 8u8, 29u8, 156u8, 73u8, 154u8, 162u8, 186u8,
                            159u8, 119u8, 100u8, 109u8, 227u8, 6u8, 139u8, 155u8, 203u8, 167u8,
                            244u8,
                        ],
                    )
                }
                #[doc = " The minimum active nominator stake of the last successful election."]
                pub fn minimum_active_stake(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "MinimumActiveStake",
                        vec![],
                        [
                            166u8, 211u8, 59u8, 23u8, 2u8, 160u8, 244u8, 52u8, 153u8, 12u8, 103u8,
                            113u8, 51u8, 232u8, 145u8, 188u8, 54u8, 67u8, 227u8, 221u8, 186u8, 6u8,
                            28u8, 63u8, 146u8, 212u8, 233u8, 173u8, 134u8, 41u8, 169u8, 153u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of commission that validators can set."]
                #[doc = ""]
                #[doc = " If set to `0`, no limit exists."]
                pub fn min_commission(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::per_things::Perbill,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "MinCommission",
                        vec![],
                        [
                            220u8, 197u8, 232u8, 212u8, 205u8, 242u8, 121u8, 165u8, 255u8, 199u8,
                            122u8, 20u8, 145u8, 245u8, 175u8, 26u8, 45u8, 70u8, 207u8, 26u8, 112u8,
                            234u8, 181u8, 167u8, 140u8, 75u8, 15u8, 1u8, 221u8, 168u8, 17u8, 211u8,
                        ],
                    )
                }
                #[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
                pub fn ledger(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::StakingLedger,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Ledger",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            77u8, 39u8, 230u8, 122u8, 108u8, 191u8, 251u8, 28u8, 233u8, 225u8,
                            195u8, 224u8, 234u8, 90u8, 173u8, 170u8, 143u8, 246u8, 246u8, 21u8,
                            38u8, 187u8, 112u8, 111u8, 206u8, 181u8, 183u8, 186u8, 96u8, 8u8,
                            225u8, 224u8,
                        ],
                    )
                }
                #[doc = " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."]
                pub fn ledger_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::StakingLedger,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Ledger",
                        Vec::new(),
                        [
                            77u8, 39u8, 230u8, 122u8, 108u8, 191u8, 251u8, 28u8, 233u8, 225u8,
                            195u8, 224u8, 234u8, 90u8, 173u8, 170u8, 143u8, 246u8, 246u8, 21u8,
                            38u8, 187u8, 112u8, 111u8, 206u8, 181u8, 183u8, 186u8, 96u8, 8u8,
                            225u8, 224u8,
                        ],
                    )
                }
                #[doc = " Where the reward payment should be made. Keyed by stash."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn payee(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::RewardDestination<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Payee",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            198u8, 238u8, 10u8, 104u8, 204u8, 7u8, 193u8, 254u8, 169u8, 18u8,
                            187u8, 212u8, 90u8, 243u8, 73u8, 29u8, 216u8, 144u8, 93u8, 140u8, 11u8,
                            124u8, 4u8, 191u8, 107u8, 61u8, 15u8, 152u8, 70u8, 82u8, 60u8, 75u8,
                        ],
                    )
                }
                #[doc = " Where the reward payment should be made. Keyed by stash."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn payee_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::RewardDestination<::subxt::utils::AccountId32>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Payee",
                        Vec::new(),
                        [
                            198u8, 238u8, 10u8, 104u8, 204u8, 7u8, 193u8, 254u8, 169u8, 18u8,
                            187u8, 212u8, 90u8, 243u8, 73u8, 29u8, 216u8, 144u8, 93u8, 140u8, 11u8,
                            124u8, 4u8, 191u8, 107u8, 61u8, 15u8, 152u8, 70u8, 82u8, 60u8, 75u8,
                        ],
                    )
                }
                #[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn validators(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::ValidatorPrefs,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Validators",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            149u8, 207u8, 68u8, 38u8, 24u8, 220u8, 207u8, 84u8, 236u8, 33u8, 210u8,
                            124u8, 200u8, 99u8, 98u8, 29u8, 235u8, 46u8, 124u8, 4u8, 203u8, 6u8,
                            209u8, 21u8, 124u8, 236u8, 112u8, 118u8, 180u8, 85u8, 78u8, 13u8,
                        ],
                    )
                }
                #[doc = " The map from (wannabe) validator stash key to the preferences of that validator."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn validators_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::ValidatorPrefs,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Validators",
                        Vec::new(),
                        [
                            149u8, 207u8, 68u8, 38u8, 24u8, 220u8, 207u8, 84u8, 236u8, 33u8, 210u8,
                            124u8, 200u8, 99u8, 98u8, 29u8, 235u8, 46u8, 124u8, 4u8, 203u8, 6u8,
                            209u8, 21u8, 124u8, 236u8, 112u8, 118u8, 180u8, 85u8, 78u8, 13u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "CounterForValidators",
                        vec![],
                        [
                            169u8, 146u8, 194u8, 114u8, 57u8, 232u8, 137u8, 93u8, 214u8, 98u8,
                            176u8, 151u8, 237u8, 165u8, 176u8, 252u8, 73u8, 124u8, 22u8, 166u8,
                            225u8, 217u8, 65u8, 56u8, 174u8, 12u8, 32u8, 2u8, 7u8, 173u8, 125u8,
                            235u8,
                        ],
                    )
                }
                #[doc = " The maximum validator count before we stop allowing new validators to join."]
                #[doc = ""]
                #[doc = " When this value is not set, no limits are enforced."]
                pub fn max_validators_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "MaxValidatorsCount",
                        vec![],
                        [
                            139u8, 116u8, 236u8, 217u8, 110u8, 47u8, 140u8, 197u8, 184u8, 246u8,
                            180u8, 188u8, 233u8, 99u8, 102u8, 21u8, 114u8, 23u8, 143u8, 163u8,
                            224u8, 250u8, 248u8, 185u8, 235u8, 94u8, 110u8, 83u8, 170u8, 123u8,
                            113u8, 168u8,
                        ],
                    )
                }
                #[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
                #[doc = " they wish to support."]
                #[doc = ""]
                #[doc = " Note that the keys of this storage map might become non-decodable in case the"]
                #[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
                #[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
                #[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
                #[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
                #[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
                #[doc = ""]
                #[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
                #[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
                #[doc = " number of keys that exist."]
                #[doc = ""]
                #[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
                #[doc = " [`Call::chill_other`] dispatchable by anyone."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn nominators(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::Nominations,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Nominators",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            114u8, 45u8, 86u8, 23u8, 12u8, 98u8, 114u8, 3u8, 170u8, 11u8, 100u8,
                            17u8, 122u8, 158u8, 192u8, 21u8, 160u8, 87u8, 85u8, 142u8, 241u8,
                            232u8, 25u8, 6u8, 36u8, 85u8, 155u8, 79u8, 124u8, 173u8, 0u8, 252u8,
                        ],
                    )
                }
                #[doc = " The map from nominator stash key to their nomination preferences, namely the validators that"]
                #[doc = " they wish to support."]
                #[doc = ""]
                #[doc = " Note that the keys of this storage map might become non-decodable in case the"]
                #[doc = " [`Config::MaxNominations`] configuration is decreased. In this rare case, these nominators"]
                #[doc = " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`"]
                #[doc = " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable"]
                #[doc = " nominators will effectively not-exist, until they re-submit their preferences such that it"]
                #[doc = " is within the bounds of the newly set `Config::MaxNominations`."]
                #[doc = ""]
                #[doc = " This implies that `::iter_keys().count()` and `::iter().count()` might return different"]
                #[doc = " values for this map. Moreover, the main `::count()` is aligned with the former, namely the"]
                #[doc = " number of keys that exist."]
                #[doc = ""]
                #[doc = " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via"]
                #[doc = " [`Call::chill_other`] dispatchable by anyone."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn nominators_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::Nominations,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "Nominators",
                        Vec::new(),
                        [
                            114u8, 45u8, 86u8, 23u8, 12u8, 98u8, 114u8, 3u8, 170u8, 11u8, 100u8,
                            17u8, 122u8, 158u8, 192u8, 21u8, 160u8, 87u8, 85u8, 142u8, 241u8,
                            232u8, 25u8, 6u8, 36u8, 85u8, 155u8, 79u8, 124u8, 173u8, 0u8, 252u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_nominators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "CounterForNominators",
                        vec![],
                        [
                            150u8, 236u8, 184u8, 12u8, 224u8, 26u8, 13u8, 204u8, 208u8, 178u8,
                            68u8, 148u8, 232u8, 85u8, 74u8, 248u8, 167u8, 61u8, 88u8, 126u8, 40u8,
                            20u8, 73u8, 47u8, 94u8, 57u8, 144u8, 77u8, 156u8, 179u8, 55u8, 49u8,
                        ],
                    )
                }
                #[doc = " The maximum nominator count before we stop allowing new validators to join."]
                #[doc = ""]
                #[doc = " When this value is not set, no limits are enforced."]
                pub fn max_nominators_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "MaxNominatorsCount",
                        vec![],
                        [
                            11u8, 234u8, 179u8, 254u8, 95u8, 119u8, 35u8, 255u8, 141u8, 95u8,
                            148u8, 209u8, 43u8, 202u8, 19u8, 57u8, 185u8, 50u8, 152u8, 192u8, 95u8,
                            13u8, 158u8, 245u8, 113u8, 199u8, 255u8, 187u8, 37u8, 44u8, 8u8, 119u8,
                        ],
                    )
                }
                #[doc = " The current era index."]
                #[doc = ""]
                #[doc = " This is the latest planned era, depending on how the Session pallet queues the validator"]
                #[doc = " set, it might be active or not."]
                pub fn current_era(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "CurrentEra",
                        vec![],
                        [
                            247u8, 239u8, 171u8, 18u8, 137u8, 240u8, 213u8, 3u8, 173u8, 173u8,
                            236u8, 141u8, 202u8, 191u8, 228u8, 120u8, 196u8, 188u8, 13u8, 66u8,
                            253u8, 117u8, 90u8, 8u8, 158u8, 11u8, 236u8, 141u8, 178u8, 44u8, 119u8,
                            25u8,
                        ],
                    )
                }
                #[doc = " The active era information, it holds index and start."]
                #[doc = ""]
                #[doc = " The active era is the era being currently rewarded. Validator set of this era must be"]
                #[doc = " equal to [`SessionInterface::validators`]."]
                pub fn active_era(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::ActiveEraInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ActiveEra",
                        vec![],
                        [
                            24u8, 229u8, 66u8, 56u8, 111u8, 234u8, 139u8, 93u8, 245u8, 137u8,
                            110u8, 110u8, 121u8, 15u8, 216u8, 207u8, 97u8, 120u8, 125u8, 45u8,
                            61u8, 2u8, 50u8, 100u8, 3u8, 106u8, 12u8, 233u8, 123u8, 156u8, 145u8,
                            38u8,
                        ],
                    )
                }
                #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
                #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
                pub fn eras_start_session_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasStartSessionIndex",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            72u8, 185u8, 246u8, 202u8, 79u8, 127u8, 173u8, 74u8, 216u8, 238u8,
                            58u8, 82u8, 235u8, 222u8, 76u8, 144u8, 97u8, 84u8, 17u8, 164u8, 132u8,
                            167u8, 24u8, 195u8, 175u8, 132u8, 156u8, 87u8, 234u8, 147u8, 103u8,
                            58u8,
                        ],
                    )
                }
                #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
                #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
                pub fn eras_start_session_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasStartSessionIndex",
                        Vec::new(),
                        [
                            72u8, 185u8, 246u8, 202u8, 79u8, 127u8, 173u8, 74u8, 216u8, 238u8,
                            58u8, 82u8, 235u8, 222u8, 76u8, 144u8, 97u8, 84u8, 17u8, 164u8, 132u8,
                            167u8, 24u8, 195u8, 175u8, 132u8, 156u8, 87u8, 234u8, 147u8, 103u8,
                            58u8,
                        ],
                    )
                }
                #[doc = " Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
                pub fn eras_stakers(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::Exposure<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasStakers",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            103u8, 38u8, 198u8, 91u8, 133u8, 9u8, 10u8, 201u8, 103u8, 169u8, 159u8,
                            172u8, 59u8, 238u8, 21u8, 30u8, 140u8, 183u8, 160u8, 61u8, 36u8, 162u8,
                            244u8, 61u8, 78u8, 33u8, 134u8, 176u8, 112u8, 153u8, 192u8, 252u8,
                        ],
                    )
                }
                #[doc = " Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
                pub fn eras_stakers_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::Exposure<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasStakers",
                        Vec::new(),
                        [
                            103u8, 38u8, 198u8, 91u8, 133u8, 9u8, 10u8, 201u8, 103u8, 169u8, 159u8,
                            172u8, 59u8, 238u8, 21u8, 30u8, 140u8, 183u8, 160u8, 61u8, 36u8, 162u8,
                            244u8, 61u8, 78u8, 33u8, 134u8, 176u8, 112u8, 153u8, 192u8, 252u8,
                        ],
                    )
                }
                #[doc = " Clipped Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
                #[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
                #[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
                #[doc = " This is used to limit the i/o cost for the nominator payout."]
                #[doc = ""]
                #[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
                pub fn eras_stakers_clipped(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::Exposure<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasStakersClipped",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            119u8, 253u8, 51u8, 32u8, 173u8, 173u8, 49u8, 121u8, 141u8, 128u8,
                            219u8, 112u8, 173u8, 42u8, 145u8, 37u8, 8u8, 12u8, 27u8, 37u8, 232u8,
                            187u8, 130u8, 227u8, 113u8, 111u8, 185u8, 197u8, 157u8, 136u8, 205u8,
                            32u8,
                        ],
                    )
                }
                #[doc = " Clipped Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the"]
                #[doc = " `T::MaxNominatorRewardedPerValidator` biggest stakers."]
                #[doc = " (Note: the field `total` and `own` of the exposure remains unchanged)."]
                #[doc = " This is used to limit the i/o cost for the nominator payout."]
                #[doc = ""]
                #[doc = " This is keyed fist by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
                pub fn eras_stakers_clipped_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::Exposure<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasStakersClipped",
                        Vec::new(),
                        [
                            119u8, 253u8, 51u8, 32u8, 173u8, 173u8, 49u8, 121u8, 141u8, 128u8,
                            219u8, 112u8, 173u8, 42u8, 145u8, 37u8, 8u8, 12u8, 27u8, 37u8, 232u8,
                            187u8, 130u8, 227u8, 113u8, 111u8, 185u8, 197u8, 157u8, 136u8, 205u8,
                            32u8,
                        ],
                    )
                }
                #[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                pub fn eras_validator_prefs(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::ValidatorPrefs,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasValidatorPrefs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            201u8, 204u8, 230u8, 197u8, 37u8, 83u8, 124u8, 26u8, 10u8, 75u8, 164u8,
                            102u8, 83u8, 24u8, 158u8, 127u8, 27u8, 173u8, 125u8, 63u8, 251u8,
                            128u8, 239u8, 182u8, 115u8, 109u8, 13u8, 97u8, 211u8, 104u8, 189u8,
                            127u8,
                        ],
                    )
                }
                #[doc = " Similar to `ErasStakers`, this holds the preferences of validators."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                pub fn eras_validator_prefs_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::ValidatorPrefs,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasValidatorPrefs",
                        Vec::new(),
                        [
                            201u8, 204u8, 230u8, 197u8, 37u8, 83u8, 124u8, 26u8, 10u8, 75u8, 164u8,
                            102u8, 83u8, 24u8, 158u8, 127u8, 27u8, 173u8, 125u8, 63u8, 251u8,
                            128u8, 239u8, 182u8, 115u8, 109u8, 13u8, 97u8, 211u8, 104u8, 189u8,
                            127u8,
                        ],
                    )
                }
                #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
                pub fn eras_validator_reward(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasValidatorReward",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            185u8, 85u8, 179u8, 163u8, 178u8, 168u8, 141u8, 200u8, 59u8, 77u8, 2u8,
                            197u8, 36u8, 188u8, 133u8, 117u8, 2u8, 25u8, 105u8, 132u8, 44u8, 75u8,
                            15u8, 82u8, 57u8, 89u8, 242u8, 234u8, 70u8, 244u8, 198u8, 126u8,
                        ],
                    )
                }
                #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
                pub fn eras_validator_reward_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasValidatorReward",
                        Vec::new(),
                        [
                            185u8, 85u8, 179u8, 163u8, 178u8, 168u8, 141u8, 200u8, 59u8, 77u8, 2u8,
                            197u8, 36u8, 188u8, 133u8, 117u8, 2u8, 25u8, 105u8, 132u8, 44u8, 75u8,
                            15u8, 82u8, 57u8, 89u8, 242u8, 234u8, 70u8, 244u8, 198u8, 126u8,
                        ],
                    )
                }
                #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
                #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
                pub fn eras_reward_points(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::EraRewardPoints<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasRewardPoints",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            237u8, 135u8, 146u8, 156u8, 172u8, 48u8, 147u8, 207u8, 15u8, 86u8,
                            55u8, 38u8, 29u8, 253u8, 198u8, 192u8, 99u8, 213u8, 80u8, 72u8, 212u8,
                            60u8, 60u8, 180u8, 33u8, 17u8, 77u8, 0u8, 165u8, 225u8, 60u8, 213u8,
                        ],
                    )
                }
                #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
                #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
                pub fn eras_reward_points_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::EraRewardPoints<::subxt::utils::AccountId32>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasRewardPoints",
                        Vec::new(),
                        [
                            237u8, 135u8, 146u8, 156u8, 172u8, 48u8, 147u8, 207u8, 15u8, 86u8,
                            55u8, 38u8, 29u8, 253u8, 198u8, 192u8, 99u8, 213u8, 80u8, 72u8, 212u8,
                            60u8, 60u8, 180u8, 33u8, 17u8, 77u8, 0u8, 165u8, 225u8, 60u8, 213u8,
                        ],
                    )
                }
                #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
                #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
                pub fn eras_total_stake(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasTotalStake",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            8u8, 78u8, 101u8, 62u8, 124u8, 126u8, 66u8, 26u8, 47u8, 126u8, 239u8,
                            204u8, 222u8, 104u8, 19u8, 108u8, 238u8, 160u8, 112u8, 242u8, 56u8,
                            2u8, 250u8, 164u8, 250u8, 213u8, 201u8, 84u8, 193u8, 117u8, 108u8,
                            146u8,
                        ],
                    )
                }
                #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
                #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
                pub fn eras_total_stake_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ErasTotalStake",
                        Vec::new(),
                        [
                            8u8, 78u8, 101u8, 62u8, 124u8, 126u8, 66u8, 26u8, 47u8, 126u8, 239u8,
                            204u8, 222u8, 104u8, 19u8, 108u8, 238u8, 160u8, 112u8, 242u8, 56u8,
                            2u8, 250u8, 164u8, 250u8, 213u8, 201u8, 84u8, 193u8, 117u8, 108u8,
                            146u8,
                        ],
                    )
                }
                #[doc = " Mode of era forcing."]
                pub fn force_era(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::Forcing,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ForceEra",
                        vec![],
                        [
                            177u8, 148u8, 73u8, 108u8, 136u8, 126u8, 89u8, 18u8, 124u8, 66u8, 30u8,
                            102u8, 133u8, 164u8, 78u8, 214u8, 184u8, 163u8, 75u8, 164u8, 117u8,
                            233u8, 209u8, 158u8, 99u8, 208u8, 21u8, 194u8, 152u8, 82u8, 16u8,
                            222u8,
                        ],
                    )
                }
                #[doc = " The percentage of the slash that is distributed to reporters."]
                #[doc = ""]
                #[doc = " The rest of the slashed value is handled by the `Slash`."]
                pub fn slash_reward_fraction(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::per_things::Perbill,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "SlashRewardFraction",
                        vec![],
                        [
                            53u8, 88u8, 253u8, 237u8, 84u8, 228u8, 187u8, 130u8, 108u8, 195u8,
                            135u8, 25u8, 75u8, 52u8, 238u8, 62u8, 133u8, 38u8, 139u8, 129u8, 216u8,
                            193u8, 197u8, 216u8, 245u8, 171u8, 128u8, 207u8, 125u8, 246u8, 248u8,
                            7u8,
                        ],
                    )
                }
                #[doc = " The amount of currency given to reporters of a slash event which was"]
                #[doc = " canceled by extraordinary circumstances (e.g. governance)."]
                pub fn canceled_slash_payout(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "CanceledSlashPayout",
                        vec![],
                        [
                            221u8, 88u8, 134u8, 81u8, 22u8, 229u8, 100u8, 27u8, 86u8, 244u8, 229u8,
                            107u8, 251u8, 119u8, 58u8, 153u8, 19u8, 20u8, 254u8, 169u8, 248u8,
                            220u8, 98u8, 118u8, 48u8, 213u8, 22u8, 79u8, 242u8, 250u8, 147u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " All unapplied slashes that are queued for later."]
                pub fn unapplied_slashes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_staking::UnappliedSlash<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "UnappliedSlashes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            121u8, 1u8, 135u8, 243u8, 99u8, 254u8, 238u8, 207u8, 145u8, 172u8,
                            186u8, 131u8, 181u8, 109u8, 199u8, 93u8, 129u8, 65u8, 106u8, 118u8,
                            197u8, 83u8, 65u8, 45u8, 149u8, 1u8, 85u8, 99u8, 239u8, 148u8, 40u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " All unapplied slashes that are queued for later."]
                pub fn unapplied_slashes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_staking::UnappliedSlash<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "UnappliedSlashes",
                        Vec::new(),
                        [
                            121u8, 1u8, 135u8, 243u8, 99u8, 254u8, 238u8, 207u8, 145u8, 172u8,
                            186u8, 131u8, 181u8, 109u8, 199u8, 93u8, 129u8, 65u8, 106u8, 118u8,
                            197u8, 83u8, 65u8, 45u8, 149u8, 1u8, 85u8, 99u8, 239u8, 148u8, 40u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " A mapping from still-bonded eras to the first session index of that era."]
                #[doc = ""]
                #[doc = " Must contains information for eras for the range:"]
                #[doc = " `[active_era - bounding_duration; active_era]`"]
                pub fn bonded_eras(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "BondedEras",
                        vec![],
                        [
                            187u8, 216u8, 245u8, 253u8, 194u8, 182u8, 60u8, 244u8, 203u8, 84u8,
                            228u8, 163u8, 149u8, 205u8, 57u8, 176u8, 203u8, 156u8, 20u8, 29u8,
                            52u8, 234u8, 200u8, 63u8, 88u8, 49u8, 89u8, 117u8, 252u8, 75u8, 172u8,
                            53u8,
                        ],
                    )
                }
                #[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
                #[doc = " and slash value of the era."]
                pub fn validator_slash_in_era(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::sp_arithmetic::per_things::Perbill,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ValidatorSlashInEra",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            224u8, 141u8, 93u8, 44u8, 47u8, 157u8, 205u8, 12u8, 68u8, 41u8, 221u8,
                            210u8, 141u8, 225u8, 253u8, 22u8, 175u8, 11u8, 92u8, 76u8, 180u8, 4u8,
                            106u8, 135u8, 166u8, 47u8, 201u8, 43u8, 165u8, 42u8, 232u8, 219u8,
                        ],
                    )
                }
                #[doc = " All slashing events on validators, mapped by era to the highest slash proportion"]
                #[doc = " and slash value of the era."]
                pub fn validator_slash_in_era_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::sp_arithmetic::per_things::Perbill,
                        ::core::primitive::u128,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ValidatorSlashInEra",
                        Vec::new(),
                        [
                            224u8, 141u8, 93u8, 44u8, 47u8, 157u8, 205u8, 12u8, 68u8, 41u8, 221u8,
                            210u8, 141u8, 225u8, 253u8, 22u8, 175u8, 11u8, 92u8, 76u8, 180u8, 4u8,
                            106u8, 135u8, 166u8, 47u8, 201u8, 43u8, 165u8, 42u8, 232u8, 219u8,
                        ],
                    )
                }
                #[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]
                pub fn nominator_slash_in_era(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "NominatorSlashInEra",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            8u8, 89u8, 171u8, 183u8, 64u8, 29u8, 44u8, 185u8, 11u8, 204u8, 67u8,
                            60u8, 208u8, 132u8, 9u8, 214u8, 13u8, 148u8, 205u8, 26u8, 5u8, 7u8,
                            250u8, 191u8, 83u8, 118u8, 95u8, 17u8, 40u8, 126u8, 16u8, 135u8,
                        ],
                    )
                }
                #[doc = " All slashing events on nominators, mapped by era to the highest slash value of the era."]
                pub fn nominator_slash_in_era_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "NominatorSlashInEra",
                        Vec::new(),
                        [
                            8u8, 89u8, 171u8, 183u8, 64u8, 29u8, 44u8, 185u8, 11u8, 204u8, 67u8,
                            60u8, 208u8, 132u8, 9u8, 214u8, 13u8, 148u8, 205u8, 26u8, 5u8, 7u8,
                            250u8, 191u8, 83u8, 118u8, 95u8, 17u8, 40u8, 126u8, 16u8, 135u8,
                        ],
                    )
                }
                #[doc = " Slashing spans for stash accounts."]
                pub fn slashing_spans(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::slashing::SlashingSpans,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "SlashingSpans",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 190u8, 57u8, 128u8, 105u8, 73u8, 194u8, 75u8, 12u8, 120u8,
                            141u8, 190u8, 235u8, 250u8, 221u8, 200u8, 141u8, 162u8, 31u8, 85u8,
                            239u8, 108u8, 200u8, 148u8, 155u8, 48u8, 44u8, 89u8, 5u8, 177u8, 236u8,
                            182u8,
                        ],
                    )
                }
                #[doc = " Slashing spans for stash accounts."]
                pub fn slashing_spans_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::slashing::SlashingSpans,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "SlashingSpans",
                        Vec::new(),
                        [
                            160u8, 190u8, 57u8, 128u8, 105u8, 73u8, 194u8, 75u8, 12u8, 120u8,
                            141u8, 190u8, 235u8, 250u8, 221u8, 200u8, 141u8, 162u8, 31u8, 85u8,
                            239u8, 108u8, 200u8, 148u8, 155u8, 48u8, 44u8, 89u8, 5u8, 177u8, 236u8,
                            182u8,
                        ],
                    )
                }
                #[doc = " Records information about the maximum slash of a stash within a slashing span,"]
                #[doc = " as well as how much reward has been paid out."]
                pub fn span_slash(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::slashing::SpanRecord<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "SpanSlash",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            6u8, 241u8, 205u8, 89u8, 62u8, 181u8, 211u8, 216u8, 190u8, 41u8, 81u8,
                            136u8, 136u8, 139u8, 57u8, 243u8, 174u8, 150u8, 132u8, 211u8, 79u8,
                            138u8, 108u8, 218u8, 19u8, 225u8, 60u8, 26u8, 135u8, 6u8, 21u8, 116u8,
                        ],
                    )
                }
                #[doc = " Records information about the maximum slash of a stash within a slashing span,"]
                #[doc = " as well as how much reward has been paid out."]
                pub fn span_slash_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_staking::slashing::SpanRecord<::core::primitive::u128>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "SpanSlash",
                        Vec::new(),
                        [
                            6u8, 241u8, 205u8, 89u8, 62u8, 181u8, 211u8, 216u8, 190u8, 41u8, 81u8,
                            136u8, 136u8, 139u8, 57u8, 243u8, 174u8, 150u8, 132u8, 211u8, 79u8,
                            138u8, 108u8, 218u8, 19u8, 225u8, 60u8, 26u8, 135u8, 6u8, 21u8, 116u8,
                        ],
                    )
                }
                #[doc = " The last planned session scheduled by the session pallet."]
                #[doc = ""]
                #[doc = " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."]
                pub fn current_planned_session(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "CurrentPlannedSession",
                        vec![],
                        [
                            12u8, 47u8, 20u8, 104u8, 155u8, 181u8, 35u8, 91u8, 172u8, 97u8, 206u8,
                            135u8, 185u8, 142u8, 46u8, 72u8, 32u8, 118u8, 225u8, 191u8, 28u8,
                            130u8, 7u8, 38u8, 181u8, 233u8, 201u8, 8u8, 160u8, 161u8, 86u8, 204u8,
                        ],
                    )
                }
                #[doc = " Indices of validators that have offended in the active era and whether they are currently"]
                #[doc = " disabled."]
                #[doc = ""]
                #[doc = " This value should be a superset of disabled validators since not all offences lead to the"]
                #[doc = " validator being disabled (if there was no slash). This is needed to track the percentage of"]
                #[doc = " validators that have offended in the current era, ensuring a new era is forced if"]
                #[doc = " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find"]
                #[doc = " whether a given validator has previously offended using binary search. It gets cleared when"]
                #[doc = " the era ends."]
                pub fn offending_validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::bool)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "OffendingValidators",
                        vec![],
                        [
                            201u8, 31u8, 141u8, 182u8, 160u8, 180u8, 37u8, 226u8, 50u8, 65u8,
                            103u8, 11u8, 38u8, 120u8, 200u8, 219u8, 219u8, 98u8, 185u8, 137u8,
                            154u8, 20u8, 130u8, 163u8, 126u8, 185u8, 33u8, 194u8, 76u8, 172u8,
                            70u8, 220u8,
                        ],
                    )
                }
                #[doc = " The threshold for when users can start calling `chill_other` for other validators /"]
                #[doc = " nominators. The threshold is compared to the actual number of validators / nominators"]
                #[doc = " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."]
                pub fn chill_threshold(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::per_things::Percent,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Staking",
                        "ChillThreshold",
                        vec![],
                        [
                            133u8, 222u8, 1u8, 208u8, 212u8, 216u8, 247u8, 66u8, 178u8, 96u8, 35u8,
                            112u8, 33u8, 245u8, 11u8, 249u8, 255u8, 212u8, 204u8, 161u8, 44u8,
                            38u8, 126u8, 151u8, 140u8, 42u8, 253u8, 101u8, 1u8, 23u8, 239u8, 39u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximum number of nominations per nominator."]
                pub fn max_nominations(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Staking",
                        "MaxNominations",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of eras to keep in history."]
                #[doc = ""]
                #[doc = " Following information is kept for eras in `[current_era -"]
                #[doc = " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,"]
                #[doc = " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,"]
                #[doc = " `ErasTotalStake`, `ErasStartSessionIndex`,"]
                #[doc = " `StakingLedger.claimed_rewards`."]
                #[doc = ""]
                #[doc = " Must be more than the number of eras delayed by session."]
                #[doc = " I.e. active era must always be in history. I.e. `active_era >"]
                #[doc = " current_era - history_depth` must be guaranteed."]
                #[doc = ""]
                #[doc = " If migrating an existing pallet from storage value to config value,"]
                #[doc = " this should be set to same value or greater as in storage."]
                #[doc = ""]
                #[doc = " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`"]
                #[doc = " item `StakingLedger.claimed_rewards`. Setting this value lower than"]
                #[doc = " the existing value can lead to inconsistencies in the"]
                #[doc = " `StakingLedger` and will need to be handled properly in a migration."]
                #[doc = " The test `reducing_history_depth_abrupt` shows this effect."]
                pub fn history_depth(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Staking",
                        "HistoryDepth",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of sessions per era."]
                pub fn sessions_per_era(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Staking",
                        "SessionsPerEra",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of eras that staked funds must remain bonded for."]
                pub fn bonding_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Staking",
                        "BondingDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of eras that slashes are deferred by, after computation."]
                #[doc = ""]
                #[doc = " This should be less than the bonding duration. Set to 0 if slashes"]
                #[doc = " should be applied immediately, without opportunity for intervention."]
                pub fn slash_defer_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Staking",
                        "SlashDeferDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of nominators rewarded for each validator."]
                #[doc = ""]
                #[doc = " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can"]
                #[doc = " claim their reward. This used to limit the i/o cost for the nominator payout."]
                pub fn max_nominator_rewarded_per_validator(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Staking",
                        "MaxNominatorRewardedPerValidator",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of `unlocking` chunks a [`StakingLedger`] can"]
                #[doc = " have. Effectively determines how many unique eras a staker may be"]
                #[doc = " unbonding in."]
                #[doc = ""]
                #[doc = " Note: `MaxUnlockingChunks` is used as the upper bound for the"]
                #[doc = " `BoundedVec` item `StakingLedger.unlocking`. Setting this value"]
                #[doc = " lower than the existing value can lead to inconsistencies in the"]
                #[doc = " `StakingLedger` and will need to be handled properly in a runtime"]
                #[doc = " migration. The test `reducing_max_unlocking_chunks_abrupt` shows"]
                #[doc = " this effect."]
                pub fn max_unlocking_chunks(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Staking",
                        "MaxUnlockingChunks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the session pallet."]
        pub type Error = runtime_types::pallet_session::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_session::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetKeys {
                    pub keys: runtime_types::kitchensink_runtime::SessionKeys,
                    pub proof: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "set_keys";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PurgeKeys;
                impl ::subxt::blocks::StaticExtrinsic for PurgeKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "purge_keys";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_keys`]."]
                pub fn set_keys(
                    &self,
                    keys: runtime_types::kitchensink_runtime::SessionKeys,
                    proof: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SetKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "set_keys",
                        types::SetKeys { keys, proof },
                        [
                            73u8, 0u8, 125u8, 217u8, 2u8, 127u8, 71u8, 33u8, 26u8, 33u8, 36u8,
                            95u8, 227u8, 65u8, 80u8, 203u8, 252u8, 233u8, 226u8, 209u8, 73u8,
                            146u8, 184u8, 178u8, 250u8, 233u8, 7u8, 162u8, 225u8, 115u8, 116u8,
                            158u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::purge_keys`]."]
                pub fn purge_keys(&self) -> ::subxt::tx::Payload<types::PurgeKeys> {
                    ::subxt::tx::Payload::new_static(
                        "Session",
                        "purge_keys",
                        types::PurgeKeys {},
                        [
                            215u8, 204u8, 146u8, 236u8, 32u8, 78u8, 198u8, 79u8, 85u8, 214u8, 15u8,
                            151u8, 158u8, 31u8, 146u8, 119u8, 119u8, 204u8, 151u8, 169u8, 226u8,
                            67u8, 217u8, 39u8, 241u8, 245u8, 203u8, 240u8, 203u8, 172u8, 16u8,
                            209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New session has happened. Note that the argument is the session index, not the"]
            #[doc = "block number as the type might suggest."]
            pub struct NewSession {
                pub session_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current set of validators."]
                pub fn validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "Validators",
                        vec![],
                        [
                            50u8, 86u8, 154u8, 222u8, 249u8, 209u8, 156u8, 22u8, 155u8, 25u8,
                            133u8, 194u8, 210u8, 50u8, 38u8, 28u8, 139u8, 201u8, 90u8, 139u8,
                            115u8, 12u8, 12u8, 141u8, 4u8, 178u8, 201u8, 241u8, 223u8, 234u8, 6u8,
                            86u8,
                        ],
                    )
                }
                #[doc = " Current index of the session."]
                pub fn current_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "CurrentIndex",
                        vec![],
                        [
                            167u8, 151u8, 125u8, 150u8, 159u8, 21u8, 78u8, 217u8, 237u8, 183u8,
                            135u8, 65u8, 187u8, 114u8, 188u8, 206u8, 16u8, 32u8, 69u8, 208u8,
                            134u8, 159u8, 232u8, 224u8, 243u8, 27u8, 31u8, 166u8, 145u8, 44u8,
                            221u8, 230u8,
                        ],
                    )
                }
                #[doc = " True if the underlying economic identities or weighting behind the validators"]
                #[doc = " has changed in the queued validator set."]
                pub fn queued_changed(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedChanged",
                        vec![],
                        [
                            184u8, 137u8, 224u8, 137u8, 31u8, 236u8, 95u8, 164u8, 102u8, 225u8,
                            198u8, 227u8, 140u8, 37u8, 113u8, 57u8, 59u8, 4u8, 202u8, 102u8, 117u8,
                            36u8, 226u8, 64u8, 113u8, 141u8, 199u8, 111u8, 99u8, 144u8, 198u8,
                            153u8,
                        ],
                    )
                }
                #[doc = " The queued keys for the next session. When the next session begins, these keys"]
                #[doc = " will be used to determine the validator's session keys."]
                pub fn queued_keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::kitchensink_runtime::SessionKeys,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "QueuedKeys",
                        vec![],
                        [
                            253u8, 189u8, 69u8, 24u8, 103u8, 84u8, 10u8, 154u8, 177u8, 219u8,
                            105u8, 118u8, 254u8, 193u8, 177u8, 122u8, 59u8, 95u8, 81u8, 128u8,
                            252u8, 140u8, 164u8, 86u8, 8u8, 84u8, 199u8, 123u8, 212u8, 27u8, 68u8,
                            29u8,
                        ],
                    )
                }
                #[doc = " Indices of disabled validators."]
                #[doc = ""]
                #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
                #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
                #[doc = " a new set of identities."]
                pub fn disabled_validators(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "DisabledValidators",
                        vec![],
                        [
                            213u8, 19u8, 168u8, 234u8, 187u8, 200u8, 180u8, 97u8, 234u8, 189u8,
                            36u8, 233u8, 158u8, 184u8, 45u8, 35u8, 129u8, 213u8, 133u8, 8u8, 104u8,
                            183u8, 46u8, 68u8, 154u8, 240u8, 132u8, 22u8, 247u8, 11u8, 54u8, 221u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::SessionKeys,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            27u8, 24u8, 147u8, 49u8, 85u8, 69u8, 22u8, 49u8, 162u8, 194u8, 189u8,
                            109u8, 68u8, 151u8, 200u8, 43u8, 23u8, 251u8, 43u8, 102u8, 85u8, 236u8,
                            95u8, 195u8, 49u8, 237u8, 236u8, 208u8, 37u8, 5u8, 84u8, 45u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::SessionKeys,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "NextKeys",
                        Vec::new(),
                        [
                            27u8, 24u8, 147u8, 49u8, 85u8, 69u8, 22u8, 49u8, 162u8, 194u8, 189u8,
                            109u8, 68u8, 151u8, 200u8, 43u8, 23u8, 251u8, 43u8, 102u8, 85u8, 236u8,
                            95u8, 195u8, 49u8, 237u8, 236u8, 208u8, 37u8, 5u8, 84u8, 45u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::sp_core::crypto::KeyTypeId>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            177u8, 90u8, 148u8, 24u8, 251u8, 26u8, 65u8, 235u8, 46u8, 25u8, 109u8,
                            212u8, 208u8, 218u8, 58u8, 196u8, 29u8, 73u8, 145u8, 41u8, 30u8, 251u8,
                            185u8, 26u8, 205u8, 50u8, 32u8, 200u8, 206u8, 178u8, 255u8, 146u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Session",
                        "KeyOwner",
                        Vec::new(),
                        [
                            177u8, 90u8, 148u8, 24u8, 251u8, 26u8, 65u8, 235u8, 46u8, 25u8, 109u8,
                            212u8, 208u8, 218u8, 58u8, 196u8, 29u8, 73u8, 145u8, 41u8, 30u8, 251u8,
                            185u8, 26u8, 205u8, 50u8, 32u8, 200u8, 206u8, 178u8, 255u8, 146u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod democracy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_democracy::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_democracy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Second {
                    #[codec(compact)]
                    pub proposal: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Second {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "second";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    #[codec(compact)]
                    pub ref_index: ::core::primitive::u32,
                    pub vote:
                        runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EmergencyCancel {
                    pub ref_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for EmergencyCancel {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "emergency_cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExternalPropose {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExternalPropose {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExternalProposeMajority {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExternalProposeMajority {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose_majority";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExternalProposeDefault {
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExternalProposeDefault {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "external_propose_default";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FastTrack {
                    pub proposal_hash: ::subxt::utils::H256,
                    pub voting_period: ::core::primitive::u32,
                    pub delay: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for FastTrack {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "fast_track";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VetoExternal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for VetoExternal {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "veto_external";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelReferendum {
                    #[codec(compact)]
                    pub ref_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelReferendum {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "cancel_referendum";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegate {
                    pub to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub conviction: runtime_types::pallet_democracy::conviction::Conviction,
                    pub balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Delegate {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "delegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Undelegate;
                impl ::subxt::blocks::StaticExtrinsic for Undelegate {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "undelegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearPublicProposals;
                impl ::subxt::blocks::StaticExtrinsic for ClearPublicProposals {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "clear_public_proposals";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unlock {
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Unlock {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "unlock";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveVote {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveVote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "remove_vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveOtherVote {
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveOtherVote {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "remove_other_vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Blacklist {
                    pub proposal_hash: ::subxt::utils::H256,
                    pub maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Blacklist {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "blacklist";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelProposal {
                    #[codec(compact)]
                    pub prop_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelProposal {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "cancel_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                    pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Democracy";
                    const CALL: &'static str = "set_metadata";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::propose`]."]
                pub fn propose(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "propose",
                        types::Propose { proposal, value },
                        [
                            230u8, 248u8, 57u8, 131u8, 96u8, 178u8, 225u8, 150u8, 97u8, 77u8,
                            246u8, 143u8, 151u8, 204u8, 201u8, 252u8, 133u8, 53u8, 34u8, 27u8,
                            156u8, 2u8, 242u8, 170u8, 198u8, 157u8, 166u8, 84u8, 246u8, 86u8, 78u8,
                            128u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::second`]."]
                pub fn second(
                    &self,
                    proposal: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Second> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "second",
                        types::Second { proposal },
                        [
                            195u8, 55u8, 178u8, 55u8, 129u8, 64u8, 10u8, 131u8, 217u8, 79u8, 1u8,
                            187u8, 73u8, 126u8, 191u8, 221u8, 110u8, 10u8, 13u8, 65u8, 190u8,
                            107u8, 21u8, 236u8, 175u8, 130u8, 227u8, 179u8, 173u8, 39u8, 32u8,
                            147u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    ref_index: ::core::primitive::u32,
                    vote: runtime_types::pallet_democracy::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "vote",
                        types::Vote { ref_index, vote },
                        [
                            39u8, 113u8, 23u8, 175u8, 197u8, 225u8, 225u8, 129u8, 66u8, 50u8,
                            236u8, 220u8, 50u8, 49u8, 98u8, 163u8, 176u8, 96u8, 17u8, 91u8, 28u8,
                            187u8, 139u8, 148u8, 108u8, 110u8, 78u8, 253u8, 229u8, 3u8, 244u8,
                            126u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::emergency_cancel`]."]
                pub fn emergency_cancel(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::EmergencyCancel> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "emergency_cancel",
                        types::EmergencyCancel { ref_index },
                        [
                            82u8, 232u8, 19u8, 158u8, 88u8, 69u8, 96u8, 225u8, 106u8, 253u8, 6u8,
                            136u8, 87u8, 0u8, 68u8, 128u8, 122u8, 16u8, 107u8, 76u8, 209u8, 14u8,
                            230u8, 49u8, 228u8, 100u8, 187u8, 10u8, 76u8, 71u8, 197u8, 72u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::external_propose`]."]
                pub fn external_propose(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<types::ExternalPropose> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose",
                        types::ExternalPropose { proposal },
                        [
                            247u8, 47u8, 180u8, 40u8, 205u8, 53u8, 99u8, 158u8, 4u8, 45u8, 157u8,
                            247u8, 32u8, 117u8, 153u8, 170u8, 226u8, 250u8, 142u8, 38u8, 237u8,
                            238u8, 75u8, 245u8, 184u8, 27u8, 157u8, 255u8, 213u8, 163u8, 92u8,
                            251u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::external_propose_majority`]."]
                pub fn external_propose_majority(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<types::ExternalProposeMajority> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose_majority",
                        types::ExternalProposeMajority { proposal },
                        [
                            107u8, 81u8, 160u8, 130u8, 242u8, 208u8, 22u8, 70u8, 237u8, 235u8,
                            236u8, 60u8, 206u8, 172u8, 251u8, 138u8, 168u8, 124u8, 136u8, 95u8,
                            3u8, 184u8, 12u8, 55u8, 125u8, 233u8, 20u8, 148u8, 36u8, 189u8, 16u8,
                            245u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::external_propose_default`]."]
                pub fn external_propose_default(
                    &self,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                ) -> ::subxt::tx::Payload<types::ExternalProposeDefault> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "external_propose_default",
                        types::ExternalProposeDefault { proposal },
                        [
                            238u8, 247u8, 252u8, 35u8, 78u8, 158u8, 221u8, 87u8, 252u8, 98u8, 67u8,
                            44u8, 200u8, 206u8, 28u8, 19u8, 204u8, 13u8, 253u8, 133u8, 229u8,
                            195u8, 166u8, 218u8, 114u8, 69u8, 23u8, 169u8, 67u8, 168u8, 46u8,
                            176u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::fast_track`]."]
                pub fn fast_track(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    voting_period: ::core::primitive::u32,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::FastTrack> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "fast_track",
                        types::FastTrack {
                            proposal_hash,
                            voting_period,
                            delay,
                        },
                        [
                            147u8, 226u8, 166u8, 105u8, 149u8, 171u8, 86u8, 165u8, 168u8, 78u8,
                            233u8, 182u8, 118u8, 36u8, 82u8, 155u8, 209u8, 55u8, 153u8, 141u8,
                            120u8, 223u8, 46u8, 170u8, 48u8, 94u8, 32u8, 144u8, 84u8, 203u8, 68u8,
                            62u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::veto_external`]."]
                pub fn veto_external(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::VetoExternal> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "veto_external",
                        types::VetoExternal { proposal_hash },
                        [
                            121u8, 217u8, 249u8, 134u8, 45u8, 19u8, 126u8, 166u8, 218u8, 223u8,
                            165u8, 124u8, 162u8, 59u8, 56u8, 200u8, 227u8, 125u8, 23u8, 133u8,
                            196u8, 93u8, 210u8, 15u8, 39u8, 26u8, 58u8, 236u8, 9u8, 101u8, 202u8,
                            168u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_referendum`]."]
                pub fn cancel_referendum(
                    &self,
                    ref_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelReferendum> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "cancel_referendum",
                        types::CancelReferendum { ref_index },
                        [
                            149u8, 120u8, 70u8, 20u8, 126u8, 21u8, 30u8, 33u8, 82u8, 124u8, 229u8,
                            179u8, 169u8, 243u8, 173u8, 146u8, 140u8, 22u8, 124u8, 154u8, 228u8,
                            117u8, 109u8, 88u8, 11u8, 100u8, 235u8, 243u8, 118u8, 99u8, 250u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::delegate`]."]
                pub fn delegate(
                    &self,
                    to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    conviction: runtime_types::pallet_democracy::conviction::Conviction,
                    balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Delegate> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "delegate",
                        types::Delegate {
                            to,
                            conviction,
                            balance,
                        },
                        [
                            252u8, 37u8, 255u8, 84u8, 153u8, 112u8, 84u8, 10u8, 131u8, 85u8, 6u8,
                            204u8, 85u8, 241u8, 104u8, 155u8, 219u8, 222u8, 30u8, 7u8, 245u8, 12u8,
                            101u8, 120u8, 9u8, 156u8, 65u8, 218u8, 110u8, 244u8, 24u8, 251u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::undelegate`]."]
                pub fn undelegate(&self) -> ::subxt::tx::Payload<types::Undelegate> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "undelegate",
                        types::Undelegate {},
                        [
                            225u8, 156u8, 102u8, 1u8, 172u8, 145u8, 88u8, 12u8, 89u8, 32u8, 51u8,
                            83u8, 25u8, 149u8, 132u8, 203u8, 246u8, 98u8, 155u8, 36u8, 165u8,
                            206u8, 233u8, 169u8, 91u8, 85u8, 105u8, 67u8, 46u8, 134u8, 244u8,
                            250u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_public_proposals`]."]
                pub fn clear_public_proposals(
                    &self,
                ) -> ::subxt::tx::Payload<types::ClearPublicProposals> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "clear_public_proposals",
                        types::ClearPublicProposals {},
                        [
                            116u8, 160u8, 246u8, 216u8, 23u8, 188u8, 144u8, 63u8, 97u8, 198u8,
                            11u8, 243u8, 165u8, 84u8, 159u8, 153u8, 235u8, 169u8, 166u8, 15u8,
                            23u8, 116u8, 30u8, 56u8, 133u8, 31u8, 158u8, 114u8, 158u8, 86u8, 106u8,
                            93u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unlock`]."]
                pub fn unlock(
                    &self,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Unlock> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "unlock",
                        types::Unlock { target },
                        [
                            134u8, 220u8, 108u8, 243u8, 205u8, 162u8, 111u8, 77u8, 224u8, 62u8,
                            27u8, 214u8, 97u8, 83u8, 212u8, 96u8, 68u8, 123u8, 160u8, 70u8, 127u8,
                            255u8, 94u8, 57u8, 224u8, 165u8, 250u8, 65u8, 13u8, 122u8, 101u8, 56u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_vote`]."]
                pub fn remove_vote(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveVote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "remove_vote",
                        types::RemoveVote { index },
                        [
                            98u8, 146u8, 215u8, 63u8, 222u8, 70u8, 61u8, 186u8, 90u8, 34u8, 63u8,
                            25u8, 195u8, 119u8, 228u8, 189u8, 38u8, 163u8, 58u8, 210u8, 216u8,
                            156u8, 20u8, 204u8, 136u8, 192u8, 33u8, 210u8, 124u8, 65u8, 153u8,
                            105u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_other_vote`]."]
                pub fn remove_other_vote(
                    &self,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveOtherVote> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "remove_other_vote",
                        types::RemoveOtherVote { target, index },
                        [
                            92u8, 152u8, 49u8, 134u8, 235u8, 186u8, 109u8, 234u8, 16u8, 129u8,
                            255u8, 88u8, 231u8, 177u8, 197u8, 125u8, 105u8, 228u8, 69u8, 38u8,
                            231u8, 178u8, 75u8, 197u8, 113u8, 213u8, 157u8, 5u8, 68u8, 75u8, 155u8,
                            47u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::blacklist`]."]
                pub fn blacklist(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::Blacklist> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "blacklist",
                        types::Blacklist {
                            proposal_hash,
                            maybe_ref_index,
                        },
                        [
                            227u8, 200u8, 88u8, 154u8, 134u8, 121u8, 131u8, 177u8, 94u8, 119u8,
                            12u8, 129u8, 150u8, 59u8, 108u8, 103u8, 109u8, 55u8, 220u8, 211u8,
                            250u8, 103u8, 160u8, 170u8, 63u8, 142u8, 112u8, 244u8, 29u8, 238u8,
                            101u8, 24u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_proposal`]."]
                pub fn cancel_proposal(
                    &self,
                    prop_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "cancel_proposal",
                        types::CancelProposal { prop_index },
                        [
                            213u8, 5u8, 215u8, 209u8, 71u8, 229u8, 66u8, 38u8, 171u8, 38u8, 14u8,
                            103u8, 248u8, 176u8, 217u8, 143u8, 234u8, 89u8, 110u8, 250u8, 3u8,
                            190u8, 151u8, 74u8, 55u8, 58u8, 249u8, 138u8, 25u8, 191u8, 55u8, 142u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    owner: runtime_types::pallet_democracy::types::MetadataOwner,
                    maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Democracy",
                        "set_metadata",
                        types::SetMetadata { owner, maybe_hash },
                        [
                            192u8, 174u8, 122u8, 229u8, 149u8, 49u8, 155u8, 209u8, 226u8, 255u8,
                            46u8, 43u8, 77u8, 164u8, 226u8, 254u8, 207u8, 110u8, 222u8, 131u8,
                            220u8, 53u8, 95u8, 170u8, 128u8, 212u8, 236u8, 168u8, 156u8, 29u8,
                            151u8, 40u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_democracy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion has been proposed by a public account."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A public proposal has been tabled for referendum vote."]
            pub struct Tabled {
                pub proposal_index: ::core::primitive::u32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Tabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Tabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An external proposal has been tabled."]
            pub struct ExternalTabled;
            impl ::subxt::events::StaticEvent for ExternalTabled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ExternalTabled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has begun."]
            pub struct Started {
                pub ref_index: ::core::primitive::u32,
                pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
            }
            impl ::subxt::events::StaticEvent for Started {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Started";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal has been approved by referendum."]
            pub struct Passed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Passed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Passed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct NotPassed {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NotPassed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "NotPassed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub ref_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has delegated their vote to another account."]
            pub struct Delegated {
                pub who: ::subxt::utils::AccountId32,
                pub target: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Delegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has cancelled a previous delegation operation."]
            pub struct Undelegated {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Undelegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An external proposal has been vetoed."]
            pub struct Vetoed {
                pub who: ::subxt::utils::AccountId32,
                pub proposal_hash: ::subxt::utils::H256,
                pub until: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Vetoed {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Vetoed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal_hash has been blacklisted permanently."]
            pub struct Blacklisted {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Blacklisted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Blacklisted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has voted in a referendum"]
            pub struct Voted {
                pub voter: ::subxt::utils::AccountId32,
                pub ref_index: ::core::primitive::u32,
                pub vote:
                    runtime_types::pallet_democracy::vote::AccountVote<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has secconded a proposal"]
            pub struct Seconded {
                pub seconder: ::subxt::utils::AccountId32,
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Seconded {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "Seconded";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal got canceled."]
            pub struct ProposalCanceled {
                pub prop_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProposalCanceled {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "ProposalCanceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a proposal or a referendum has been set."]
            pub struct MetadataSet {
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a proposal or a referendum has been cleared."]
            pub struct MetadataCleared {
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been transferred to new owner."]
            pub struct MetadataTransferred {
                pub prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub owner: runtime_types::pallet_democracy::types::MetadataOwner,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataTransferred {
                const PALLET: &'static str = "Democracy";
                const EVENT: &'static str = "MetadataTransferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The number of (public) proposals that have been made so far."]
                pub fn public_prop_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "PublicPropCount",
                        vec![],
                        [
                            51u8, 175u8, 184u8, 94u8, 91u8, 212u8, 100u8, 108u8, 127u8, 162u8,
                            233u8, 137u8, 12u8, 209u8, 29u8, 130u8, 125u8, 179u8, 208u8, 160u8,
                            173u8, 149u8, 12u8, 111u8, 1u8, 82u8, 196u8, 137u8, 51u8, 204u8, 153u8,
                            198u8,
                        ],
                    )
                }
                #[doc = " The public proposals. Unsorted. The second item is the proposal."]
                pub fn public_props(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        ::subxt::utils::AccountId32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "PublicProps",
                        vec![],
                        [
                            156u8, 21u8, 84u8, 229u8, 193u8, 34u8, 28u8, 230u8, 11u8, 108u8, 2u8,
                            84u8, 188u8, 11u8, 25u8, 55u8, 130u8, 80u8, 164u8, 239u8, 150u8, 77u8,
                            4u8, 246u8, 174u8, 16u8, 232u8, 23u8, 9u8, 194u8, 177u8, 73u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "DepositOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            115u8, 12u8, 250u8, 191u8, 201u8, 165u8, 90u8, 140u8, 101u8, 47u8,
                            46u8, 3u8, 78u8, 30u8, 180u8, 22u8, 28u8, 154u8, 36u8, 99u8, 255u8,
                            84u8, 33u8, 21u8, 65u8, 110u8, 52u8, 245u8, 19u8, 6u8, 104u8, 167u8,
                        ],
                    )
                }
                #[doc = " Those who have locked a deposit."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: Safe, as increasing integer keys are safe."]
                pub fn deposit_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "DepositOf",
                        Vec::new(),
                        [
                            115u8, 12u8, 250u8, 191u8, 201u8, 165u8, 90u8, 140u8, 101u8, 47u8,
                            46u8, 3u8, 78u8, 30u8, 180u8, 22u8, 28u8, 154u8, 36u8, 99u8, 255u8,
                            84u8, 33u8, 21u8, 65u8, 110u8, 52u8, 245u8, 19u8, 6u8, 104u8, 167u8,
                        ],
                    )
                }
                #[doc = " The next free referendum index, aka the number of referenda started so far."]
                pub fn referendum_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumCount",
                        vec![],
                        [
                            64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
                            139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
                            198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
                            67u8,
                        ],
                    )
                }
                #[doc = " The lowest referendum index representing an unbaked referendum. Equal to"]
                #[doc = " `ReferendumCount` if there isn't a unbaked referendum."]
                pub fn lowest_unbaked(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "LowestUnbaked",
                        vec![],
                        [
                            237u8, 222u8, 144u8, 214u8, 0u8, 186u8, 81u8, 176u8, 51u8, 14u8, 204u8,
                            184u8, 147u8, 97u8, 187u8, 84u8, 40u8, 8u8, 86u8, 241u8, 16u8, 157u8,
                            202u8, 44u8, 185u8, 111u8, 70u8, 114u8, 40u8, 135u8, 1u8, 155u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::types::ReferendumInfo<
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            250u8, 201u8, 144u8, 220u8, 13u8, 14u8, 69u8, 171u8, 240u8, 119u8,
                            158u8, 200u8, 86u8, 77u8, 115u8, 156u8, 156u8, 101u8, 215u8, 233u8,
                            165u8, 96u8, 62u8, 201u8, 83u8, 203u8, 58u8, 67u8, 49u8, 174u8, 86u8,
                            242u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as indexes are not under an attacker’s control."]
                pub fn referendum_info_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::types::ReferendumInfo<
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "ReferendumInfoOf",
                        Vec::new(),
                        [
                            250u8, 201u8, 144u8, 220u8, 13u8, 14u8, 69u8, 171u8, 240u8, 119u8,
                            158u8, 200u8, 86u8, 77u8, 115u8, 156u8, 156u8, 101u8, 215u8, 233u8,
                            165u8, 96u8, 62u8, 201u8, 83u8, 203u8, 58u8, 67u8, 49u8, 174u8, 86u8,
                            242u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::vote::Voting<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "VotingOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            170u8, 234u8, 179u8, 190u8, 153u8, 172u8, 83u8, 105u8, 57u8, 88u8,
                            183u8, 54u8, 172u8, 149u8, 222u8, 240u8, 128u8, 46u8, 25u8, 10u8,
                            205u8, 69u8, 164u8, 173u8, 55u8, 188u8, 196u8, 51u8, 129u8, 206u8,
                            87u8, 249u8,
                        ],
                    )
                }
                #[doc = " All votes for a particular voter. We store the balance for the number of votes that we"]
                #[doc = " have recorded. The second item is the total amount of delegations, that will be added."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."]
                pub fn voting_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_democracy::vote::Voting<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "VotingOf",
                        Vec::new(),
                        [
                            170u8, 234u8, 179u8, 190u8, 153u8, 172u8, 83u8, 105u8, 57u8, 88u8,
                            183u8, 54u8, 172u8, 149u8, 222u8, 240u8, 128u8, 46u8, 25u8, 10u8,
                            205u8, 69u8, 164u8, 173u8, 55u8, 188u8, 196u8, 51u8, 129u8, 206u8,
                            87u8, 249u8,
                        ],
                    )
                }
                #[doc = " True if the last referendum tabled was submitted externally. False if it was a public"]
                #[doc = " proposal."]
                pub fn last_tabled_was_external(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "LastTabledWasExternal",
                        vec![],
                        [
                            162u8, 201u8, 72u8, 9u8, 78u8, 49u8, 72u8, 62u8, 240u8, 69u8, 20u8,
                            135u8, 26u8, 59u8, 71u8, 46u8, 19u8, 25u8, 195u8, 11u8, 99u8, 31u8,
                            104u8, 4u8, 24u8, 129u8, 47u8, 69u8, 219u8, 178u8, 104u8, 190u8,
                        ],
                    )
                }
                #[doc = " The referendum to be tabled whenever it would be valid to table an external proposal."]
                #[doc = " This happens when a referendum needs to be tabled and one of two conditions are met:"]
                #[doc = " - `LastTabledWasExternal` is `false`; or"]
                #[doc = " - `PublicProps` is empty."]
                pub fn next_external(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "NextExternal",
                        vec![],
                        [
                            130u8, 253u8, 139u8, 228u8, 253u8, 181u8, 172u8, 14u8, 214u8, 128u8,
                            17u8, 195u8, 104u8, 64u8, 64u8, 132u8, 40u8, 212u8, 80u8, 47u8, 225u8,
                            224u8, 9u8, 186u8, 80u8, 118u8, 120u8, 174u8, 174u8, 20u8, 150u8, 13u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Blacklist",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            238u8, 119u8, 98u8, 220u8, 11u8, 209u8, 90u8, 9u8, 69u8, 51u8, 59u8,
                            177u8, 169u8, 113u8, 138u8, 13u8, 134u8, 14u8, 184u8, 6u8, 80u8, 182u8,
                            154u8, 10u8, 100u8, 71u8, 117u8, 2u8, 150u8, 170u8, 154u8, 255u8,
                        ],
                    )
                }
                #[doc = " A record of who vetoed what. Maps proposal hash to a possible existent block number"]
                #[doc = " (until when it may not be resubmitted) and who vetoed it."]
                pub fn blacklist_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Blacklist",
                        Vec::new(),
                        [
                            238u8, 119u8, 98u8, 220u8, 11u8, 209u8, 90u8, 9u8, 69u8, 51u8, 59u8,
                            177u8, 169u8, 113u8, 138u8, 13u8, 134u8, 14u8, 184u8, 6u8, 80u8, 182u8,
                            154u8, 10u8, 100u8, 71u8, 117u8, 2u8, 150u8, 170u8, 154u8, 255u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Cancellations",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
                            232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
                            149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
                            186u8, 244u8,
                        ],
                    )
                }
                #[doc = " Record of all proposals that have been subject to emergency cancellation."]
                pub fn cancellations_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "Cancellations",
                        Vec::new(),
                        [
                            80u8, 190u8, 98u8, 105u8, 129u8, 25u8, 167u8, 180u8, 74u8, 128u8,
                            232u8, 29u8, 193u8, 209u8, 185u8, 60u8, 18u8, 180u8, 59u8, 192u8,
                            149u8, 13u8, 123u8, 232u8, 34u8, 208u8, 48u8, 104u8, 35u8, 181u8,
                            186u8, 244u8,
                        ],
                    )
                }
                #[doc = " General information concerning any proposal or referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::pallet_democracy::types::MetadataOwner,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "MetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            241u8, 106u8, 118u8, 66u8, 219u8, 192u8, 185u8, 117u8, 144u8, 174u8,
                            171u8, 207u8, 181u8, 32u8, 133u8, 127u8, 160u8, 218u8, 113u8, 153u8,
                            160u8, 7u8, 72u8, 58u8, 187u8, 96u8, 51u8, 236u8, 64u8, 80u8, 123u8,
                            254u8,
                        ],
                    )
                }
                #[doc = " General information concerning any proposal or referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Democracy",
                        "MetadataOf",
                        Vec::new(),
                        [
                            241u8, 106u8, 118u8, 66u8, 219u8, 192u8, 185u8, 117u8, 144u8, 174u8,
                            171u8, 207u8, 181u8, 32u8, 133u8, 127u8, 160u8, 218u8, 113u8, 153u8,
                            160u8, 7u8, 72u8, 58u8, 187u8, 96u8, 51u8, 236u8, 64u8, 80u8, 123u8,
                            254u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The period between a proposal being approved and enacted."]
                #[doc = ""]
                #[doc = " It should generally be a little more than the unstake period to ensure that"]
                #[doc = " voting stakers have an opportunity to remove themselves from the system in the case"]
                #[doc = " where they are on the losing side of a vote."]
                pub fn enactment_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "EnactmentPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) new public referenda are launched."]
                pub fn launch_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "LaunchPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How often (in blocks) to check for new votes."]
                pub fn voting_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "VotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum period of vote locking."]
                #[doc = ""]
                #[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
                #[doc = " those successful voters are locked into the consequences that their votes entail."]
                pub fn vote_locking_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "VoteLockingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn minimum_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MinimumDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Indicator for whether an emergency origin is even allowed to happen. Some chains may"]
                #[doc = " want to set this permanently to `false`, others may want to condition it on things such"]
                #[doc = " as an upgrade having happened recently."]
                pub fn instant_allowed(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::bool> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "InstantAllowed",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                #[doc = " Minimum voting period allowed for a fast-track referendum."]
                pub fn fast_track_voting_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "FastTrackVotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Period in blocks where an external proposal may not be re-submitted after being vetoed."]
                pub fn cooloff_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "CooloffPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of votes for an account."]
                #[doc = ""]
                #[doc = " Also used to compute weight, an overly big value can"]
                #[doc = " lead to extrinsic with very big weight: see `delegate` for instance."]
                pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of public proposals that can exist at any time."]
                pub fn max_proposals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxProposals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of deposits a public proposal may have at any time."]
                pub fn max_deposits(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxDeposits",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of items which can be blacklisted."]
                pub fn max_blacklisted(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Democracy",
                        "MaxBlacklisted",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod council {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_collective::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_collective::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    pub old_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_members`]."]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            141u8, 113u8, 137u8, 46u8, 75u8, 22u8, 143u8, 204u8, 50u8, 24u8, 137u8,
                            25u8, 226u8, 166u8, 121u8, 161u8, 54u8, 144u8, 12u8, 145u8, 157u8,
                            153u8, 47u8, 144u8, 94u8, 34u8, 217u8, 115u8, 125u8, 152u8, 110u8,
                            28u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::execute`]."]
                pub fn execute(
                    &self,
                    proposal: runtime_types::kitchensink_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            94u8, 13u8, 108u8, 185u8, 65u8, 92u8, 34u8, 235u8, 159u8, 28u8, 102u8,
                            243u8, 68u8, 73u8, 253u8, 150u8, 173u8, 179u8, 189u8, 177u8, 137u8,
                            175u8, 100u8, 124u8, 18u8, 137u8, 146u8, 55u8, 16u8, 135u8, 197u8,
                            49u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::propose`]."]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::kitchensink_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            161u8, 6u8, 22u8, 64u8, 25u8, 139u8, 127u8, 194u8, 57u8, 203u8, 95u8,
                            134u8, 53u8, 214u8, 113u8, 194u8, 149u8, 5u8, 221u8, 198u8, 32u8, 90u8,
                            249u8, 40u8, 96u8, 123u8, 178u8, 43u8, 80u8, 9u8, 32u8, 71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::disapprove_proposal`]."]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close`]."]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "Council",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            189u8, 149u8, 125u8, 63u8, 39u8, 201u8, 247u8, 4u8, 220u8, 74u8, 78u8,
                            14u8, 113u8, 163u8, 1u8, 159u8, 81u8, 248u8, 141u8, 111u8, 34u8, 243u8,
                            67u8, 70u8, 60u8, 92u8, 47u8, 70u8, 66u8, 246u8, 236u8, 153u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            215u8, 93u8, 134u8, 156u8, 174u8, 44u8, 42u8, 149u8, 212u8, 30u8, 9u8,
                            38u8, 19u8, 125u8, 94u8, 85u8, 247u8, 38u8, 124u8, 229u8, 210u8, 75u8,
                            2u8, 241u8, 252u8, 242u8, 186u8, 190u8, 41u8, 224u8, 62u8, 113u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalOf",
                        Vec::new(),
                        [
                            215u8, 93u8, 134u8, 156u8, 174u8, 44u8, 42u8, 149u8, 212u8, 30u8, 9u8,
                            38u8, 19u8, 125u8, 94u8, 85u8, 247u8, 38u8, 124u8, 229u8, 210u8, 75u8,
                            2u8, 241u8, 252u8, 242u8, 186u8, 190u8, 41u8, 224u8, 62u8, 113u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            56u8, 192u8, 111u8, 180u8, 253u8, 5u8, 232u8, 126u8, 177u8, 48u8,
                            135u8, 39u8, 89u8, 71u8, 62u8, 239u8, 216u8, 17u8, 64u8, 82u8, 130u8,
                            236u8, 96u8, 89u8, 167u8, 2u8, 118u8, 113u8, 63u8, 176u8, 124u8, 73u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Voting",
                        Vec::new(),
                        [
                            56u8, 192u8, 111u8, 180u8, 253u8, 5u8, 232u8, 126u8, 177u8, 48u8,
                            135u8, 39u8, 89u8, 71u8, 62u8, 239u8, 216u8, 17u8, 64u8, 82u8, 130u8,
                            236u8, 96u8, 89u8, 167u8, 2u8, 118u8, 113u8, 63u8, 176u8, 124u8, 73u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Members",
                        vec![],
                        [
                            16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
                            81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
                            90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Council",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Council",
                        "MaxProposalWeight",
                        [
                            222u8, 183u8, 203u8, 169u8, 31u8, 134u8, 28u8, 12u8, 47u8, 140u8, 71u8,
                            74u8, 61u8, 55u8, 71u8, 236u8, 215u8, 83u8, 28u8, 70u8, 45u8, 128u8,
                            184u8, 57u8, 101u8, 83u8, 42u8, 165u8, 34u8, 155u8, 64u8, 145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod technical_committee {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_collective::pallet::Error2;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_collective::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    pub old_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "TechnicalCommittee";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "TechnicalCommittee";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "TechnicalCommittee";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "TechnicalCommittee";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "TechnicalCommittee";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "TechnicalCommittee";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_members`]."]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            141u8, 113u8, 137u8, 46u8, 75u8, 22u8, 143u8, 204u8, 50u8, 24u8, 137u8,
                            25u8, 226u8, 166u8, 121u8, 161u8, 54u8, 144u8, 12u8, 145u8, 157u8,
                            153u8, 47u8, 144u8, 94u8, 34u8, 217u8, 115u8, 125u8, 152u8, 110u8,
                            28u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::execute`]."]
                pub fn execute(
                    &self,
                    proposal: runtime_types::kitchensink_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            94u8, 13u8, 108u8, 185u8, 65u8, 92u8, 34u8, 235u8, 159u8, 28u8, 102u8,
                            243u8, 68u8, 73u8, 253u8, 150u8, 173u8, 179u8, 189u8, 177u8, 137u8,
                            175u8, 100u8, 124u8, 18u8, 137u8, 146u8, 55u8, 16u8, 135u8, 197u8,
                            49u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::propose`]."]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::kitchensink_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            161u8, 6u8, 22u8, 64u8, 25u8, 139u8, 127u8, 194u8, 57u8, 203u8, 95u8,
                            134u8, 53u8, 214u8, 113u8, 194u8, 149u8, 5u8, 221u8, 198u8, 32u8, 90u8,
                            249u8, 40u8, 96u8, 123u8, 178u8, 43u8, 80u8, 9u8, 32u8, 71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::disapprove_proposal`]."]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close`]."]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalCommittee",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            189u8, 149u8, 125u8, 63u8, 39u8, 201u8, 247u8, 4u8, 220u8, 74u8, 78u8,
                            14u8, 113u8, 163u8, 1u8, 159u8, 81u8, 248u8, 141u8, 111u8, 34u8, 243u8,
                            67u8, 70u8, 60u8, 92u8, 47u8, 70u8, 66u8, 246u8, 236u8, 153u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_collective::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "TechnicalCommittee";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            215u8, 93u8, 134u8, 156u8, 174u8, 44u8, 42u8, 149u8, 212u8, 30u8, 9u8,
                            38u8, 19u8, 125u8, 94u8, 85u8, 247u8, 38u8, 124u8, 229u8, 210u8, 75u8,
                            2u8, 241u8, 252u8, 242u8, 186u8, 190u8, 41u8, 224u8, 62u8, 113u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "ProposalOf",
                        Vec::new(),
                        [
                            215u8, 93u8, 134u8, 156u8, 174u8, 44u8, 42u8, 149u8, 212u8, 30u8, 9u8,
                            38u8, 19u8, 125u8, 94u8, 85u8, 247u8, 38u8, 124u8, 229u8, 210u8, 75u8,
                            2u8, 241u8, 252u8, 242u8, 186u8, 190u8, 41u8, 224u8, 62u8, 113u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            56u8, 192u8, 111u8, 180u8, 253u8, 5u8, 232u8, 126u8, 177u8, 48u8,
                            135u8, 39u8, 89u8, 71u8, 62u8, 239u8, 216u8, 17u8, 64u8, 82u8, 130u8,
                            236u8, 96u8, 89u8, 167u8, 2u8, 118u8, 113u8, 63u8, 176u8, 124u8, 73u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Voting",
                        Vec::new(),
                        [
                            56u8, 192u8, 111u8, 180u8, 253u8, 5u8, 232u8, 126u8, 177u8, 48u8,
                            135u8, 39u8, 89u8, 71u8, 62u8, 239u8, 216u8, 17u8, 64u8, 82u8, 130u8,
                            236u8, 96u8, 89u8, 167u8, 2u8, 118u8, 113u8, 63u8, 176u8, 124u8, 73u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Members",
                        vec![],
                        [
                            16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
                            81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
                            90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalCommittee",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "TechnicalCommittee",
                        "MaxProposalWeight",
                        [
                            222u8, 183u8, 203u8, 169u8, 31u8, 134u8, 28u8, 12u8, 47u8, 140u8, 71u8,
                            74u8, 61u8, 55u8, 71u8, 236u8, 215u8, 83u8, 28u8, 70u8, 45u8, 128u8,
                            184u8, 57u8, 101u8, 83u8, 42u8, 165u8, 34u8, 155u8, 64u8, 145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod elections {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_elections_phragmen::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_elections_phragmen::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Elections";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveVoter;
                impl ::subxt::blocks::StaticExtrinsic for RemoveVoter {
                    const PALLET: &'static str = "Elections";
                    const CALL: &'static str = "remove_voter";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SubmitCandidacy {
                    #[codec(compact)]
                    pub candidate_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SubmitCandidacy {
                    const PALLET: &'static str = "Elections";
                    const CALL: &'static str = "submit_candidacy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RenounceCandidacy {
                    pub renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
                }
                impl ::subxt::blocks::StaticExtrinsic for RenounceCandidacy {
                    const PALLET: &'static str = "Elections";
                    const CALL: &'static str = "renounce_candidacy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub slash_bond: ::core::primitive::bool,
                    pub rerun_election: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
                    const PALLET: &'static str = "Elections";
                    const CALL: &'static str = "remove_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CleanDefunctVoters {
                    pub num_voters: ::core::primitive::u32,
                    pub num_defunct: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CleanDefunctVoters {
                    const PALLET: &'static str = "Elections";
                    const CALL: &'static str = "clean_defunct_voters";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Elections",
                        "vote",
                        types::Vote { votes, value },
                        [
                            229u8, 163u8, 1u8, 49u8, 26u8, 130u8, 7u8, 228u8, 34u8, 80u8, 17u8,
                            125u8, 32u8, 180u8, 174u8, 69u8, 17u8, 171u8, 163u8, 54u8, 42u8, 139u8,
                            201u8, 205u8, 196u8, 18u8, 16u8, 211u8, 252u8, 64u8, 73u8, 5u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_voter`]."]
                pub fn remove_voter(&self) -> ::subxt::tx::Payload<types::RemoveVoter> {
                    ::subxt::tx::Payload::new_static(
                        "Elections",
                        "remove_voter",
                        types::RemoveVoter {},
                        [
                            89u8, 43u8, 70u8, 117u8, 76u8, 84u8, 230u8, 114u8, 229u8, 91u8, 75u8,
                            213u8, 47u8, 143u8, 233u8, 47u8, 108u8, 120u8, 171u8, 167u8, 14u8,
                            62u8, 52u8, 20u8, 227u8, 106u8, 249u8, 239u8, 33u8, 115u8, 155u8,
                            106u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::submit_candidacy`]."]
                pub fn submit_candidacy(
                    &self,
                    candidate_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SubmitCandidacy> {
                    ::subxt::tx::Payload::new_static(
                        "Elections",
                        "submit_candidacy",
                        types::SubmitCandidacy { candidate_count },
                        [
                            229u8, 169u8, 247u8, 102u8, 33u8, 7u8, 9u8, 125u8, 190u8, 179u8, 241u8,
                            220u8, 205u8, 242u8, 168u8, 112u8, 197u8, 169u8, 135u8, 133u8, 102u8,
                            173u8, 168u8, 203u8, 17u8, 135u8, 224u8, 145u8, 101u8, 204u8, 253u8,
                            4u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::renounce_candidacy`]."]
                pub fn renounce_candidacy(
                    &self,
                    renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
                ) -> ::subxt::tx::Payload<types::RenounceCandidacy> {
                    ::subxt::tx::Payload::new_static(
                        "Elections",
                        "renounce_candidacy",
                        types::RenounceCandidacy { renouncing },
                        [
                            230u8, 140u8, 205u8, 240u8, 110u8, 247u8, 242u8, 185u8, 228u8, 135u8,
                            243u8, 73u8, 71u8, 200u8, 88u8, 134u8, 132u8, 174u8, 190u8, 251u8,
                            81u8, 85u8, 174u8, 230u8, 94u8, 97u8, 96u8, 230u8, 15u8, 204u8, 247u8,
                            214u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_member`]."]
                pub fn remove_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    slash_bond: ::core::primitive::bool,
                    rerun_election: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::RemoveMember> {
                    ::subxt::tx::Payload::new_static(
                        "Elections",
                        "remove_member",
                        types::RemoveMember {
                            who,
                            slash_bond,
                            rerun_election,
                        },
                        [
                            121u8, 189u8, 213u8, 154u8, 126u8, 196u8, 140u8, 208u8, 152u8, 191u8,
                            224u8, 160u8, 42u8, 2u8, 243u8, 37u8, 120u8, 73u8, 160u8, 5u8, 243u8,
                            110u8, 167u8, 242u8, 22u8, 100u8, 93u8, 197u8, 209u8, 85u8, 201u8,
                            153u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clean_defunct_voters`]."]
                pub fn clean_defunct_voters(
                    &self,
                    num_voters: ::core::primitive::u32,
                    num_defunct: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CleanDefunctVoters> {
                    ::subxt::tx::Payload::new_static(
                        "Elections",
                        "clean_defunct_voters",
                        types::CleanDefunctVoters {
                            num_voters,
                            num_defunct,
                        },
                        [
                            103u8, 241u8, 66u8, 156u8, 118u8, 36u8, 101u8, 148u8, 76u8, 162u8,
                            240u8, 31u8, 114u8, 10u8, 247u8, 68u8, 163u8, 187u8, 117u8, 47u8, 14u8,
                            16u8, 103u8, 211u8, 243u8, 44u8, 235u8, 200u8, 127u8, 113u8, 98u8,
                            83u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_elections_phragmen::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
            #[doc = "the election, not that enough have has been elected. The inner value must be examined"]
            #[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
            #[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
            #[doc = "begin with."]
            pub struct NewTerm {
                pub new_members:
                    ::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
            }
            impl ::subxt::events::StaticEvent for NewTerm {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "NewTerm";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "No (or not enough) candidates existed for this round. This is different from"]
            #[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
            pub struct EmptyTerm;
            impl ::subxt::events::StaticEvent for EmptyTerm {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "EmptyTerm";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Internal error happened while trying to perform election."]
            pub struct ElectionError;
            impl ::subxt::events::StaticEvent for ElectionError {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "ElectionError";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
            #[doc = "`EmptyTerm`."]
            pub struct MemberKicked {
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberKicked {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "MemberKicked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Someone has renounced their candidacy."]
            pub struct Renounced {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Renounced {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "Renounced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
            #[doc = "runner-up."]
            #[doc = ""]
            #[doc = "Note that old members and runners-up are also candidates."]
            pub struct CandidateSlashed {
                pub candidate: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for CandidateSlashed {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "CandidateSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
            pub struct SeatHolderSlashed {
                pub seat_holder: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SeatHolderSlashed {
                const PALLET: &'static str = "Elections";
                const EVENT: &'static str = "SeatHolderSlashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current elected members."]
                #[doc = ""]
                #[doc = " Invariant: Always sorted based on account id."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_elections_phragmen::SeatHolder<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Elections",
                        "Members",
                        vec![],
                        [
                            210u8, 86u8, 209u8, 114u8, 170u8, 238u8, 106u8, 102u8, 0u8, 140u8,
                            113u8, 238u8, 36u8, 115u8, 162u8, 167u8, 194u8, 3u8, 57u8, 171u8, 41u8,
                            219u8, 39u8, 120u8, 192u8, 208u8, 155u8, 163u8, 26u8, 209u8, 42u8,
                            73u8,
                        ],
                    )
                }
                #[doc = " The current reserved runners-up."]
                #[doc = ""]
                #[doc = " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the"]
                #[doc = " last (i.e. _best_) runner-up will be replaced."]
                pub fn runners_up(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<
                        runtime_types::pallet_elections_phragmen::SeatHolder<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Elections",
                        "RunnersUp",
                        vec![],
                        [
                            102u8, 255u8, 105u8, 141u8, 24u8, 140u8, 180u8, 249u8, 19u8, 52u8,
                            144u8, 157u8, 139u8, 156u8, 5u8, 30u8, 148u8, 36u8, 67u8, 25u8, 238u8,
                            196u8, 163u8, 165u8, 11u8, 1u8, 162u8, 131u8, 65u8, 207u8, 140u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " The present candidate list. A current member or runner-up can never enter this vector"]
                #[doc = " and is always implicitly assumed to be a candidate."]
                #[doc = ""]
                #[doc = " Second element is the deposit."]
                #[doc = ""]
                #[doc = " Invariant: Always sorted based on account id."]
                pub fn candidates(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Elections",
                        "Candidates",
                        vec![],
                        [
                            220u8, 219u8, 115u8, 204u8, 15u8, 0u8, 135u8, 72u8, 241u8, 89u8, 10u8,
                            105u8, 106u8, 93u8, 18u8, 63u8, 43u8, 117u8, 120u8, 73u8, 8u8, 143u8,
                            244u8, 144u8, 223u8, 155u8, 217u8, 132u8, 246u8, 228u8, 210u8, 53u8,
                        ],
                    )
                }
                #[doc = " The total number of vote rounds that have happened, excluding the upcoming one."]
                pub fn election_rounds(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Elections",
                        "ElectionRounds",
                        vec![],
                        [
                            97u8, 151u8, 159u8, 133u8, 59u8, 215u8, 12u8, 178u8, 203u8, 24u8,
                            138u8, 36u8, 108u8, 134u8, 217u8, 137u8, 24u8, 6u8, 126u8, 87u8, 49u8,
                            90u8, 198u8, 16u8, 36u8, 109u8, 223u8, 190u8, 81u8, 7u8, 239u8, 243u8,
                        ],
                    )
                }
                #[doc = " Votes and locked stake of a particular voter."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_elections_phragmen::Voter<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Elections",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            18u8, 65u8, 68u8, 10u8, 123u8, 174u8, 185u8, 95u8, 75u8, 37u8, 201u8,
                            31u8, 93u8, 189u8, 184u8, 76u8, 199u8, 168u8, 74u8, 199u8, 75u8, 78u8,
                            55u8, 222u8, 234u8, 48u8, 81u8, 52u8, 187u8, 64u8, 41u8, 93u8,
                        ],
                    )
                }
                #[doc = " Votes and locked stake of a particular voter."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_elections_phragmen::Voter<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Elections",
                        "Voting",
                        Vec::new(),
                        [
                            18u8, 65u8, 68u8, 10u8, 123u8, 174u8, 185u8, 95u8, 75u8, 37u8, 201u8,
                            31u8, 93u8, 189u8, 184u8, 76u8, 199u8, 168u8, 74u8, 199u8, 75u8, 78u8,
                            55u8, 222u8, 234u8, 48u8, 81u8, 52u8, 187u8, 64u8, 41u8, 93u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Identifier for the elections-phragmen pallet's lock"]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<[::core::primitive::u8; 8usize]> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "PalletId",
                        [
                            157u8, 118u8, 79u8, 88u8, 241u8, 22u8, 185u8, 37u8, 42u8, 20u8, 133u8,
                            240u8, 11u8, 25u8, 66u8, 154u8, 84u8, 163u8, 78u8, 92u8, 171u8, 82u8,
                            248u8, 76u8, 189u8, 70u8, 142u8, 249u8, 153u8, 84u8, 180u8, 60u8,
                        ],
                    )
                }
                #[doc = " How much should be locked up in order to submit one's candidacy."]
                pub fn candidacy_bond(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "CandidacyBond",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Base deposit associated with voting."]
                #[doc = ""]
                #[doc = " This should be sensibly high to economically ensure the pallet cannot be attacked by"]
                #[doc = " creating a gigantic number of votes."]
                pub fn voting_bond_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "VotingBondBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of bond that need to be locked for each vote (32 bytes)."]
                pub fn voting_bond_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "VotingBondFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Number of members to elect."]
                pub fn desired_members(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "DesiredMembers",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of runners_up to keep."]
                pub fn desired_runners_up(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "DesiredRunnersUp",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " How long each seat is kept. This defines the next block number at which an election"]
                #[doc = " round will happen. If set to zero, no elections are ever triggered and the module will"]
                #[doc = " be in passive mode."]
                pub fn term_duration(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "TermDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of candidates in a phragmen election."]
                #[doc = ""]
                #[doc = " Warning: This impacts the size of the election which is run onchain. Chose wisely, and"]
                #[doc = " consider how it will impact `T::WeightInfo::election_phragmen`."]
                #[doc = ""]
                #[doc = " When this limit is reached no more candidates are accepted in the election."]
                pub fn max_candidates(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "MaxCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of voters to allow in a phragmen election."]
                #[doc = ""]
                #[doc = " Warning: This impacts the size of the election which is run onchain. Chose wisely, and"]
                #[doc = " consider how it will impact `T::WeightInfo::election_phragmen`."]
                #[doc = ""]
                #[doc = " When the limit is reached the new voters are ignored."]
                pub fn max_voters(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "MaxVoters",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum numbers of votes per voter."]
                #[doc = ""]
                #[doc = " Warning: This impacts the size of the election which is run onchain. Chose wisely, and"]
                #[doc = " consider how it will impact `T::WeightInfo::election_phragmen`."]
                pub fn max_votes_per_voter(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Elections",
                        "MaxVotesPerVoter",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod technical_membership {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_membership::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_membership::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddMember {
                    const PALLET: &'static str = "TechnicalMembership";
                    const CALL: &'static str = "add_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
                    const PALLET: &'static str = "TechnicalMembership";
                    const CALL: &'static str = "remove_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SwapMember {
                    pub remove: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub add: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapMember {
                    const PALLET: &'static str = "TechnicalMembership";
                    const CALL: &'static str = "swap_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ResetMembers {
                    pub members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ResetMembers {
                    const PALLET: &'static str = "TechnicalMembership";
                    const CALL: &'static str = "reset_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ChangeKey {
                    pub new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ChangeKey {
                    const PALLET: &'static str = "TechnicalMembership";
                    const CALL: &'static str = "change_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetPrime {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetPrime {
                    const PALLET: &'static str = "TechnicalMembership";
                    const CALL: &'static str = "set_prime";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearPrime;
                impl ::subxt::blocks::StaticExtrinsic for ClearPrime {
                    const PALLET: &'static str = "TechnicalMembership";
                    const CALL: &'static str = "clear_prime";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::add_member`]."]
                pub fn add_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::AddMember> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "add_member",
                        types::AddMember { who },
                        [
                            138u8, 255u8, 102u8, 159u8, 20u8, 50u8, 254u8, 231u8, 96u8, 129u8,
                            60u8, 16u8, 10u8, 245u8, 109u8, 255u8, 240u8, 120u8, 87u8, 88u8, 97u8,
                            175u8, 3u8, 113u8, 237u8, 212u8, 69u8, 21u8, 112u8, 215u8, 89u8, 69u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_member`]."]
                pub fn remove_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::RemoveMember> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "remove_member",
                        types::RemoveMember { who },
                        [
                            121u8, 104u8, 219u8, 37u8, 141u8, 96u8, 126u8, 220u8, 13u8, 241u8,
                            206u8, 223u8, 111u8, 67u8, 117u8, 243u8, 74u8, 16u8, 209u8, 230u8,
                            84u8, 15u8, 66u8, 106u8, 150u8, 113u8, 27u8, 26u8, 23u8, 152u8, 32u8,
                            167u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::swap_member`]."]
                pub fn swap_member(
                    &self,
                    remove: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    add: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SwapMember> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "swap_member",
                        types::SwapMember { remove, add },
                        [
                            59u8, 246u8, 217u8, 53u8, 173u8, 139u8, 220u8, 69u8, 94u8, 125u8,
                            173u8, 93u8, 215u8, 1u8, 44u8, 208u8, 193u8, 18u8, 238u8, 34u8, 132u8,
                            161u8, 174u8, 34u8, 135u8, 166u8, 130u8, 19u8, 108u8, 219u8, 211u8,
                            202u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::reset_members`]."]
                pub fn reset_members(
                    &self,
                    members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<types::ResetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "reset_members",
                        types::ResetMembers { members },
                        [
                            212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
                            8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
                            99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::change_key`]."]
                pub fn change_key(
                    &self,
                    new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ChangeKey> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "change_key",
                        types::ChangeKey { new },
                        [
                            134u8, 113u8, 38u8, 177u8, 161u8, 80u8, 99u8, 236u8, 80u8, 200u8, 17u8,
                            137u8, 246u8, 98u8, 143u8, 136u8, 177u8, 23u8, 177u8, 195u8, 36u8,
                            57u8, 243u8, 197u8, 160u8, 225u8, 171u8, 114u8, 146u8, 233u8, 81u8,
                            232u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_prime`]."]
                pub fn set_prime(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetPrime> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "set_prime",
                        types::SetPrime { who },
                        [
                            209u8, 16u8, 241u8, 104u8, 226u8, 31u8, 133u8, 167u8, 151u8, 175u8,
                            79u8, 192u8, 160u8, 21u8, 94u8, 171u8, 226u8, 187u8, 197u8, 102u8,
                            156u8, 116u8, 36u8, 125u8, 139u8, 196u8, 175u8, 31u8, 22u8, 119u8,
                            150u8, 53u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_prime`]."]
                pub fn clear_prime(&self) -> ::subxt::tx::Payload<types::ClearPrime> {
                    ::subxt::tx::Payload::new_static(
                        "TechnicalMembership",
                        "clear_prime",
                        types::ClearPrime {},
                        [
                            71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
                            109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
                            125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_membership::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given member was added; see the transaction for who."]
            pub struct MemberAdded;
            impl ::subxt::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given member was removed; see the transaction for who."]
            pub struct MemberRemoved;
            impl ::subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Two members were swapped; see the transaction for who."]
            pub struct MembersSwapped;
            impl ::subxt::events::StaticEvent for MembersSwapped {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MembersSwapped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The membership was reset; see the transaction for who the new set is."]
            pub struct MembersReset;
            impl ::subxt::events::StaticEvent for MembersReset {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "MembersReset";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "One of the members' keys changed."]
            pub struct KeyChanged;
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Phantom member, never used."]
            pub struct Dummy;
            impl ::subxt::events::StaticEvent for Dummy {
                const PALLET: &'static str = "TechnicalMembership";
                const EVENT: &'static str = "Dummy";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current membership, stored as an ordered Vec."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalMembership",
                        "Members",
                        vec![],
                        [
                            109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
                            80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
                            223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
                            193u8,
                        ],
                    )
                }
                #[doc = " The current prime member, if one exists."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TechnicalMembership",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod grandpa {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_grandpa::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_grandpa::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReportEquivocation {
                    pub equivocation_proof: ::std::boxed::Box<
                        runtime_types::sp_consensus_grandpa::EquivocationProof<
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >,
                    >,
                    pub key_owner_proof: runtime_types::sp_session::MembershipProof,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReportEquivocation {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "report_equivocation";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReportEquivocationUnsigned {
                    pub equivocation_proof: ::std::boxed::Box<
                        runtime_types::sp_consensus_grandpa::EquivocationProof<
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >,
                    >,
                    pub key_owner_proof: runtime_types::sp_session::MembershipProof,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReportEquivocationUnsigned {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "report_equivocation_unsigned";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NoteStalled {
                    pub delay: ::core::primitive::u32,
                    pub best_finalized_block_number: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for NoteStalled {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "note_stalled";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::report_equivocation`]."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<types::ReportEquivocation> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "report_equivocation",
                        types::ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            239u8, 120u8, 210u8, 103u8, 106u8, 180u8, 41u8, 20u8, 164u8, 142u8,
                            156u8, 209u8, 183u8, 254u8, 192u8, 178u8, 22u8, 64u8, 91u8, 4u8, 222u8,
                            103u8, 37u8, 184u8, 252u8, 181u8, 65u8, 136u8, 103u8, 199u8, 250u8,
                            66u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::report_equivocation_unsigned`]."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_grandpa::EquivocationProof<
                        ::subxt::utils::H256,
                        ::core::primitive::u32,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> ::subxt::tx::Payload<types::ReportEquivocationUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "report_equivocation_unsigned",
                        types::ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            238u8, 22u8, 92u8, 27u8, 26u8, 218u8, 114u8, 129u8, 133u8, 211u8, 34u8,
                            239u8, 8u8, 11u8, 62u8, 201u8, 29u8, 38u8, 231u8, 63u8, 204u8, 13u8,
                            82u8, 164u8, 83u8, 149u8, 0u8, 0u8, 102u8, 113u8, 106u8, 156u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::note_stalled`]."]
                pub fn note_stalled(
                    &self,
                    delay: ::core::primitive::u32,
                    best_finalized_block_number: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::NoteStalled> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "note_stalled",
                        types::NoteStalled {
                            delay,
                            best_finalized_block_number,
                        },
                        [
                            232u8, 162u8, 42u8, 199u8, 101u8, 116u8, 38u8, 27u8, 147u8, 15u8,
                            224u8, 76u8, 229u8, 244u8, 13u8, 49u8, 218u8, 232u8, 253u8, 37u8, 7u8,
                            222u8, 97u8, 158u8, 201u8, 199u8, 169u8, 218u8, 201u8, 136u8, 192u8,
                            128u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_grandpa::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New authority set has been applied."]
            pub struct NewAuthorities {
                pub authority_set: ::std::vec::Vec<(
                    runtime_types::sp_consensus_grandpa::app::Public,
                    ::core::primitive::u64,
                )>,
            }
            impl ::subxt::events::StaticEvent for NewAuthorities {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "NewAuthorities";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Current authority set has been paused."]
            pub struct Paused;
            impl ::subxt::events::StaticEvent for Paused {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Paused";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Current authority set has been resumed."]
            pub struct Resumed;
            impl ::subxt::events::StaticEvent for Resumed {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Resumed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " State of the current authority set."]
                pub fn state(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "State",
                        vec![],
                        [
                            254u8, 81u8, 54u8, 203u8, 26u8, 74u8, 162u8, 215u8, 165u8, 247u8,
                            143u8, 139u8, 242u8, 164u8, 67u8, 27u8, 97u8, 172u8, 66u8, 98u8, 28u8,
                            151u8, 32u8, 38u8, 209u8, 82u8, 41u8, 209u8, 72u8, 3u8, 167u8, 42u8,
                        ],
                    )
                }
                #[doc = " Pending change: (signaled at, scheduled change)."]
                pub fn pending_change(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "PendingChange",
                        vec![],
                        [
                            207u8, 134u8, 15u8, 77u8, 9u8, 253u8, 20u8, 132u8, 226u8, 115u8, 150u8,
                            184u8, 18u8, 15u8, 143u8, 172u8, 71u8, 114u8, 221u8, 162u8, 174u8,
                            205u8, 46u8, 144u8, 70u8, 116u8, 18u8, 105u8, 250u8, 44u8, 75u8, 27u8,
                        ],
                    )
                }
                #[doc = " next block number where we can force a change."]
                pub fn next_forced(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "NextForced",
                        vec![],
                        [
                            3u8, 231u8, 56u8, 18u8, 87u8, 112u8, 227u8, 126u8, 180u8, 131u8, 255u8,
                            141u8, 82u8, 34u8, 61u8, 47u8, 234u8, 37u8, 95u8, 62u8, 33u8, 235u8,
                            231u8, 122u8, 125u8, 8u8, 223u8, 95u8, 255u8, 204u8, 40u8, 97u8,
                        ],
                    )
                }
                #[doc = " `true` if we are currently stalled."]
                pub fn stalled(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "Stalled",
                        vec![],
                        [
                            146u8, 18u8, 59u8, 59u8, 21u8, 246u8, 5u8, 167u8, 221u8, 8u8, 230u8,
                            74u8, 81u8, 217u8, 67u8, 158u8, 136u8, 36u8, 23u8, 106u8, 136u8, 89u8,
                            110u8, 217u8, 31u8, 138u8, 107u8, 251u8, 164u8, 10u8, 119u8, 18u8,
                        ],
                    )
                }
                #[doc = " The number of changes (both in terms of keys and underlying economic responsibilities)"]
                #[doc = " in the \"set\" of Grandpa validators from genesis."]
                pub fn current_set_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "CurrentSetId",
                        vec![],
                        [
                            234u8, 215u8, 218u8, 42u8, 30u8, 76u8, 129u8, 40u8, 125u8, 137u8,
                            207u8, 47u8, 46u8, 213u8, 159u8, 50u8, 175u8, 81u8, 155u8, 123u8,
                            246u8, 175u8, 156u8, 68u8, 22u8, 113u8, 135u8, 137u8, 163u8, 18u8,
                            115u8, 73u8,
                        ],
                    )
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " This is only used for validating equivocation proofs. An equivocation proof must"]
                #[doc = " contains a key-ownership proof for a given session, therefore we need a way to tie"]
                #[doc = " together sessions and GRANDPA set ids, i.e. we need to validate that a validator"]
                #[doc = " was the owner of a given key on a given session, and what the active set ID was"]
                #[doc = " during that session."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "SetIdSession",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            47u8, 0u8, 239u8, 121u8, 187u8, 213u8, 254u8, 50u8, 238u8, 10u8, 162u8,
                            65u8, 189u8, 166u8, 37u8, 74u8, 82u8, 81u8, 160u8, 20u8, 180u8, 253u8,
                            238u8, 18u8, 209u8, 203u8, 38u8, 148u8, 16u8, 105u8, 72u8, 169u8,
                        ],
                    )
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " This is only used for validating equivocation proofs. An equivocation proof must"]
                #[doc = " contains a key-ownership proof for a given session, therefore we need a way to tie"]
                #[doc = " together sessions and GRANDPA set ids, i.e. we need to validate that a validator"]
                #[doc = " was the owner of a given key on a given session, and what the active set ID was"]
                #[doc = " during that session."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "SetIdSession",
                        Vec::new(),
                        [
                            47u8, 0u8, 239u8, 121u8, 187u8, 213u8, 254u8, 50u8, 238u8, 10u8, 162u8,
                            65u8, 189u8, 166u8, 37u8, 74u8, 82u8, 81u8, 160u8, 20u8, 180u8, 253u8,
                            238u8, 18u8, 209u8, 203u8, 38u8, 148u8, 16u8, 105u8, 72u8, 169u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max Authorities in use"]
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Grandpa",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of entries to keep in the set id to session index mapping."]
                #[doc = ""]
                #[doc = " Since the `SetIdSession` map is only used for validating equivocations this"]
                #[doc = " value should relate to the bonding duration of whatever staking system is"]
                #[doc = " being used (if any). If equivocation handling is not enabled then this value"]
                #[doc = " can be zero."]
                pub fn max_set_id_session_entries(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Grandpa",
                        "MaxSetIdSessionEntries",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the treasury pallet."]
        pub type Error = runtime_types::pallet_treasury::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_treasury::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProposeSpend {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProposeSpend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "propose_spend";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RejectProposal {
                    #[codec(compact)]
                    pub proposal_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RejectProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "reject_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveProposal {
                    #[codec(compact)]
                    pub proposal_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "approve_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Spend {
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Spend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "spend";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveApproval {
                    #[codec(compact)]
                    pub proposal_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveApproval {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "remove_approval";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::propose_spend`]."]
                pub fn propose_spend(
                    &self,
                    value: ::core::primitive::u128,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ProposeSpend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "propose_spend",
                        types::ProposeSpend { value, beneficiary },
                        [
                            122u8, 208u8, 182u8, 218u8, 237u8, 127u8, 67u8, 90u8, 119u8, 187u8,
                            190u8, 131u8, 226u8, 30u8, 123u8, 176u8, 71u8, 150u8, 85u8, 170u8,
                            123u8, 65u8, 91u8, 229u8, 75u8, 53u8, 144u8, 105u8, 1u8, 167u8, 232u8,
                            156u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::reject_proposal`]."]
                pub fn reject_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RejectProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "reject_proposal",
                        types::RejectProposal { proposal_id },
                        [
                            18u8, 166u8, 80u8, 141u8, 222u8, 230u8, 4u8, 36u8, 7u8, 76u8, 12u8,
                            40u8, 145u8, 114u8, 12u8, 43u8, 223u8, 78u8, 189u8, 222u8, 120u8, 80u8,
                            225u8, 215u8, 119u8, 68u8, 200u8, 15u8, 25u8, 172u8, 192u8, 173u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_proposal`]."]
                pub fn approve_proposal(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ApproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "approve_proposal",
                        types::ApproveProposal { proposal_id },
                        [
                            154u8, 176u8, 152u8, 97u8, 167u8, 177u8, 78u8, 9u8, 235u8, 229u8,
                            199u8, 193u8, 214u8, 3u8, 16u8, 30u8, 4u8, 104u8, 27u8, 184u8, 100u8,
                            65u8, 179u8, 13u8, 91u8, 62u8, 115u8, 5u8, 219u8, 211u8, 251u8, 153u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::spend`]."]
                pub fn spend(
                    &self,
                    amount: ::core::primitive::u128,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Spend> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "spend",
                        types::Spend {
                            amount,
                            beneficiary,
                        },
                        [
                            84u8, 118u8, 232u8, 82u8, 17u8, 184u8, 100u8, 78u8, 38u8, 158u8, 78u8,
                            200u8, 60u8, 9u8, 47u8, 72u8, 52u8, 70u8, 208u8, 208u8, 169u8, 217u8,
                            191u8, 76u8, 215u8, 202u8, 72u8, 95u8, 221u8, 78u8, 106u8, 71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_approval`]."]
                pub fn remove_approval(
                    &self,
                    proposal_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Treasury",
                        "remove_approval",
                        types::RemoveApproval { proposal_id },
                        [
                            180u8, 20u8, 39u8, 227u8, 29u8, 228u8, 234u8, 36u8, 155u8, 114u8,
                            197u8, 135u8, 185u8, 31u8, 56u8, 247u8, 224u8, 168u8, 254u8, 233u8,
                            250u8, 134u8, 186u8, 155u8, 108u8, 84u8, 94u8, 226u8, 207u8, 130u8,
                            196u8, 100u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New proposal."]
            pub struct Proposed {
                pub proposal_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "We have ended a spend period and will now allocate funds."]
            pub struct Spending {
                pub budget_remaining: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some funds have been allocated."]
            pub struct Awarded {
                pub proposal_index: ::core::primitive::u32,
                pub award: ::core::primitive::u128,
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was rejected; funds were slashed."]
            pub struct Rejected {
                pub proposal_index: ::core::primitive::u32,
                pub slashed: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some of our funds have been burnt."]
            pub struct Burnt {
                pub burnt_funds: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
            pub struct Rollover {
                pub rollover_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some funds have been deposited."]
            pub struct Deposit {
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new spend proposal has been approved."]
            pub struct SpendApproved {
                pub proposal_index: ::core::primitive::u32,
                pub amount: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The inactive funds of the pallet have been updated."]
            pub struct UpdatedInactive {
                pub reactivated: ::core::primitive::u128,
                pub deactivated: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UpdatedInactive {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "UpdatedInactive";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of proposals that have been made."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_treasury::Proposal<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            182u8, 12u8, 98u8, 64u8, 117u8, 17u8, 90u8, 245u8, 80u8, 99u8, 161u8,
                            17u8, 59u8, 80u8, 64u8, 139u8, 89u8, 179u8, 254u8, 239u8, 143u8, 114u8,
                            77u8, 79u8, 75u8, 126u8, 52u8, 227u8, 1u8, 138u8, 35u8, 62u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_treasury::Proposal<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Proposals",
                        Vec::new(),
                        [
                            182u8, 12u8, 98u8, 64u8, 117u8, 17u8, 90u8, 245u8, 80u8, 99u8, 161u8,
                            17u8, 59u8, 80u8, 64u8, 139u8, 89u8, 179u8, 254u8, 239u8, 143u8, 114u8,
                            77u8, 79u8, 75u8, 126u8, 52u8, 227u8, 1u8, 138u8, 35u8, 62u8,
                        ],
                    )
                }
                #[doc = " The amount which has been reported as inactive to Currency."]
                pub fn deactivated(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Deactivated",
                        vec![],
                        [
                            120u8, 221u8, 159u8, 56u8, 161u8, 44u8, 54u8, 233u8, 47u8, 114u8,
                            170u8, 150u8, 52u8, 24u8, 137u8, 212u8, 122u8, 247u8, 40u8, 17u8,
                            208u8, 130u8, 42u8, 154u8, 33u8, 222u8, 59u8, 116u8, 0u8, 15u8, 79u8,
                            123u8,
                        ],
                    )
                }
                #[doc = " Proposal indices that have been approved but not yet awarded."]
                pub fn approvals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Treasury",
                        "Approvals",
                        vec![],
                        [
                            78u8, 147u8, 186u8, 235u8, 17u8, 40u8, 247u8, 235u8, 67u8, 222u8, 3u8,
                            14u8, 248u8, 17u8, 67u8, 180u8, 93u8, 161u8, 64u8, 35u8, 119u8, 194u8,
                            187u8, 226u8, 135u8, 162u8, 147u8, 174u8, 139u8, 72u8, 99u8, 212u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
                #[doc = " An accepted proposal gets these back. A rejected proposal does not."]
                pub fn proposal_bond(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBond",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_maximum(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "ProposalBondMaximum",
                        [
                            198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
                            199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
                            215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
                            147u8,
                        ],
                    )
                }
                #[doc = " Period between successive spends."]
                pub fn spend_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "SpendPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
                pub fn burn(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "Burn",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The maximum number of approvals that can wait in the spending queue."]
                #[doc = ""]
                #[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
                pub fn max_approvals(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_rate {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_asset_rate::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_asset_rate::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    pub asset_id: ::core::primitive::u32,
                    pub rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "AssetRate";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Update {
                    pub asset_id: ::core::primitive::u32,
                    pub rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Update {
                    const PALLET: &'static str = "AssetRate";
                    const CALL: &'static str = "update";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Remove {
                    pub asset_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Remove {
                    const PALLET: &'static str = "AssetRate";
                    const CALL: &'static str = "remove";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::create`]."]
                pub fn create(
                    &self,
                    asset_id: ::core::primitive::u32,
                    rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "AssetRate",
                        "create",
                        types::Create { asset_id, rate },
                        [
                            137u8, 202u8, 15u8, 252u8, 24u8, 195u8, 202u8, 120u8, 110u8, 80u8,
                            87u8, 35u8, 77u8, 168u8, 11u8, 126u8, 118u8, 71u8, 121u8, 208u8, 40u8,
                            61u8, 139u8, 4u8, 249u8, 108u8, 199u8, 24u8, 198u8, 225u8, 135u8, 28u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update`]."]
                pub fn update(
                    &self,
                    asset_id: ::core::primitive::u32,
                    rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                ) -> ::subxt::tx::Payload<types::Update> {
                    ::subxt::tx::Payload::new_static(
                        "AssetRate",
                        "update",
                        types::Update { asset_id, rate },
                        [
                            34u8, 146u8, 81u8, 173u8, 228u8, 119u8, 186u8, 189u8, 114u8, 238u8,
                            3u8, 153u8, 19u8, 233u8, 197u8, 9u8, 58u8, 227u8, 118u8, 133u8, 151u8,
                            162u8, 66u8, 54u8, 98u8, 55u8, 40u8, 35u8, 52u8, 119u8, 237u8, 245u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove`]."]
                pub fn remove(
                    &self,
                    asset_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Remove> {
                    ::subxt::tx::Payload::new_static(
                        "AssetRate",
                        "remove",
                        types::Remove { asset_id },
                        [
                            4u8, 129u8, 142u8, 134u8, 235u8, 140u8, 188u8, 6u8, 7u8, 76u8, 131u8,
                            238u8, 37u8, 36u8, 71u8, 221u8, 57u8, 83u8, 21u8, 197u8, 183u8, 5u8,
                            67u8, 194u8, 102u8, 60u8, 141u8, 233u8, 199u8, 100u8, 2u8, 164u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_asset_rate::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssetRateCreated {
                pub asset_id: ::core::primitive::u32,
                pub rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
            }
            impl ::subxt::events::StaticEvent for AssetRateCreated {
                const PALLET: &'static str = "AssetRate";
                const EVENT: &'static str = "AssetRateCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssetRateRemoved {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetRateRemoved {
                const PALLET: &'static str = "AssetRate";
                const EVENT: &'static str = "AssetRateRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AssetRateUpdated {
                pub asset_id: ::core::primitive::u32,
                pub old: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                pub new: runtime_types::sp_arithmetic::fixed_point::FixedU128,
            }
            impl ::subxt::events::StaticEvent for AssetRateUpdated {
                const PALLET: &'static str = "AssetRate";
                const EVENT: &'static str = "AssetRateUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Maps an asset to its fixed point representation in the native balance."]
                #[doc = ""]
                #[doc = " E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_id)`"]
                pub fn conversion_rate_to_native(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetRate",
                        "ConversionRateToNative",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            212u8, 212u8, 87u8, 53u8, 10u8, 192u8, 102u8, 179u8, 116u8, 42u8,
                            143u8, 75u8, 78u8, 130u8, 149u8, 69u8, 53u8, 56u8, 64u8, 73u8, 81u8,
                            66u8, 240u8, 75u8, 187u8, 151u8, 225u8, 143u8, 255u8, 158u8, 255u8,
                            2u8,
                        ],
                    )
                }
                #[doc = " Maps an asset to its fixed point representation in the native balance."]
                #[doc = ""]
                #[doc = " E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_id)`"]
                pub fn conversion_rate_to_native_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetRate",
                        "ConversionRateToNative",
                        Vec::new(),
                        [
                            212u8, 212u8, 87u8, 53u8, 10u8, 192u8, 102u8, 179u8, 116u8, 42u8,
                            143u8, 75u8, 78u8, 130u8, 149u8, 69u8, 53u8, 56u8, 64u8, 73u8, 81u8,
                            66u8, 240u8, 75u8, 187u8, 151u8, 225u8, 143u8, 255u8, 158u8, 255u8,
                            2u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod contracts {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_contracts::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_contracts::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CallOldWeight {
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    #[codec(compact)]
                    pub gas_limit: ::core::primitive::u64,
                    pub storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for CallOldWeight {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "call_old_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstantiateWithCodeOldWeight {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    #[codec(compact)]
                    pub gas_limit: ::core::primitive::u64,
                    pub storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                    pub salt: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for InstantiateWithCodeOldWeight {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate_with_code_old_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstantiateOldWeight {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    #[codec(compact)]
                    pub gas_limit: ::core::primitive::u64,
                    pub storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    pub code_hash: ::subxt::utils::H256,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                    pub salt: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for InstantiateOldWeight {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate_old_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UploadCode {
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                    pub storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    pub determinism: runtime_types::pallet_contracts::wasm::Determinism,
                }
                impl ::subxt::blocks::StaticExtrinsic for UploadCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "upload_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveCode {
                    pub code_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "remove_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCode {
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub code_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Call {
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                    pub storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Call {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstantiateWithCode {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                    pub storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    pub code: ::std::vec::Vec<::core::primitive::u8>,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                    pub salt: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for InstantiateWithCode {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate_with_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Instantiate {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                    pub storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    pub code_hash: ::subxt::utils::H256,
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                    pub salt: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Instantiate {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "instantiate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Migrate {
                    pub weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for Migrate {
                    const PALLET: &'static str = "Contracts";
                    const CALL: &'static str = "migrate";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::call_old_weight`]."]
                pub fn call_old_weight(
                    &self,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                    gas_limit: ::core::primitive::u64,
                    storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::CallOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "call_old_weight",
                        types::CallOldWeight {
                            dest,
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            data,
                        },
                        [
                            65u8, 186u8, 1u8, 15u8, 4u8, 7u8, 246u8, 149u8, 19u8, 158u8, 124u8,
                            8u8, 16u8, 118u8, 231u8, 12u8, 108u8, 4u8, 130u8, 201u8, 174u8, 178u8,
                            181u8, 166u8, 210u8, 51u8, 101u8, 154u8, 114u8, 127u8, 153u8, 202u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::instantiate_with_code_old_weight`]."]
                pub fn instantiate_with_code_old_weight(
                    &self,
                    value: ::core::primitive::u128,
                    gas_limit: ::core::primitive::u64,
                    storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                    salt: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::InstantiateWithCodeOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate_with_code_old_weight",
                        types::InstantiateWithCodeOldWeight {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code,
                            data,
                            salt,
                        },
                        [
                            136u8, 86u8, 215u8, 54u8, 92u8, 118u8, 161u8, 244u8, 32u8, 166u8,
                            167u8, 69u8, 231u8, 11u8, 252u8, 63u8, 91u8, 210u8, 252u8, 161u8, 60u8,
                            77u8, 54u8, 69u8, 115u8, 132u8, 146u8, 215u8, 93u8, 239u8, 36u8, 15u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::instantiate_old_weight`]."]
                pub fn instantiate_old_weight(
                    &self,
                    value: ::core::primitive::u128,
                    gas_limit: ::core::primitive::u64,
                    storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    code_hash: ::subxt::utils::H256,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                    salt: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::InstantiateOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate_old_weight",
                        types::InstantiateOldWeight {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code_hash,
                            data,
                            salt,
                        },
                        [
                            10u8, 91u8, 153u8, 191u8, 165u8, 31u8, 75u8, 96u8, 149u8, 28u8, 196u8,
                            95u8, 11u8, 88u8, 227u8, 158u8, 254u8, 202u8, 189u8, 181u8, 224u8,
                            148u8, 204u8, 121u8, 141u8, 133u8, 19u8, 56u8, 54u8, 61u8, 3u8, 108u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::upload_code`]."]
                pub fn upload_code(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                    storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    determinism: runtime_types::pallet_contracts::wasm::Determinism,
                ) -> ::subxt::tx::Payload<types::UploadCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "upload_code",
                        types::UploadCode {
                            code,
                            storage_deposit_limit,
                            determinism,
                        },
                        [
                            159u8, 17u8, 234u8, 83u8, 162u8, 68u8, 117u8, 80u8, 64u8, 251u8, 31u8,
                            38u8, 214u8, 227u8, 235u8, 74u8, 97u8, 72u8, 83u8, 197u8, 7u8, 57u8,
                            212u8, 217u8, 219u8, 139u8, 182u8, 248u8, 92u8, 91u8, 56u8, 2u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_code`]."]
                pub fn remove_code(
                    &self,
                    code_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RemoveCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "remove_code",
                        types::RemoveCode { code_hash },
                        [
                            99u8, 184u8, 12u8, 208u8, 123u8, 158u8, 140u8, 21u8, 190u8, 152u8,
                            95u8, 79u8, 217u8, 131u8, 161u8, 160u8, 21u8, 56u8, 167u8, 27u8, 90u8,
                            255u8, 75u8, 0u8, 133u8, 111u8, 119u8, 217u8, 157u8, 67u8, 238u8, 69u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_code`]."]
                pub fn set_code(
                    &self,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    code_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "set_code",
                        types::SetCode { dest, code_hash },
                        [
                            142u8, 186u8, 150u8, 67u8, 111u8, 13u8, 127u8, 219u8, 216u8, 212u8,
                            240u8, 178u8, 52u8, 243u8, 205u8, 6u8, 173u8, 117u8, 144u8, 151u8,
                            64u8, 150u8, 181u8, 128u8, 115u8, 243u8, 82u8, 56u8, 4u8, 168u8, 22u8,
                            208u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::call`]."]
                pub fn call(
                    &self,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                    gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                    storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::Call> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "call",
                        types::Call {
                            dest,
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            data,
                        },
                        [
                            245u8, 11u8, 176u8, 21u8, 63u8, 15u8, 213u8, 108u8, 173u8, 50u8, 74u8,
                            168u8, 194u8, 51u8, 5u8, 38u8, 129u8, 45u8, 151u8, 141u8, 73u8, 56u8,
                            34u8, 92u8, 107u8, 44u8, 137u8, 244u8, 221u8, 22u8, 249u8, 109u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::instantiate_with_code`]."]
                pub fn instantiate_with_code(
                    &self,
                    value: ::core::primitive::u128,
                    gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                    storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                    salt: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::InstantiateWithCode> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate_with_code",
                        types::InstantiateWithCode {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code,
                            data,
                            salt,
                        },
                        [
                            56u8, 224u8, 6u8, 35u8, 3u8, 79u8, 211u8, 229u8, 187u8, 87u8, 43u8,
                            213u8, 168u8, 55u8, 39u8, 41u8, 142u8, 132u8, 16u8, 161u8, 52u8, 22u8,
                            88u8, 114u8, 208u8, 80u8, 99u8, 221u8, 131u8, 156u8, 61u8, 163u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::instantiate`]."]
                pub fn instantiate(
                    &self,
                    value: ::core::primitive::u128,
                    gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                    storage_deposit_limit: ::core::option::Option<
                        ::subxt::ext::codec::Compact<::core::primitive::u128>,
                    >,
                    code_hash: ::subxt::utils::H256,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                    salt: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::Instantiate> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "instantiate",
                        types::Instantiate {
                            value,
                            gas_limit,
                            storage_deposit_limit,
                            code_hash,
                            data,
                            salt,
                        },
                        [
                            185u8, 177u8, 11u8, 254u8, 229u8, 161u8, 133u8, 235u8, 255u8, 228u8,
                            121u8, 19u8, 79u8, 20u8, 50u8, 101u8, 203u8, 69u8, 92u8, 48u8, 93u8,
                            152u8, 61u8, 60u8, 168u8, 68u8, 177u8, 187u8, 156u8, 102u8, 210u8,
                            160u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::migrate`]."]
                pub fn migrate(
                    &self,
                    weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::Migrate> {
                    ::subxt::tx::Payload::new_static(
                        "Contracts",
                        "migrate",
                        types::Migrate { weight_limit },
                        [
                            181u8, 212u8, 187u8, 27u8, 31u8, 155u8, 188u8, 79u8, 213u8, 205u8,
                            157u8, 148u8, 190u8, 242u8, 51u8, 214u8, 199u8, 253u8, 28u8, 153u8,
                            223u8, 208u8, 237u8, 60u8, 181u8, 32u8, 151u8, 126u8, 105u8, 37u8,
                            62u8, 103u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_contracts::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Contract deployed by address at the specified address."]
            pub struct Instantiated {
                pub deployer: ::subxt::utils::AccountId32,
                pub contract: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Instantiated {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "Instantiated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Contract has been removed."]
            #[doc = ""]
            #[doc = "# Note"]
            #[doc = ""]
            #[doc = "The only way for a contract to be removed and emitting this event is by calling"]
            #[doc = "`seal_terminate`."]
            pub struct Terminated {
                pub contract: ::subxt::utils::AccountId32,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Terminated {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "Terminated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Code with the specified hash has been stored."]
            pub struct CodeStored {
                pub code_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for CodeStored {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "CodeStored";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A custom event emitted by the contract."]
            pub struct ContractEmitted {
                pub contract: ::subxt::utils::AccountId32,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for ContractEmitted {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "ContractEmitted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A code with the specified hash was removed."]
            pub struct CodeRemoved {
                pub code_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for CodeRemoved {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "CodeRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contract's code was updated."]
            pub struct ContractCodeUpdated {
                pub contract: ::subxt::utils::AccountId32,
                pub new_code_hash: ::subxt::utils::H256,
                pub old_code_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for ContractCodeUpdated {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "ContractCodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contract was called either by a plain account or another contract."]
            #[doc = ""]
            #[doc = "# Note"]
            #[doc = ""]
            #[doc = "Please keep in mind that like all events this is only emitted for successful"]
            #[doc = "calls. This is because on failure all storage changes including events are"]
            #[doc = "rolled back."]
            pub struct Called {
                pub caller: runtime_types::pallet_contracts::Origin<
                    runtime_types::kitchensink_runtime::Runtime,
                >,
                pub contract: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Called {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "Called";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A contract delegate called a code hash."]
            #[doc = ""]
            #[doc = "# Note"]
            #[doc = ""]
            #[doc = "Please keep in mind that like all events this is only emitted for successful"]
            #[doc = "calls. This is because on failure all storage changes including events are"]
            #[doc = "rolled back."]
            pub struct DelegateCalled {
                pub contract: ::subxt::utils::AccountId32,
                pub code_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for DelegateCalled {
                const PALLET: &'static str = "Contracts";
                const EVENT: &'static str = "DelegateCalled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " A mapping from an original code hash to the original code, untouched by instrumentation."]
                pub fn pristine_code(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "PristineCode",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            57u8, 79u8, 159u8, 232u8, 131u8, 156u8, 213u8, 30u8, 6u8, 255u8, 44u8,
                            49u8, 149u8, 175u8, 120u8, 125u8, 44u8, 238u8, 23u8, 117u8, 1u8, 125u8,
                            199u8, 29u8, 72u8, 97u8, 94u8, 163u8, 202u8, 120u8, 207u8, 123u8,
                        ],
                    )
                }
                #[doc = " A mapping from an original code hash to the original code, untouched by instrumentation."]
                pub fn pristine_code_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "PristineCode",
                        Vec::new(),
                        [
                            57u8, 79u8, 159u8, 232u8, 131u8, 156u8, 213u8, 30u8, 6u8, 255u8, 44u8,
                            49u8, 149u8, 175u8, 120u8, 125u8, 44u8, 238u8, 23u8, 117u8, 1u8, 125u8,
                            199u8, 29u8, 72u8, 97u8, 94u8, 163u8, 202u8, 120u8, 207u8, 123u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code hash and instrumented wasm code, ready for execution."]
                pub fn code_storage(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_contracts::wasm::PrefabWasmModule,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "CodeStorage",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            84u8, 245u8, 130u8, 92u8, 142u8, 214u8, 246u8, 22u8, 10u8, 27u8, 171u8,
                            126u8, 20u8, 40u8, 23u8, 91u8, 90u8, 203u8, 148u8, 105u8, 111u8, 12u8,
                            57u8, 102u8, 183u8, 182u8, 186u8, 147u8, 127u8, 230u8, 110u8, 180u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code hash and instrumented wasm code, ready for execution."]
                pub fn code_storage_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_contracts::wasm::PrefabWasmModule,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "CodeStorage",
                        Vec::new(),
                        [
                            84u8, 245u8, 130u8, 92u8, 142u8, 214u8, 246u8, 22u8, 10u8, 27u8, 171u8,
                            126u8, 20u8, 40u8, 23u8, 91u8, 90u8, 203u8, 148u8, 105u8, 111u8, 12u8,
                            57u8, 102u8, 183u8, 182u8, 186u8, 147u8, 127u8, 230u8, 110u8, 180u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code hash and its owner information."]
                pub fn owner_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_contracts::wasm::OwnerInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "OwnerInfoOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            2u8, 159u8, 98u8, 144u8, 186u8, 85u8, 85u8, 97u8, 63u8, 233u8, 251u8,
                            171u8, 202u8, 194u8, 246u8, 211u8, 136u8, 234u8, 138u8, 208u8, 25u8,
                            14u8, 63u8, 211u8, 229u8, 54u8, 33u8, 57u8, 69u8, 87u8, 57u8, 39u8,
                        ],
                    )
                }
                #[doc = " A mapping between an original code hash and its owner information."]
                pub fn owner_info_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_contracts::wasm::OwnerInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "OwnerInfoOf",
                        Vec::new(),
                        [
                            2u8, 159u8, 98u8, 144u8, 186u8, 85u8, 85u8, 97u8, 63u8, 233u8, 251u8,
                            171u8, 202u8, 194u8, 246u8, 211u8, 136u8, 234u8, 138u8, 208u8, 25u8,
                            14u8, 63u8, 211u8, 229u8, 54u8, 33u8, 57u8, 69u8, 87u8, 57u8, 39u8,
                        ],
                    )
                }
                #[doc = " This is a **monotonic** counter incremented on contract instantiation."]
                #[doc = ""]
                #[doc = " This is used in order to generate unique trie ids for contracts."]
                #[doc = " The trie id of a new contract is calculated from hash(account_id, nonce)."]
                #[doc = " The nonce is required because otherwise the following sequence would lead to"]
                #[doc = " a possible collision of storage:"]
                #[doc = ""]
                #[doc = " 1. Create a new contract."]
                #[doc = " 2. Terminate the contract."]
                #[doc = " 3. Immediately recreate the contract with the same account_id."]
                #[doc = ""]
                #[doc = " This is bad because the contents of a trie are deleted lazily and there might be"]
                #[doc = " storage of the old instantiation still in it when the new contract is created. Please"]
                #[doc = " note that we can't replace the counter by the block number because the sequence above"]
                #[doc = " can happen in the same block. We also can't keep the account counter in memory only"]
                #[doc = " because storage is the only way to communicate across different extrinsics in the"]
                #[doc = " same block."]
                #[doc = ""]
                #[doc = " # Note"]
                #[doc = ""]
                #[doc = " Do not use it to determine the number of contracts. It won't be decremented if"]
                #[doc = " a contract is destroyed."]
                pub fn nonce(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "Nonce",
                        vec![],
                        [
                            47u8, 101u8, 89u8, 252u8, 98u8, 25u8, 178u8, 154u8, 17u8, 57u8, 185u8,
                            10u8, 133u8, 94u8, 73u8, 160u8, 137u8, 150u8, 97u8, 119u8, 8u8, 146u8,
                            149u8, 146u8, 212u8, 60u8, 141u8, 24u8, 124u8, 28u8, 57u8, 19u8,
                        ],
                    )
                }
                #[doc = " The code associated with a given account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn contract_info_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_contracts::storage::ContractInfo,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "ContractInfoOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            127u8, 10u8, 55u8, 188u8, 167u8, 57u8, 228u8, 152u8, 70u8, 86u8, 231u8,
                            205u8, 114u8, 129u8, 17u8, 156u8, 245u8, 213u8, 186u8, 159u8, 146u8,
                            81u8, 7u8, 62u8, 167u8, 134u8, 131u8, 33u8, 42u8, 149u8, 47u8, 231u8,
                        ],
                    )
                }
                #[doc = " The code associated with a given account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn contract_info_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_contracts::storage::ContractInfo,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "ContractInfoOf",
                        Vec::new(),
                        [
                            127u8, 10u8, 55u8, 188u8, 167u8, 57u8, 228u8, 152u8, 70u8, 86u8, 231u8,
                            205u8, 114u8, 129u8, 17u8, 156u8, 245u8, 213u8, 186u8, 159u8, 146u8,
                            81u8, 7u8, 62u8, 167u8, 134u8, 131u8, 33u8, 42u8, 149u8, 47u8, 231u8,
                        ],
                    )
                }
                #[doc = " Evicted contracts that await child trie deletion."]
                #[doc = ""]
                #[doc = " Child trie deletion is a heavy operation depending on the amount of storage items"]
                #[doc = " stored in said trie. Therefore this operation is performed lazily in `on_idle`."]
                pub fn deletion_queue(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "DeletionQueue",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            233u8, 193u8, 191u8, 44u8, 151u8, 46u8, 124u8, 188u8, 132u8, 227u8,
                            107u8, 210u8, 37u8, 110u8, 172u8, 95u8, 12u8, 114u8, 63u8, 83u8, 60u8,
                            163u8, 58u8, 174u8, 160u8, 47u8, 198u8, 156u8, 216u8, 182u8, 65u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Evicted contracts that await child trie deletion."]
                #[doc = ""]
                #[doc = " Child trie deletion is a heavy operation depending on the amount of storage items"]
                #[doc = " stored in said trie. Therefore this operation is performed lazily in `on_idle`."]
                pub fn deletion_queue_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "DeletionQueue",
                        Vec::new(),
                        [
                            233u8, 193u8, 191u8, 44u8, 151u8, 46u8, 124u8, 188u8, 132u8, 227u8,
                            107u8, 210u8, 37u8, 110u8, 172u8, 95u8, 12u8, 114u8, 63u8, 83u8, 60u8,
                            163u8, 58u8, 174u8, 160u8, 47u8, 198u8, 156u8, 216u8, 182u8, 65u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " A pair of monotonic counters used to track the latest contract marked for deletion"]
                #[doc = " and the latest deleted contract in queue."]
                pub fn deletion_queue_counter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_contracts::storage::DeletionQueueManager,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "DeletionQueueCounter",
                        vec![],
                        [
                            110u8, 62u8, 69u8, 98u8, 41u8, 1u8, 189u8, 178u8, 149u8, 34u8, 42u8,
                            136u8, 127u8, 110u8, 206u8, 2u8, 74u8, 96u8, 188u8, 210u8, 78u8, 37u8,
                            70u8, 251u8, 37u8, 233u8, 26u8, 71u8, 224u8, 116u8, 101u8, 128u8,
                        ],
                    )
                }
                #[doc = " A migration can span across multiple blocks. This storage defines a cursor to track the"]
                #[doc = " progress of the migration, enabling us to resume from the last completed position."]
                pub fn migration_in_progress(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Contracts",
                        "MigrationInProgress",
                        vec![],
                        [
                            238u8, 96u8, 248u8, 141u8, 247u8, 233u8, 27u8, 21u8, 187u8, 56u8,
                            195u8, 67u8, 21u8, 215u8, 30u8, 236u8, 151u8, 163u8, 115u8, 117u8,
                            154u8, 54u8, 37u8, 240u8, 136u8, 240u8, 35u8, 192u8, 168u8, 250u8,
                            132u8, 63u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Cost schedule and limits."]
                pub fn schedule(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::pallet_contracts::schedule::Schedule>
                {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "Schedule",
                        [
                            107u8, 144u8, 182u8, 103u8, 54u8, 0u8, 126u8, 8u8, 37u8, 111u8, 72u8,
                            53u8, 107u8, 197u8, 156u8, 180u8, 5u8, 9u8, 202u8, 77u8, 128u8, 206u8,
                            124u8, 184u8, 172u8, 92u8, 27u8, 184u8, 213u8, 121u8, 72u8, 243u8,
                        ],
                    )
                }
                #[doc = " The amount of balance a caller has to pay for each byte of storage."]
                #[doc = ""]
                #[doc = " # Note"]
                #[doc = ""]
                #[doc = " Changing this value for an existing chain might need a storage migration."]
                pub fn deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "DepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Fallback value to limit the storage deposit if it's not being set by the caller."]
                pub fn default_deposit_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "DefaultDepositLimit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of balance a caller has to pay for each storage item."]
                #[doc = ""]
                #[doc = " # Note"]
                #[doc = ""]
                #[doc = " Changing this value for an existing chain might need a storage migration."]
                pub fn deposit_per_item(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "DepositPerItem",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a contract code in bytes. This limit applies to the instrumented"]
                #[doc = " version of the code. Therefore `instantiate_with_code` can fail even when supplying"]
                #[doc = " a wasm binary below this maximum size."]
                #[doc = ""]
                #[doc = " The value should be chosen carefully taking into the account the overall memory limit"]
                #[doc = " your runtime has, as well as the [maximum allowed callstack"]
                #[doc = " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."]
                pub fn max_code_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "MaxCodeLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum allowable length in bytes for storage keys."]
                pub fn max_storage_key_len(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "MaxStorageKeyLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Make contract callable functions marked as `#[unstable]` available."]
                #[doc = ""]
                #[doc = " Contracts that use `#[unstable]` functions won't be able to be uploaded unless"]
                #[doc = " this is set to `true`. This is only meant for testnets and dev nodes in order to"]
                #[doc = " experiment with new features."]
                #[doc = ""]
                #[doc = " # Warning"]
                #[doc = ""]
                #[doc = " Do **not** set to `true` on productions chains."]
                pub fn unsafe_unstable_interface(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::bool> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "UnsafeUnstableInterface",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
                #[doc = " The maximum length of the debug buffer in bytes."]
                pub fn max_debug_buffer_len(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Contracts",
                        "MaxDebugBufferLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the Sudo pallet"]
        pub type Error = runtime_types::pallet_sudo::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_sudo::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Sudo {
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoUncheckedWeight {
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetKey {
                    pub new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "set_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoAs {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoAs {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_as";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::sudo`]."]
                pub fn sudo(
                    &self,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::Sudo> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo",
                        types::Sudo {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            192u8, 18u8, 26u8, 132u8, 120u8, 72u8, 65u8, 42u8, 235u8, 217u8, 105u8,
                            232u8, 254u8, 123u8, 231u8, 45u8, 79u8, 148u8, 59u8, 125u8, 158u8,
                            199u8, 168u8, 34u8, 171u8, 26u8, 137u8, 5u8, 42u8, 109u8, 19u8, 50u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::sudo_unchecked_weight`]."]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                    weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::SudoUncheckedWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            85u8, 140u8, 58u8, 38u8, 22u8, 159u8, 117u8, 154u8, 234u8, 92u8, 190u8,
                            101u8, 250u8, 206u8, 106u8, 23u8, 28u8, 20u8, 75u8, 115u8, 72u8, 143u8,
                            98u8, 73u8, 189u8, 24u8, 64u8, 121u8, 185u8, 219u8, 213u8, 117u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_key`]."]
                pub fn set_key(
                    &self,
                    new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetKey> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "set_key",
                        types::SetKey { new },
                        [
                            46u8, 208u8, 84u8, 223u8, 141u8, 188u8, 184u8, 156u8, 101u8, 97u8,
                            255u8, 166u8, 168u8, 102u8, 75u8, 3u8, 149u8, 105u8, 202u8, 220u8,
                            187u8, 117u8, 156u8, 83u8, 159u8, 115u8, 231u8, 201u8, 171u8, 47u8,
                            170u8, 36u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::sudo_as`]."]
                pub fn sudo_as(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::SudoAs> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_as",
                        types::SudoAs {
                            who,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            81u8, 197u8, 154u8, 215u8, 25u8, 30u8, 13u8, 120u8, 131u8, 246u8,
                            151u8, 222u8, 119u8, 232u8, 120u8, 138u8, 10u8, 44u8, 104u8, 117u8,
                            227u8, 59u8, 191u8, 52u8, 31u8, 231u8, 141u8, 242u8, 234u8, 243u8,
                            141u8, 203u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct Sudid {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
            pub struct KeyChanged {
                pub old_sudoer: ::core::option::Option<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SudoAsDone {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The `AccountId` of the sudo key."]
                pub fn key(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Sudo",
                        "Key",
                        vec![],
                        [
                            72u8, 14u8, 225u8, 162u8, 205u8, 247u8, 227u8, 105u8, 116u8, 57u8, 4u8,
                            31u8, 84u8, 137u8, 227u8, 228u8, 133u8, 245u8, 206u8, 227u8, 117u8,
                            36u8, 252u8, 151u8, 107u8, 15u8, 180u8, 4u8, 4u8, 152u8, 195u8, 144u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod im_online {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_im_online::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_im_online::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Heartbeat {
                    pub heartbeat:
                        runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                    pub signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
                }
                impl ::subxt::blocks::StaticExtrinsic for Heartbeat {
                    const PALLET: &'static str = "ImOnline";
                    const CALL: &'static str = "heartbeat";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::heartbeat`]."]
                pub fn heartbeat(
                    &self,
                    heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                    signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
                ) -> ::subxt::tx::Payload<types::Heartbeat> {
                    ::subxt::tx::Payload::new_static(
                        "ImOnline",
                        "heartbeat",
                        types::Heartbeat {
                            heartbeat,
                            signature,
                        },
                        [
                            145u8, 227u8, 53u8, 178u8, 195u8, 173u8, 7u8, 209u8, 148u8, 82u8,
                            125u8, 236u8, 128u8, 10u8, 134u8, 114u8, 95u8, 104u8, 111u8, 202u8,
                            59u8, 192u8, 178u8, 182u8, 102u8, 86u8, 88u8, 50u8, 92u8, 66u8, 144u8,
                            131u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_im_online::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new heartbeat was received from `AuthorityId`."]
            pub struct HeartbeatReceived {
                pub authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
            }
            impl ::subxt::events::StaticEvent for HeartbeatReceived {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "HeartbeatReceived";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "At the end of the session, no offence was committed."]
            pub struct AllGood;
            impl ::subxt::events::StaticEvent for AllGood {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "AllGood";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "At the end of the session, at least one validator was found to be offline."]
            pub struct SomeOffline {
                pub offline: ::std::vec::Vec<(
                    ::subxt::utils::AccountId32,
                    runtime_types::pallet_staking::Exposure<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                )>,
            }
            impl ::subxt::events::StaticEvent for SomeOffline {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "SomeOffline";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The block number after which it's ok to send heartbeats in the current"]
                #[doc = " session."]
                #[doc = ""]
                #[doc = " At the beginning of each session we set this to a value that should fall"]
                #[doc = " roughly in the middle of the session duration. The idea is to first wait for"]
                #[doc = " the validators to produce a block in the current session, so that the"]
                #[doc = " heartbeat later on will not be necessary."]
                #[doc = ""]
                #[doc = " This value will only be used as a fallback if we fail to get a proper session"]
                #[doc = " progress estimate from `NextSessionRotation`, as those estimates should be"]
                #[doc = " more accurate then the value we calculate for `HeartbeatAfter`."]
                pub fn heartbeat_after(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "HeartbeatAfter",
                        vec![],
                        [
                            36u8, 179u8, 76u8, 254u8, 3u8, 184u8, 154u8, 142u8, 70u8, 104u8, 44u8,
                            244u8, 39u8, 97u8, 31u8, 31u8, 93u8, 228u8, 185u8, 224u8, 13u8, 160u8,
                            231u8, 210u8, 110u8, 143u8, 116u8, 29u8, 0u8, 215u8, 217u8, 137u8,
                        ],
                    )
                }
                #[doc = " The current set of keys that may issue a heartbeat."]
                pub fn keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "Keys",
                        vec![],
                        [
                            111u8, 104u8, 188u8, 46u8, 152u8, 140u8, 137u8, 244u8, 52u8, 214u8,
                            115u8, 156u8, 39u8, 239u8, 15u8, 168u8, 193u8, 125u8, 57u8, 195u8,
                            250u8, 156u8, 234u8, 222u8, 222u8, 253u8, 135u8, 232u8, 196u8, 163u8,
                            29u8, 218u8,
                        ],
                    )
                }
                #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`."]
                pub fn received_heartbeats(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "ReceivedHeartbeats",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            123u8, 182u8, 145u8, 49u8, 90u8, 110u8, 80u8, 53u8, 62u8, 45u8, 173u8,
                            252u8, 126u8, 163u8, 229u8, 173u8, 54u8, 169u8, 61u8, 128u8, 10u8,
                            33u8, 254u8, 78u8, 145u8, 134u8, 235u8, 26u8, 177u8, 55u8, 7u8, 75u8,
                        ],
                    )
                }
                #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`."]
                pub fn received_heartbeats_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "ReceivedHeartbeats",
                        Vec::new(),
                        [
                            123u8, 182u8, 145u8, 49u8, 90u8, 110u8, 80u8, 53u8, 62u8, 45u8, 173u8,
                            252u8, 126u8, 163u8, 229u8, 173u8, 54u8, 169u8, 61u8, 128u8, 10u8,
                            33u8, 254u8, 78u8, 145u8, 134u8, 235u8, 26u8, 177u8, 55u8, 7u8, 75u8,
                        ],
                    )
                }
                #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
                #[doc = " number of blocks authored by the given authority."]
                pub fn authored_blocks(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "AuthoredBlocks",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            121u8, 246u8, 100u8, 191u8, 5u8, 211u8, 190u8, 244u8, 61u8, 73u8,
                            169u8, 127u8, 116u8, 80u8, 118u8, 139u8, 115u8, 58u8, 125u8, 81u8,
                            75u8, 20u8, 194u8, 74u8, 97u8, 188u8, 55u8, 160u8, 33u8, 155u8, 186u8,
                            74u8,
                        ],
                    )
                }
                #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
                #[doc = " number of blocks authored by the given authority."]
                pub fn authored_blocks_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ImOnline",
                        "AuthoredBlocks",
                        Vec::new(),
                        [
                            121u8, 246u8, 100u8, 191u8, 5u8, 211u8, 190u8, 244u8, 61u8, 73u8,
                            169u8, 127u8, 116u8, 80u8, 118u8, 139u8, 115u8, 58u8, 125u8, 81u8,
                            75u8, 20u8, 194u8, 74u8, 97u8, 188u8, 55u8, 160u8, 33u8, 155u8, 186u8,
                            74u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A configuration for base priority of unsigned transactions."]
                #[doc = ""]
                #[doc = " This is exposed so that it can be tuned for particular runtime, when"]
                #[doc = " multiple pallets send unsigned transactions."]
                pub fn unsigned_priority(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "ImOnline",
                        "UnsignedPriority",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authority_discovery {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Keys of the current authority set."]
                pub fn keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::sp_authority_discovery::app::Public,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorityDiscovery",
                        "Keys",
                        vec![],
                        [
                            111u8, 104u8, 188u8, 46u8, 152u8, 140u8, 137u8, 244u8, 52u8, 214u8,
                            115u8, 156u8, 39u8, 239u8, 15u8, 168u8, 193u8, 125u8, 57u8, 195u8,
                            250u8, 156u8, 234u8, 222u8, 222u8, 253u8, 135u8, 232u8, 196u8, 163u8,
                            29u8, 218u8,
                        ],
                    )
                }
                #[doc = " Keys of the next authority set."]
                pub fn next_keys(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::sp_authority_discovery::app::Public,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AuthorityDiscovery",
                        "NextKeys",
                        vec![],
                        [
                            171u8, 107u8, 15u8, 108u8, 125u8, 102u8, 193u8, 240u8, 127u8, 160u8,
                            53u8, 1u8, 208u8, 36u8, 134u8, 4u8, 216u8, 26u8, 156u8, 143u8, 154u8,
                            194u8, 153u8, 199u8, 46u8, 211u8, 153u8, 222u8, 244u8, 4u8, 165u8, 2u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod offences {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_offences::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
            #[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
            #[doc = "\\[kind, timeslot\\]."]
            pub struct Offence {
                pub kind: [::core::primitive::u8; 16usize],
                pub timeslot: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::events::StaticEvent for Offence {
                const PALLET: &'static str = "Offences";
                const EVENT: &'static str = "Offence";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The primary structure that holds all offence records keyed by report identifiers."]
                pub fn reports(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_staking::offence::OffenceDetails<
                        ::subxt::utils::AccountId32,
                        (
                            ::subxt::utils::AccountId32,
                            runtime_types::pallet_staking::Exposure<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u128,
                            >,
                        ),
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "Reports",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            242u8, 69u8, 20u8, 130u8, 250u8, 223u8, 68u8, 121u8, 187u8, 215u8,
                            62u8, 204u8, 100u8, 51u8, 76u8, 164u8, 188u8, 182u8, 215u8, 93u8,
                            161u8, 100u8, 187u8, 205u8, 73u8, 158u8, 57u8, 198u8, 239u8, 66u8,
                            42u8, 65u8,
                        ],
                    )
                }
                #[doc = " The primary structure that holds all offence records keyed by report identifiers."]
                pub fn reports_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_staking::offence::OffenceDetails<
                        ::subxt::utils::AccountId32,
                        (
                            ::subxt::utils::AccountId32,
                            runtime_types::pallet_staking::Exposure<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u128,
                            >,
                        ),
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "Reports",
                        Vec::new(),
                        [
                            242u8, 69u8, 20u8, 130u8, 250u8, 223u8, 68u8, 121u8, 187u8, 215u8,
                            62u8, 204u8, 100u8, 51u8, 76u8, 164u8, 188u8, 182u8, 215u8, 93u8,
                            161u8, 100u8, 187u8, 205u8, 73u8, 158u8, 57u8, 198u8, 239u8, 66u8,
                            42u8, 65u8,
                        ],
                    )
                }
                #[doc = " A vector of reports of the same kind that happened at the same time slot."]
                pub fn concurrent_reports_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 16usize]>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::H256>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "ConcurrentReportsIndex",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            125u8, 222u8, 9u8, 162u8, 38u8, 89u8, 77u8, 187u8, 129u8, 103u8, 21u8,
                            31u8, 117u8, 101u8, 43u8, 115u8, 170u8, 205u8, 142u8, 26u8, 27u8,
                            184u8, 152u8, 133u8, 76u8, 203u8, 78u8, 113u8, 51u8, 141u8, 118u8,
                            171u8,
                        ],
                    )
                }
                #[doc = " A vector of reports of the same kind that happened at the same time slot."]
                pub fn concurrent_reports_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::H256>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Offences",
                        "ConcurrentReportsIndex",
                        Vec::new(),
                        [
                            125u8, 222u8, 9u8, 162u8, 38u8, 89u8, 77u8, 187u8, 129u8, 103u8, 21u8,
                            31u8, 117u8, 101u8, 43u8, 115u8, 170u8, 205u8, 142u8, 26u8, 27u8,
                            184u8, 152u8, 133u8, 76u8, 203u8, 78u8, 113u8, 51u8, 141u8, 118u8,
                            171u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod historical {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod randomness_collective_flip {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Series of block headers from the last 81 blocks that acts as random seed material. This"]
                #[doc = " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"]
                #[doc = " the oldest hash."]
                pub fn random_material(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RandomnessCollectiveFlip",
                        "RandomMaterial",
                        vec![],
                        [
                            195u8, 232u8, 244u8, 162u8, 110u8, 137u8, 66u8, 57u8, 51u8, 221u8,
                            143u8, 38u8, 51u8, 183u8, 105u8, 245u8, 175u8, 13u8, 33u8, 192u8, 53u8,
                            16u8, 161u8, 76u8, 219u8, 177u8, 144u8, 192u8, 96u8, 166u8, 117u8,
                            247u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod identity {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_identity::pallet::Error;
        #[doc = "Identity pallet declaration."]
        pub type Call = runtime_types::pallet_identity::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddRegistrar {
                    pub account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddRegistrar {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "add_registrar";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetIdentity {
                    pub info:
                        ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetSubs {
                    pub subs: ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetSubs {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_subs";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearIdentity;
                impl ::subxt::blocks::StaticExtrinsic for ClearIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "clear_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RequestJudgement {
                    #[codec(compact)]
                    pub reg_index: ::core::primitive::u32,
                    #[codec(compact)]
                    pub max_fee: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for RequestJudgement {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "request_judgement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelRequest {
                    pub reg_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelRequest {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "cancel_request";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetFee {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    #[codec(compact)]
                    pub fee: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetFee {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_fee";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAccountId {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAccountId {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_account_id";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetFields {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetFields {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_fields";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProvideJudgement {
                    #[codec(compact)]
                    pub reg_index: ::core::primitive::u32,
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub judgement:
                        runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>,
                    pub identity: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProvideJudgement {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "provide_judgement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillIdentity {
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "kill_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddSub {
                    pub sub: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub data: runtime_types::pallet_identity::types::Data,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "add_sub";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RenameSub {
                    pub sub: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub data: runtime_types::pallet_identity::types::Data,
                }
                impl ::subxt::blocks::StaticExtrinsic for RenameSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "rename_sub";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveSub {
                    pub sub: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "remove_sub";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct QuitSub;
                impl ::subxt::blocks::StaticExtrinsic for QuitSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "quit_sub";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::add_registrar`]."]
                pub fn add_registrar(
                    &self,
                    account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::AddRegistrar> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "add_registrar",
                        types::AddRegistrar { account },
                        [
                            34u8, 133u8, 250u8, 186u8, 71u8, 219u8, 66u8, 250u8, 41u8, 190u8,
                            237u8, 96u8, 40u8, 51u8, 98u8, 54u8, 242u8, 65u8, 216u8, 135u8, 211u8,
                            24u8, 57u8, 161u8, 229u8, 174u8, 48u8, 1u8, 88u8, 2u8, 38u8, 206u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_identity`]."]
                pub fn set_identity(
                    &self,
                    info: runtime_types::pallet_identity::types::IdentityInfo,
                ) -> ::subxt::tx::Payload<types::SetIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_identity",
                        types::SetIdentity {
                            info: ::std::boxed::Box::new(info),
                        },
                        [
                            205u8, 7u8, 54u8, 226u8, 123u8, 160u8, 173u8, 25u8, 179u8, 93u8, 172u8,
                            37u8, 222u8, 143u8, 209u8, 1u8, 230u8, 32u8, 84u8, 80u8, 110u8, 195u8,
                            87u8, 185u8, 27u8, 31u8, 185u8, 161u8, 154u8, 166u8, 177u8, 190u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_subs`]."]
                pub fn set_subs(
                    &self,
                    subs: ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                ) -> ::subxt::tx::Payload<types::SetSubs> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_subs",
                        types::SetSubs { subs },
                        [
                            76u8, 193u8, 92u8, 120u8, 9u8, 99u8, 102u8, 220u8, 177u8, 29u8, 65u8,
                            14u8, 250u8, 101u8, 118u8, 59u8, 251u8, 153u8, 136u8, 141u8, 89u8,
                            250u8, 74u8, 254u8, 111u8, 220u8, 132u8, 228u8, 248u8, 132u8, 177u8,
                            128u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_identity`]."]
                pub fn clear_identity(&self) -> ::subxt::tx::Payload<types::ClearIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "clear_identity",
                        types::ClearIdentity {},
                        [
                            43u8, 115u8, 205u8, 44u8, 24u8, 130u8, 220u8, 69u8, 247u8, 176u8,
                            200u8, 175u8, 67u8, 183u8, 36u8, 200u8, 162u8, 132u8, 242u8, 25u8,
                            21u8, 106u8, 197u8, 219u8, 141u8, 51u8, 204u8, 13u8, 191u8, 201u8,
                            31u8, 31u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::request_judgement`]."]
                pub fn request_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    max_fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::RequestJudgement> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "request_judgement",
                        types::RequestJudgement { reg_index, max_fee },
                        [
                            83u8, 85u8, 55u8, 184u8, 14u8, 54u8, 49u8, 212u8, 26u8, 148u8, 33u8,
                            147u8, 182u8, 54u8, 180u8, 12u8, 61u8, 179u8, 216u8, 157u8, 103u8,
                            52u8, 120u8, 252u8, 83u8, 203u8, 144u8, 65u8, 15u8, 3u8, 21u8, 33u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_request`]."]
                pub fn cancel_request(
                    &self,
                    reg_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelRequest> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "cancel_request",
                        types::CancelRequest { reg_index },
                        [
                            81u8, 14u8, 133u8, 219u8, 43u8, 84u8, 163u8, 208u8, 21u8, 185u8, 75u8,
                            117u8, 126u8, 33u8, 210u8, 106u8, 122u8, 210u8, 35u8, 207u8, 104u8,
                            206u8, 41u8, 117u8, 247u8, 108u8, 56u8, 23u8, 123u8, 169u8, 169u8,
                            61u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_fee`]."]
                pub fn set_fee(
                    &self,
                    index: ::core::primitive::u32,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetFee> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_fee",
                        types::SetFee { index, fee },
                        [
                            131u8, 20u8, 17u8, 127u8, 180u8, 65u8, 225u8, 144u8, 193u8, 60u8,
                            131u8, 241u8, 30u8, 149u8, 8u8, 76u8, 29u8, 52u8, 102u8, 108u8, 127u8,
                            130u8, 70u8, 18u8, 94u8, 145u8, 179u8, 109u8, 252u8, 219u8, 58u8,
                            163u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_account_id`]."]
                pub fn set_account_id(
                    &self,
                    index: ::core::primitive::u32,
                    new: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetAccountId> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_account_id",
                        types::SetAccountId { index, new },
                        [
                            127u8, 225u8, 228u8, 150u8, 6u8, 49u8, 67u8, 109u8, 19u8, 172u8, 100u8,
                            239u8, 81u8, 65u8, 5u8, 126u8, 239u8, 5u8, 203u8, 160u8, 241u8, 250u8,
                            243u8, 218u8, 208u8, 227u8, 239u8, 124u8, 78u8, 166u8, 40u8, 156u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_fields`]."]
                pub fn set_fields(
                    &self,
                    index: ::core::primitive::u32,
                    fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                ) -> ::subxt::tx::Payload<types::SetFields> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "set_fields",
                        types::SetFields { index, fields },
                        [
                            25u8, 129u8, 119u8, 232u8, 18u8, 32u8, 77u8, 23u8, 185u8, 56u8, 32u8,
                            199u8, 74u8, 174u8, 104u8, 203u8, 171u8, 253u8, 19u8, 225u8, 101u8,
                            239u8, 14u8, 242u8, 157u8, 51u8, 203u8, 74u8, 1u8, 65u8, 165u8, 205u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::provide_judgement`]."]
                pub fn provide_judgement(
                    &self,
                    reg_index: ::core::primitive::u32,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    judgement: runtime_types::pallet_identity::types::Judgement<
                        ::core::primitive::u128,
                    >,
                    identity: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::ProvideJudgement> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "provide_judgement",
                        types::ProvideJudgement {
                            reg_index,
                            target,
                            judgement,
                            identity,
                        },
                        [
                            51u8, 75u8, 24u8, 146u8, 141u8, 86u8, 141u8, 188u8, 77u8, 71u8, 5u8,
                            76u8, 44u8, 35u8, 208u8, 98u8, 217u8, 80u8, 248u8, 201u8, 225u8, 230u8,
                            162u8, 20u8, 202u8, 242u8, 4u8, 209u8, 9u8, 200u8, 178u8, 5u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill_identity`]."]
                pub fn kill_identity(
                    &self,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::KillIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "kill_identity",
                        types::KillIdentity { target },
                        [
                            111u8, 40u8, 34u8, 131u8, 14u8, 102u8, 209u8, 175u8, 202u8, 50u8, 12u8,
                            19u8, 37u8, 230u8, 120u8, 91u8, 248u8, 67u8, 25u8, 245u8, 228u8, 19u8,
                            57u8, 187u8, 244u8, 30u8, 59u8, 178u8, 29u8, 114u8, 197u8, 24u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::add_sub`]."]
                pub fn add_sub(
                    &self,
                    sub: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> ::subxt::tx::Payload<types::AddSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "add_sub",
                        types::AddSub { sub, data },
                        [
                            63u8, 142u8, 248u8, 45u8, 29u8, 195u8, 238u8, 249u8, 23u8, 242u8, 54u8,
                            254u8, 141u8, 12u8, 202u8, 156u8, 52u8, 180u8, 121u8, 168u8, 198u8,
                            5u8, 44u8, 129u8, 117u8, 178u8, 201u8, 125u8, 209u8, 211u8, 86u8,
                            140u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::rename_sub`]."]
                pub fn rename_sub(
                    &self,
                    sub: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    data: runtime_types::pallet_identity::types::Data,
                ) -> ::subxt::tx::Payload<types::RenameSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "rename_sub",
                        types::RenameSub { sub, data },
                        [
                            201u8, 113u8, 118u8, 210u8, 110u8, 248u8, 42u8, 56u8, 35u8, 208u8,
                            102u8, 171u8, 128u8, 158u8, 105u8, 232u8, 254u8, 73u8, 44u8, 84u8,
                            16u8, 32u8, 112u8, 41u8, 19u8, 128u8, 200u8, 118u8, 95u8, 115u8, 220u8,
                            100u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_sub`]."]
                pub fn remove_sub(
                    &self,
                    sub: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::RemoveSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "remove_sub",
                        types::RemoveSub { sub },
                        [
                            20u8, 227u8, 205u8, 59u8, 130u8, 76u8, 62u8, 11u8, 69u8, 169u8, 10u8,
                            199u8, 9u8, 194u8, 142u8, 181u8, 170u8, 170u8, 254u8, 197u8, 74u8,
                            123u8, 216u8, 87u8, 163u8, 156u8, 153u8, 41u8, 20u8, 173u8, 87u8, 10u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::quit_sub`]."]
                pub fn quit_sub(&self) -> ::subxt::tx::Payload<types::QuitSub> {
                    ::subxt::tx::Payload::new_static(
                        "Identity",
                        "quit_sub",
                        types::QuitSub {},
                        [
                            147u8, 131u8, 175u8, 171u8, 187u8, 201u8, 240u8, 26u8, 146u8, 224u8,
                            74u8, 166u8, 242u8, 193u8, 204u8, 247u8, 168u8, 93u8, 18u8, 32u8, 27u8,
                            208u8, 149u8, 146u8, 179u8, 172u8, 75u8, 112u8, 84u8, 141u8, 233u8,
                            223u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_identity::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A name was set or reset (which will remove all judgements)."]
            pub struct IdentitySet {
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for IdentitySet {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentitySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A name was cleared, and the given balance returned."]
            pub struct IdentityCleared {
                pub who: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for IdentityCleared {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A name was removed and the given balance slashed."]
            pub struct IdentityKilled {
                pub who: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for IdentityKilled {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityKilled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A judgement was asked from a registrar."]
            pub struct JudgementRequested {
                pub who: ::subxt::utils::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementRequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementRequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A judgement request was retracted."]
            pub struct JudgementUnrequested {
                pub who: ::subxt::utils::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementUnrequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementUnrequested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A judgement was given by a registrar."]
            pub struct JudgementGiven {
                pub target: ::subxt::utils::AccountId32,
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for JudgementGiven {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementGiven";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A registrar was added."]
            pub struct RegistrarAdded {
                pub registrar_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for RegistrarAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "RegistrarAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sub-identity was added to an identity and the deposit paid."]
            pub struct SubIdentityAdded {
                pub sub: ::subxt::utils::AccountId32,
                pub main: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sub-identity was removed from an identity and the deposit freed."]
            pub struct SubIdentityRemoved {
                pub sub: ::subxt::utils::AccountId32,
                pub main: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityRemoved {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
            #[doc = "main identity account to the sub-identity account."]
            pub struct SubIdentityRevoked {
                pub sub: ::subxt::utils::AccountId32,
                pub main: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubIdentityRevoked {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRevoked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Information that is pertinent to identify the entity behind an account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "IdentityOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            239u8, 55u8, 5u8, 97u8, 227u8, 243u8, 118u8, 13u8, 98u8, 30u8, 141u8,
                            84u8, 170u8, 90u8, 166u8, 116u8, 17u8, 122u8, 190u8, 76u8, 34u8, 51u8,
                            239u8, 41u8, 14u8, 135u8, 11u8, 164u8, 106u8, 228u8, 48u8, 26u8,
                        ],
                    )
                }
                #[doc = " Information that is pertinent to identify the entity behind an account."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_identity::types::Registration<::core::primitive::u128>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "IdentityOf",
                        Vec::new(),
                        [
                            239u8, 55u8, 5u8, 97u8, 227u8, 243u8, 118u8, 13u8, 98u8, 30u8, 141u8,
                            84u8, 170u8, 90u8, 166u8, 116u8, 17u8, 122u8, 190u8, 76u8, 34u8, 51u8,
                            239u8, 41u8, 14u8, 135u8, 11u8, 164u8, 106u8, 228u8, 48u8, 26u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SuperOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            51u8, 225u8, 21u8, 92u8, 85u8, 14u8, 14u8, 211u8, 61u8, 99u8, 176u8,
                            236u8, 212u8, 156u8, 103u8, 175u8, 208u8, 105u8, 94u8, 226u8, 136u8,
                            69u8, 162u8, 170u8, 11u8, 116u8, 72u8, 242u8, 119u8, 14u8, 14u8, 142u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_identity::types::Data,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SuperOf",
                        Vec::new(),
                        [
                            51u8, 225u8, 21u8, 92u8, 85u8, 14u8, 14u8, 211u8, 61u8, 99u8, 176u8,
                            236u8, 212u8, 156u8, 103u8, 175u8, 208u8, 105u8, 94u8, 226u8, 136u8,
                            69u8, 162u8, 170u8, 11u8, 116u8, 72u8, 242u8, 119u8, 14u8, 14u8, 142u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SubsOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            93u8, 124u8, 154u8, 157u8, 159u8, 103u8, 233u8, 225u8, 59u8, 20u8,
                            201u8, 239u8, 128u8, 209u8, 207u8, 38u8, 123u8, 48u8, 119u8, 102u8,
                            88u8, 42u8, 245u8, 187u8, 244u8, 206u8, 124u8, 216u8, 185u8, 155u8,
                            207u8, 0u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "SubsOf",
                        Vec::new(),
                        [
                            93u8, 124u8, 154u8, 157u8, 159u8, 103u8, 233u8, 225u8, 59u8, 20u8,
                            201u8, 239u8, 128u8, 209u8, 207u8, 38u8, 123u8, 48u8, 119u8, 102u8,
                            88u8, 42u8, 245u8, 187u8, 244u8, 206u8, 124u8, 216u8, 185u8, 155u8,
                            207u8, 0u8,
                        ],
                    )
                }
                #[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
                #[doc = " special origin (likely a council motion)."]
                #[doc = ""]
                #[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
                pub fn registrars(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_identity::types::RegistrarInfo<
                                ::core::primitive::u128,
                                ::subxt::utils::AccountId32,
                            >,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Identity",
                        "Registrars",
                        vec![],
                        [
                            207u8, 253u8, 229u8, 237u8, 228u8, 85u8, 173u8, 74u8, 164u8, 67u8,
                            144u8, 144u8, 5u8, 242u8, 84u8, 187u8, 110u8, 181u8, 2u8, 162u8, 239u8,
                            212u8, 72u8, 233u8, 160u8, 196u8, 121u8, 218u8, 100u8, 0u8, 219u8,
                            181u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount held on deposit for a registered identity"]
                pub fn basic_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "BasicDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per additional field for a registered identity."]
                pub fn field_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "FieldDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
                #[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
                #[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
                pub fn sub_account_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "SubAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of sub-accounts allowed per identified account."]
                pub fn max_sub_accounts(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxSubAccounts",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O"]
                #[doc = " required to access an identity, but can be pretty high."]
                pub fn max_additional_fields(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxAdditionalFields",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
                #[doc = " of, e.g., updating judgements."]
                pub fn max_registrars(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Identity",
                        "MaxRegistrars",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod society {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_society::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_society::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bid {
                    pub value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Bid {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "bid";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unbid;
                impl ::subxt::blocks::StaticExtrinsic for Unbid {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "unbid";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vouch {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub value: ::core::primitive::u128,
                    pub tip: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vouch {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "vouch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unvouch;
                impl ::subxt::blocks::StaticExtrinsic for Unvouch {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "unvouch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub candidate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DefenderVote {
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for DefenderVote {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "defender_vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Payout;
                impl ::subxt::blocks::StaticExtrinsic for Payout {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "payout";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WaiveRepay {
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for WaiveRepay {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "waive_repay";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FoundSociety {
                    pub founder: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub max_members: ::core::primitive::u32,
                    pub max_intake: ::core::primitive::u32,
                    pub max_strikes: ::core::primitive::u32,
                    pub candidate_deposit: ::core::primitive::u128,
                    pub rules: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for FoundSociety {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "found_society";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Dissolve;
                impl ::subxt::blocks::StaticExtrinsic for Dissolve {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "dissolve";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct JudgeSuspendedMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub forgive: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for JudgeSuspendedMember {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "judge_suspended_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetParameters {
                    pub max_members: ::core::primitive::u32,
                    pub max_intake: ::core::primitive::u32,
                    pub max_strikes: ::core::primitive::u32,
                    pub candidate_deposit: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetParameters {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "set_parameters";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PunishSkeptic;
                impl ::subxt::blocks::StaticExtrinsic for PunishSkeptic {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "punish_skeptic";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimMembership;
                impl ::subxt::blocks::StaticExtrinsic for ClaimMembership {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "claim_membership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BestowMembership {
                    pub candidate: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for BestowMembership {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "bestow_membership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KickCandidate {
                    pub candidate: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for KickCandidate {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "kick_candidate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ResignCandidacy;
                impl ::subxt::blocks::StaticExtrinsic for ResignCandidacy {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "resign_candidacy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DropCandidate {
                    pub candidate: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for DropCandidate {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "drop_candidate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CleanupCandidacy {
                    pub candidate: ::subxt::utils::AccountId32,
                    pub max: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CleanupCandidacy {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "cleanup_candidacy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CleanupChallenge {
                    pub challenge_round: ::core::primitive::u32,
                    pub max: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CleanupChallenge {
                    const PALLET: &'static str = "Society";
                    const CALL: &'static str = "cleanup_challenge";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::bid`]."]
                pub fn bid(
                    &self,
                    value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Bid> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "bid",
                        types::Bid { value },
                        [
                            196u8, 8u8, 236u8, 188u8, 3u8, 185u8, 190u8, 227u8, 11u8, 146u8, 225u8,
                            241u8, 196u8, 125u8, 128u8, 67u8, 244u8, 144u8, 10u8, 152u8, 161u8,
                            60u8, 72u8, 33u8, 124u8, 137u8, 40u8, 200u8, 177u8, 21u8, 27u8, 45u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unbid`]."]
                pub fn unbid(&self) -> ::subxt::tx::Payload<types::Unbid> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "unbid",
                        types::Unbid {},
                        [
                            188u8, 248u8, 46u8, 6u8, 82u8, 191u8, 129u8, 234u8, 187u8, 249u8, 69u8,
                            242u8, 173u8, 185u8, 209u8, 51u8, 228u8, 80u8, 27u8, 111u8, 59u8,
                            110u8, 180u8, 106u8, 205u8, 6u8, 121u8, 66u8, 232u8, 89u8, 166u8,
                            154u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vouch`]."]
                pub fn vouch(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    value: ::core::primitive::u128,
                    tip: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Vouch> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "vouch",
                        types::Vouch { who, value, tip },
                        [
                            208u8, 21u8, 51u8, 109u8, 248u8, 24u8, 219u8, 242u8, 57u8, 242u8, 35u8,
                            87u8, 54u8, 21u8, 18u8, 162u8, 240u8, 44u8, 126u8, 15u8, 203u8, 254u8,
                            51u8, 75u8, 18u8, 92u8, 200u8, 209u8, 132u8, 65u8, 197u8, 126u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unvouch`]."]
                pub fn unvouch(&self) -> ::subxt::tx::Payload<types::Unvouch> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "unvouch",
                        types::Unvouch {},
                        [
                            205u8, 176u8, 119u8, 76u8, 199u8, 30u8, 22u8, 108u8, 111u8, 117u8,
                            24u8, 9u8, 164u8, 14u8, 126u8, 124u8, 224u8, 50u8, 195u8, 136u8, 244u8,
                            77u8, 238u8, 99u8, 97u8, 133u8, 151u8, 109u8, 245u8, 83u8, 159u8,
                            136u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    candidate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "vote",
                        types::Vote { candidate, approve },
                        [
                            206u8, 43u8, 139u8, 109u8, 173u8, 98u8, 170u8, 75u8, 142u8, 52u8,
                            204u8, 81u8, 6u8, 187u8, 133u8, 189u8, 13u8, 13u8, 17u8, 244u8, 113u8,
                            186u8, 205u8, 117u8, 60u8, 1u8, 76u8, 197u8, 96u8, 216u8, 181u8, 242u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::defender_vote`]."]
                pub fn defender_vote(
                    &self,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::DefenderVote> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "defender_vote",
                        types::DefenderVote { approve },
                        [
                            38u8, 196u8, 123u8, 172u8, 243u8, 40u8, 208u8, 63u8, 231u8, 155u8,
                            151u8, 181u8, 58u8, 122u8, 185u8, 86u8, 76u8, 124u8, 168u8, 225u8,
                            37u8, 13u8, 127u8, 250u8, 122u8, 124u8, 140u8, 57u8, 242u8, 214u8,
                            145u8, 119u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::payout`]."]
                pub fn payout(&self) -> ::subxt::tx::Payload<types::Payout> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "payout",
                        types::Payout {},
                        [
                            214u8, 12u8, 233u8, 89u8, 186u8, 0u8, 61u8, 206u8, 251u8, 1u8, 55u8,
                            0u8, 126u8, 105u8, 55u8, 109u8, 101u8, 104u8, 46u8, 98u8, 62u8, 228u8,
                            64u8, 195u8, 61u8, 24u8, 48u8, 148u8, 146u8, 108u8, 67u8, 52u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::waive_repay`]."]
                pub fn waive_repay(
                    &self,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::WaiveRepay> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "waive_repay",
                        types::WaiveRepay { amount },
                        [
                            83u8, 11u8, 65u8, 16u8, 92u8, 73u8, 39u8, 178u8, 16u8, 170u8, 41u8,
                            70u8, 241u8, 255u8, 89u8, 121u8, 50u8, 140u8, 240u8, 31u8, 27u8, 51u8,
                            51u8, 22u8, 241u8, 218u8, 127u8, 76u8, 52u8, 246u8, 214u8, 52u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::found_society`]."]
                pub fn found_society(
                    &self,
                    founder: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    max_members: ::core::primitive::u32,
                    max_intake: ::core::primitive::u32,
                    max_strikes: ::core::primitive::u32,
                    candidate_deposit: ::core::primitive::u128,
                    rules: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::FoundSociety> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "found_society",
                        types::FoundSociety {
                            founder,
                            max_members,
                            max_intake,
                            max_strikes,
                            candidate_deposit,
                            rules,
                        },
                        [
                            59u8, 88u8, 96u8, 121u8, 101u8, 105u8, 198u8, 63u8, 132u8, 206u8, 39u8,
                            201u8, 197u8, 243u8, 4u8, 195u8, 223u8, 242u8, 167u8, 246u8, 116u8,
                            85u8, 161u8, 129u8, 29u8, 114u8, 70u8, 209u8, 223u8, 99u8, 237u8,
                            209u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::dissolve`]."]
                pub fn dissolve(&self) -> ::subxt::tx::Payload<types::Dissolve> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "dissolve",
                        types::Dissolve {},
                        [
                            159u8, 138u8, 214u8, 34u8, 208u8, 201u8, 11u8, 33u8, 173u8, 66u8,
                            243u8, 3u8, 226u8, 190u8, 199u8, 200u8, 215u8, 210u8, 226u8, 213u8,
                            150u8, 217u8, 192u8, 88u8, 87u8, 202u8, 226u8, 105u8, 20u8, 201u8,
                            50u8, 242u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::judge_suspended_member`]."]
                pub fn judge_suspended_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    forgive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::JudgeSuspendedMember> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "judge_suspended_member",
                        types::JudgeSuspendedMember { who, forgive },
                        [
                            159u8, 111u8, 179u8, 242u8, 34u8, 47u8, 65u8, 114u8, 149u8, 175u8,
                            24u8, 6u8, 214u8, 227u8, 51u8, 27u8, 176u8, 79u8, 200u8, 165u8, 114u8,
                            48u8, 225u8, 201u8, 17u8, 202u8, 83u8, 169u8, 188u8, 18u8, 46u8, 130u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_parameters`]."]
                pub fn set_parameters(
                    &self,
                    max_members: ::core::primitive::u32,
                    max_intake: ::core::primitive::u32,
                    max_strikes: ::core::primitive::u32,
                    candidate_deposit: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetParameters> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "set_parameters",
                        types::SetParameters {
                            max_members,
                            max_intake,
                            max_strikes,
                            candidate_deposit,
                        },
                        [
                            4u8, 123u8, 228u8, 131u8, 172u8, 97u8, 123u8, 62u8, 134u8, 85u8, 171u8,
                            247u8, 152u8, 233u8, 91u8, 62u8, 204u8, 109u8, 169u8, 34u8, 196u8,
                            178u8, 167u8, 145u8, 61u8, 37u8, 126u8, 150u8, 40u8, 121u8, 202u8,
                            209u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::punish_skeptic`]."]
                pub fn punish_skeptic(&self) -> ::subxt::tx::Payload<types::PunishSkeptic> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "punish_skeptic",
                        types::PunishSkeptic {},
                        [
                            69u8, 32u8, 105u8, 1u8, 25u8, 240u8, 148u8, 136u8, 141u8, 97u8, 247u8,
                            14u8, 18u8, 169u8, 184u8, 247u8, 89u8, 145u8, 239u8, 51u8, 161u8,
                            149u8, 37u8, 127u8, 160u8, 54u8, 144u8, 222u8, 54u8, 135u8, 184u8,
                            244u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_membership`]."]
                pub fn claim_membership(&self) -> ::subxt::tx::Payload<types::ClaimMembership> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "claim_membership",
                        types::ClaimMembership {},
                        [
                            129u8, 50u8, 134u8, 231u8, 159u8, 194u8, 140u8, 16u8, 139u8, 189u8,
                            131u8, 82u8, 150u8, 112u8, 138u8, 116u8, 3u8, 28u8, 183u8, 151u8, 19u8,
                            122u8, 29u8, 152u8, 88u8, 123u8, 34u8, 84u8, 42u8, 12u8, 230u8, 220u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::bestow_membership`]."]
                pub fn bestow_membership(
                    &self,
                    candidate: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::BestowMembership> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "bestow_membership",
                        types::BestowMembership { candidate },
                        [
                            146u8, 123u8, 220u8, 105u8, 41u8, 24u8, 3u8, 83u8, 38u8, 64u8, 93u8,
                            69u8, 149u8, 46u8, 177u8, 32u8, 197u8, 152u8, 186u8, 198u8, 39u8, 47u8,
                            54u8, 174u8, 86u8, 41u8, 170u8, 74u8, 107u8, 141u8, 169u8, 222u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kick_candidate`]."]
                pub fn kick_candidate(
                    &self,
                    candidate: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::KickCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "kick_candidate",
                        types::KickCandidate { candidate },
                        [
                            51u8, 17u8, 10u8, 153u8, 91u8, 22u8, 117u8, 204u8, 32u8, 141u8, 59u8,
                            94u8, 240u8, 99u8, 247u8, 217u8, 233u8, 39u8, 132u8, 191u8, 225u8,
                            74u8, 140u8, 182u8, 106u8, 74u8, 90u8, 129u8, 71u8, 240u8, 5u8, 70u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::resign_candidacy`]."]
                pub fn resign_candidacy(&self) -> ::subxt::tx::Payload<types::ResignCandidacy> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "resign_candidacy",
                        types::ResignCandidacy {},
                        [
                            40u8, 237u8, 128u8, 221u8, 162u8, 143u8, 104u8, 151u8, 11u8, 97u8,
                            212u8, 53u8, 26u8, 145u8, 124u8, 196u8, 155u8, 118u8, 232u8, 251u8,
                            42u8, 35u8, 11u8, 149u8, 78u8, 99u8, 6u8, 56u8, 23u8, 166u8, 167u8,
                            116u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::drop_candidate`]."]
                pub fn drop_candidate(
                    &self,
                    candidate: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::DropCandidate> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "drop_candidate",
                        types::DropCandidate { candidate },
                        [
                            140u8, 7u8, 82u8, 134u8, 101u8, 180u8, 217u8, 22u8, 204u8, 194u8,
                            125u8, 165u8, 69u8, 7u8, 193u8, 0u8, 33u8, 246u8, 43u8, 221u8, 110u8,
                            105u8, 227u8, 61u8, 22u8, 110u8, 98u8, 141u8, 44u8, 212u8, 55u8, 157u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cleanup_candidacy`]."]
                pub fn cleanup_candidacy(
                    &self,
                    candidate: ::subxt::utils::AccountId32,
                    max: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CleanupCandidacy> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "cleanup_candidacy",
                        types::CleanupCandidacy { candidate, max },
                        [
                            115u8, 111u8, 140u8, 201u8, 68u8, 53u8, 116u8, 204u8, 131u8, 66u8,
                            13u8, 123u8, 157u8, 235u8, 252u8, 24u8, 126u8, 233u8, 80u8, 227u8,
                            130u8, 231u8, 81u8, 23u8, 104u8, 39u8, 166u8, 3u8, 231u8, 137u8, 172u8,
                            107u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cleanup_challenge`]."]
                pub fn cleanup_challenge(
                    &self,
                    challenge_round: ::core::primitive::u32,
                    max: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CleanupChallenge> {
                    ::subxt::tx::Payload::new_static(
                        "Society",
                        "cleanup_challenge",
                        types::CleanupChallenge {
                            challenge_round,
                            max,
                        },
                        [
                            73u8, 255u8, 108u8, 225u8, 234u8, 208u8, 103u8, 118u8, 74u8, 166u8,
                            3u8, 65u8, 1u8, 99u8, 21u8, 240u8, 174u8, 50u8, 146u8, 186u8, 27u8,
                            98u8, 114u8, 159u8, 123u8, 19u8, 225u8, 219u8, 13u8, 56u8, 86u8, 148u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_society::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The society is founded by the given identity."]
            pub struct Founded {
                pub founder: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Founded {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Founded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A membership bid just happened. The given account is the candidate's ID and their offer"]
            #[doc = "is the second."]
            pub struct Bid {
                pub candidate_id: ::subxt::utils::AccountId32,
                pub offer: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Bid {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Bid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A membership bid just happened by vouching. The given account is the candidate's ID and"]
            #[doc = "their offer is the second. The vouching party is the third."]
            pub struct Vouch {
                pub candidate_id: ::subxt::utils::AccountId32,
                pub offer: ::core::primitive::u128,
                pub vouching: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Vouch {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Vouch";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A candidate was dropped (due to an excess of bids in the system)."]
            pub struct AutoUnbid {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for AutoUnbid {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "AutoUnbid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A candidate was dropped (by their request)."]
            pub struct Unbid {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Unbid {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Unbid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A candidate was dropped (by request of who vouched for them)."]
            pub struct Unvouch {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Unvouch {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Unvouch";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A group of candidates have been inducted. The batch's primary is the first value, the"]
            #[doc = "batch in full is the second."]
            pub struct Inducted {
                pub primary: ::subxt::utils::AccountId32,
                pub candidates: ::std::vec::Vec<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for Inducted {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Inducted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A suspended member has been judged."]
            pub struct SuspendedMemberJudgement {
                pub who: ::subxt::utils::AccountId32,
                pub judged: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for SuspendedMemberJudgement {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "SuspendedMemberJudgement";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A candidate has been suspended"]
            pub struct CandidateSuspended {
                pub candidate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for CandidateSuspended {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "CandidateSuspended";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has been suspended"]
            pub struct MemberSuspended {
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberSuspended {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "MemberSuspended";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has been challenged"]
            pub struct Challenged {
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Challenged {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Challenged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A vote has been placed"]
            pub struct Vote {
                pub candidate: ::subxt::utils::AccountId32,
                pub voter: ::subxt::utils::AccountId32,
                pub vote: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for Vote {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Vote";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A vote has been placed for a defending member"]
            pub struct DefenderVote {
                pub voter: ::subxt::utils::AccountId32,
                pub vote: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for DefenderVote {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "DefenderVote";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new set of \\[params\\] has been set for the group."]
            pub struct NewParams {
                pub params: runtime_types::pallet_society::GroupParams<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for NewParams {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "NewParams";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Society is unfounded."]
            pub struct Unfounded {
                pub founder: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Unfounded {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Unfounded";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some funds were deposited into the society account."]
            pub struct Deposit {
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A \\[member\\] got elevated to \\[rank\\]."]
            pub struct Elevated {
                pub member: ::subxt::utils::AccountId32,
                pub rank: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Elevated {
                const PALLET: &'static str = "Society";
                const EVENT: &'static str = "Elevated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The max number of members for the society at one time."]
                pub fn parameters(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::GroupParams<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Parameters",
                        vec![],
                        [
                            211u8, 240u8, 232u8, 62u8, 29u8, 63u8, 208u8, 3u8, 58u8, 184u8, 215u8,
                            179u8, 125u8, 49u8, 24u8, 97u8, 127u8, 110u8, 87u8, 97u8, 212u8, 153u8,
                            237u8, 17u8, 150u8, 75u8, 126u8, 25u8, 181u8, 14u8, 181u8, 155u8,
                        ],
                    )
                }
                #[doc = " Amount of our account balance that is specifically for the next round's bid(s)."]
                pub fn pot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Pot",
                        vec![],
                        [
                            98u8, 77u8, 215u8, 220u8, 51u8, 87u8, 188u8, 65u8, 72u8, 231u8, 34u8,
                            161u8, 61u8, 59u8, 66u8, 105u8, 128u8, 23u8, 249u8, 27u8, 10u8, 0u8,
                            251u8, 16u8, 235u8, 163u8, 239u8, 74u8, 197u8, 226u8, 58u8, 215u8,
                        ],
                    )
                }
                #[doc = " The first member."]
                pub fn founder(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Founder",
                        vec![],
                        [
                            14u8, 6u8, 181u8, 186u8, 64u8, 213u8, 48u8, 110u8, 242u8, 50u8, 144u8,
                            77u8, 38u8, 127u8, 161u8, 54u8, 204u8, 119u8, 1u8, 218u8, 12u8, 57u8,
                            165u8, 32u8, 28u8, 34u8, 46u8, 12u8, 217u8, 65u8, 27u8, 1u8,
                        ],
                    )
                }
                #[doc = " The most primary from the most recently approved rank 0 members in the society."]
                pub fn head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Head",
                        vec![],
                        [
                            95u8, 2u8, 23u8, 237u8, 130u8, 169u8, 84u8, 51u8, 1u8, 178u8, 234u8,
                            194u8, 139u8, 35u8, 222u8, 150u8, 246u8, 176u8, 97u8, 103u8, 211u8,
                            198u8, 165u8, 1u8, 224u8, 204u8, 10u8, 91u8, 6u8, 179u8, 189u8, 170u8,
                        ],
                    )
                }
                #[doc = " A hash of the rules of this society concerning membership. Can only be set once and"]
                #[doc = " only by the founder."]
                pub fn rules(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Rules",
                        vec![],
                        [
                            119u8, 249u8, 119u8, 89u8, 243u8, 239u8, 149u8, 15u8, 238u8, 40u8,
                            172u8, 198u8, 24u8, 107u8, 57u8, 39u8, 155u8, 36u8, 13u8, 72u8, 153u8,
                            101u8, 39u8, 146u8, 38u8, 161u8, 195u8, 69u8, 79u8, 204u8, 172u8,
                            207u8,
                        ],
                    )
                }
                #[doc = " The current members and their rank. Doesn't include `SuspendedMembers`."]
                pub fn members(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::MemberRecord,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Members",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            127u8, 1u8, 129u8, 166u8, 160u8, 47u8, 208u8, 31u8, 24u8, 44u8, 20u8,
                            183u8, 20u8, 251u8, 76u8, 162u8, 77u8, 166u8, 86u8, 55u8, 102u8, 136u8,
                            160u8, 236u8, 68u8, 89u8, 212u8, 15u8, 13u8, 5u8, 204u8, 151u8,
                        ],
                    )
                }
                #[doc = " The current members and their rank. Doesn't include `SuspendedMembers`."]
                pub fn members_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::MemberRecord,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Members",
                        Vec::new(),
                        [
                            127u8, 1u8, 129u8, 166u8, 160u8, 47u8, 208u8, 31u8, 24u8, 44u8, 20u8,
                            183u8, 20u8, 251u8, 76u8, 162u8, 77u8, 166u8, 86u8, 55u8, 102u8, 136u8,
                            160u8, 236u8, 68u8, 89u8, 212u8, 15u8, 13u8, 5u8, 204u8, 151u8,
                        ],
                    )
                }
                #[doc = " Information regarding rank-0 payouts, past and future."]
                pub fn payouts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::PayoutRecord<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        )>,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Payouts",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            14u8, 73u8, 84u8, 33u8, 68u8, 167u8, 84u8, 111u8, 119u8, 240u8, 164u8,
                            187u8, 182u8, 253u8, 81u8, 42u8, 205u8, 249u8, 85u8, 193u8, 32u8,
                            210u8, 87u8, 86u8, 159u8, 125u8, 61u8, 53u8, 185u8, 72u8, 79u8, 131u8,
                        ],
                    )
                }
                #[doc = " Information regarding rank-0 payouts, past and future."]
                pub fn payouts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::PayoutRecord<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        )>,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Payouts",
                        Vec::new(),
                        [
                            14u8, 73u8, 84u8, 33u8, 68u8, 167u8, 84u8, 111u8, 119u8, 240u8, 164u8,
                            187u8, 182u8, 253u8, 81u8, 42u8, 205u8, 249u8, 85u8, 193u8, 32u8,
                            210u8, 87u8, 86u8, 159u8, 125u8, 61u8, 53u8, 185u8, 72u8, 79u8, 131u8,
                        ],
                    )
                }
                #[doc = " The number of items in `Members` currently. (Doesn't include `SuspendedMembers`.)"]
                pub fn member_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "MemberCount",
                        vec![],
                        [
                            251u8, 200u8, 97u8, 38u8, 125u8, 162u8, 19u8, 100u8, 249u8, 254u8,
                            42u8, 93u8, 64u8, 171u8, 2u8, 200u8, 129u8, 228u8, 211u8, 229u8, 152u8,
                            170u8, 228u8, 158u8, 212u8, 94u8, 17u8, 226u8, 194u8, 87u8, 189u8,
                            213u8,
                        ],
                    )
                }
                #[doc = " The current items in `Members` keyed by their unique index. Keys are densely populated"]
                #[doc = " `0..MemberCount` (does not include `MemberCount`)."]
                pub fn member_by_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "MemberByIndex",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            13u8, 233u8, 212u8, 149u8, 220u8, 158u8, 17u8, 27u8, 201u8, 61u8,
                            202u8, 248u8, 192u8, 37u8, 199u8, 73u8, 32u8, 140u8, 204u8, 206u8,
                            239u8, 43u8, 241u8, 41u8, 9u8, 51u8, 125u8, 171u8, 47u8, 149u8, 63u8,
                            159u8,
                        ],
                    )
                }
                #[doc = " The current items in `Members` keyed by their unique index. Keys are densely populated"]
                #[doc = " `0..MemberCount` (does not include `MemberCount`)."]
                pub fn member_by_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "MemberByIndex",
                        Vec::new(),
                        [
                            13u8, 233u8, 212u8, 149u8, 220u8, 158u8, 17u8, 27u8, 201u8, 61u8,
                            202u8, 248u8, 192u8, 37u8, 199u8, 73u8, 32u8, 140u8, 204u8, 206u8,
                            239u8, 43u8, 241u8, 41u8, 9u8, 51u8, 125u8, 171u8, 47u8, 149u8, 63u8,
                            159u8,
                        ],
                    )
                }
                #[doc = " The set of suspended members, with their old membership record."]
                pub fn suspended_members(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::MemberRecord,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "SuspendedMembers",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            110u8, 172u8, 171u8, 214u8, 118u8, 194u8, 235u8, 158u8, 217u8, 62u8,
                            99u8, 112u8, 237u8, 5u8, 55u8, 81u8, 40u8, 211u8, 182u8, 62u8, 230u8,
                            168u8, 223u8, 179u8, 97u8, 191u8, 141u8, 103u8, 158u8, 52u8, 247u8,
                            5u8,
                        ],
                    )
                }
                #[doc = " The set of suspended members, with their old membership record."]
                pub fn suspended_members_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::MemberRecord,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "SuspendedMembers",
                        Vec::new(),
                        [
                            110u8, 172u8, 171u8, 214u8, 118u8, 194u8, 235u8, 158u8, 217u8, 62u8,
                            99u8, 112u8, 237u8, 5u8, 55u8, 81u8, 40u8, 211u8, 182u8, 62u8, 230u8,
                            168u8, 223u8, 179u8, 97u8, 191u8, 141u8, 103u8, 158u8, 52u8, 247u8,
                            5u8,
                        ],
                    )
                }
                #[doc = " The number of rounds which have passed."]
                pub fn round_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "RoundCount",
                        vec![],
                        [
                            61u8, 189u8, 115u8, 157u8, 36u8, 97u8, 192u8, 96u8, 138u8, 168u8,
                            222u8, 58u8, 117u8, 199u8, 176u8, 146u8, 232u8, 167u8, 52u8, 190u8,
                            41u8, 11u8, 181u8, 214u8, 79u8, 183u8, 134u8, 86u8, 164u8, 47u8, 178u8,
                            192u8,
                        ],
                    )
                }
                #[doc = " The current bids, stored ordered by the value of the bid."]
                pub fn bids(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_society::Bid<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Bids",
                        vec![],
                        [
                            78u8, 50u8, 40u8, 170u8, 153u8, 68u8, 190u8, 160u8, 48u8, 116u8, 184u8,
                            141u8, 146u8, 133u8, 89u8, 3u8, 22u8, 143u8, 119u8, 70u8, 94u8, 58u8,
                            214u8, 1u8, 187u8, 224u8, 14u8, 60u8, 249u8, 119u8, 63u8, 94u8,
                        ],
                    )
                }
                pub fn candidates(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Candidacy<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Candidates",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            223u8, 184u8, 46u8, 187u8, 146u8, 163u8, 46u8, 214u8, 170u8, 240u8,
                            122u8, 110u8, 33u8, 187u8, 137u8, 73u8, 185u8, 234u8, 100u8, 245u8,
                            246u8, 125u8, 100u8, 216u8, 104u8, 77u8, 213u8, 230u8, 142u8, 120u8,
                            73u8, 2u8,
                        ],
                    )
                }
                pub fn candidates_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Candidacy<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Candidates",
                        Vec::new(),
                        [
                            223u8, 184u8, 46u8, 187u8, 146u8, 163u8, 46u8, 214u8, 170u8, 240u8,
                            122u8, 110u8, 33u8, 187u8, 137u8, 73u8, 185u8, 234u8, 100u8, 245u8,
                            246u8, 125u8, 100u8, 216u8, 104u8, 77u8, 213u8, 230u8, 142u8, 120u8,
                            73u8, 2u8,
                        ],
                    )
                }
                #[doc = " The current skeptic."]
                pub fn skeptic(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Skeptic",
                        vec![],
                        [
                            121u8, 103u8, 195u8, 11u8, 87u8, 129u8, 61u8, 69u8, 218u8, 17u8, 101u8,
                            207u8, 249u8, 207u8, 18u8, 103u8, 253u8, 240u8, 132u8, 46u8, 47u8,
                            27u8, 85u8, 194u8, 34u8, 145u8, 16u8, 208u8, 245u8, 192u8, 191u8,
                            118u8,
                        ],
                    )
                }
                #[doc = " Double map from Candidate -> Voter -> (Maybe) Vote."]
                pub fn votes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Votes",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            154u8, 117u8, 33u8, 104u8, 70u8, 62u8, 59u8, 56u8, 17u8, 225u8, 205u8,
                            229u8, 241u8, 59u8, 113u8, 198u8, 1u8, 239u8, 44u8, 36u8, 129u8, 102u8,
                            35u8, 177u8, 36u8, 219u8, 82u8, 195u8, 126u8, 110u8, 1u8, 207u8,
                        ],
                    )
                }
                #[doc = " Double map from Candidate -> Voter -> (Maybe) Vote."]
                pub fn votes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Votes",
                        Vec::new(),
                        [
                            154u8, 117u8, 33u8, 104u8, 70u8, 62u8, 59u8, 56u8, 17u8, 225u8, 205u8,
                            229u8, 241u8, 59u8, 113u8, 198u8, 1u8, 239u8, 44u8, 36u8, 129u8, 102u8,
                            35u8, 177u8, 36u8, 219u8, 82u8, 195u8, 126u8, 110u8, 1u8, 207u8,
                        ],
                    )
                }
                #[doc = " Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor."]
                pub fn vote_clear_cursor(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "VoteClearCursor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            53u8, 144u8, 1u8, 251u8, 132u8, 61u8, 61u8, 6u8, 177u8, 127u8, 203u8,
                            228u8, 205u8, 59u8, 94u8, 160u8, 75u8, 57u8, 246u8, 27u8, 222u8, 63u8,
                            69u8, 140u8, 137u8, 228u8, 214u8, 18u8, 67u8, 157u8, 217u8, 168u8,
                        ],
                    )
                }
                #[doc = " Clear-cursor for Vote, map from Candidate -> (Maybe) Cursor."]
                pub fn vote_clear_cursor_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "VoteClearCursor",
                        Vec::new(),
                        [
                            53u8, 144u8, 1u8, 251u8, 132u8, 61u8, 61u8, 6u8, 177u8, 127u8, 203u8,
                            228u8, 205u8, 59u8, 94u8, 160u8, 75u8, 57u8, 246u8, 27u8, 222u8, 63u8,
                            69u8, 140u8, 137u8, 228u8, 214u8, 18u8, 67u8, 157u8, 217u8, 168u8,
                        ],
                    )
                }
                #[doc = " At the end of the claim period, this contains the most recently approved members (along with"]
                #[doc = " their bid and round ID) who is from the most recent round with the lowest bid. They will"]
                #[doc = " become the new `Head`."]
                pub fn next_head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::IntakeRecord<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "NextHead",
                        vec![],
                        [
                            64u8, 118u8, 253u8, 247u8, 56u8, 39u8, 156u8, 38u8, 150u8, 234u8,
                            190u8, 11u8, 45u8, 236u8, 15u8, 181u8, 6u8, 165u8, 226u8, 99u8, 46u8,
                            55u8, 254u8, 40u8, 2u8, 233u8, 22u8, 211u8, 133u8, 36u8, 177u8, 46u8,
                        ],
                    )
                }
                #[doc = " The number of challenge rounds there have been. Used to identify stale DefenderVotes."]
                pub fn challenge_round_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "ChallengeRoundCount",
                        vec![],
                        [
                            111u8, 74u8, 218u8, 126u8, 43u8, 20u8, 75u8, 119u8, 166u8, 4u8, 56u8,
                            24u8, 206u8, 10u8, 236u8, 17u8, 62u8, 124u8, 129u8, 39u8, 197u8, 157u8,
                            153u8, 147u8, 68u8, 167u8, 220u8, 125u8, 44u8, 95u8, 82u8, 64u8,
                        ],
                    )
                }
                #[doc = " The defending member currently being challenged, along with a running tally of votes."]
                pub fn defending(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_society::Tally,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "Defending",
                        vec![],
                        [
                            174u8, 26u8, 64u8, 113u8, 188u8, 16u8, 93u8, 188u8, 155u8, 200u8, 13u8,
                            241u8, 98u8, 60u8, 53u8, 80u8, 78u8, 221u8, 14u8, 172u8, 236u8, 133u8,
                            130u8, 74u8, 80u8, 95u8, 205u8, 86u8, 170u8, 0u8, 216u8, 185u8,
                        ],
                    )
                }
                #[doc = " Votes for the defender, keyed by challenge round."]
                pub fn defender_votes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "DefenderVotes",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            107u8, 208u8, 220u8, 18u8, 151u8, 172u8, 24u8, 24u8, 5u8, 46u8, 217u8,
                            217u8, 126u8, 93u8, 131u8, 72u8, 215u8, 5u8, 18u8, 244u8, 96u8, 83u8,
                            195u8, 241u8, 247u8, 188u8, 33u8, 180u8, 28u8, 104u8, 118u8, 23u8,
                        ],
                    )
                }
                #[doc = " Votes for the defender, keyed by challenge round."]
                pub fn defender_votes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_society::Vote,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Society",
                        "DefenderVotes",
                        Vec::new(),
                        [
                            107u8, 208u8, 220u8, 18u8, 151u8, 172u8, 24u8, 24u8, 5u8, 46u8, 217u8,
                            217u8, 126u8, 93u8, 131u8, 72u8, 215u8, 5u8, 18u8, 244u8, 96u8, 83u8,
                            195u8, 241u8, 247u8, 188u8, 33u8, 180u8, 28u8, 104u8, 118u8, 23u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The societies's pallet id"]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The maximum number of strikes before a member gets funds slashed."]
                pub fn grace_strikes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "GraceStrikes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount of incentive paid within each period. Doesn't include VoterTip."]
                pub fn period_spend(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "PeriodSpend",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The number of blocks on which new candidates should be voted on. Together with"]
                #[doc = " `ClaimPeriod`, this sums to the number of blocks between candidate intake periods."]
                pub fn voting_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "VotingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The number of blocks on which new candidates can claim their membership and be the"]
                #[doc = " named head."]
                pub fn claim_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "ClaimPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum duration of the payout lock."]
                pub fn max_lock_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "MaxLockDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The number of blocks between membership challenges."]
                pub fn challenge_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "ChallengePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of payouts a member may have waiting unclaimed."]
                pub fn max_payouts(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "MaxPayouts",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of bids at once."]
                pub fn max_bids(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Society",
                        "MaxBids",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod recovery {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_recovery::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_recovery::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsRecovered {
                    pub account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for AsRecovered {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "as_recovered";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetRecovered {
                    pub lost: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub rescuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetRecovered {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "set_recovered";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreateRecovery {
                    pub friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub threshold: ::core::primitive::u16,
                    pub delay_period: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CreateRecovery {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "create_recovery";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InitiateRecovery {
                    pub account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for InitiateRecovery {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "initiate_recovery";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VouchRecovery {
                    pub lost: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub rescuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for VouchRecovery {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "vouch_recovery";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimRecovery {
                    pub account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClaimRecovery {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "claim_recovery";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CloseRecovery {
                    pub rescuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for CloseRecovery {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "close_recovery";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveRecovery;
                impl ::subxt::blocks::StaticExtrinsic for RemoveRecovery {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "remove_recovery";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelRecovered {
                    pub account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelRecovered {
                    const PALLET: &'static str = "Recovery";
                    const CALL: &'static str = "cancel_recovered";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::as_recovered`]."]
                pub fn as_recovered(
                    &self,
                    account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::AsRecovered> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "as_recovered",
                        types::AsRecovered {
                            account,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            199u8, 144u8, 90u8, 4u8, 57u8, 13u8, 220u8, 194u8, 49u8, 180u8, 182u8,
                            254u8, 128u8, 116u8, 150u8, 78u8, 139u8, 183u8, 35u8, 72u8, 41u8,
                            158u8, 246u8, 98u8, 234u8, 21u8, 175u8, 4u8, 218u8, 10u8, 223u8, 42u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_recovered`]."]
                pub fn set_recovered(
                    &self,
                    lost: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    rescuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetRecovered> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "set_recovered",
                        types::SetRecovered { lost, rescuer },
                        [
                            181u8, 105u8, 123u8, 200u8, 152u8, 95u8, 106u8, 74u8, 106u8, 92u8,
                            187u8, 25u8, 23u8, 83u8, 69u8, 155u8, 206u8, 226u8, 211u8, 161u8,
                            216u8, 67u8, 64u8, 246u8, 234u8, 248u8, 99u8, 206u8, 54u8, 201u8, 44u8,
                            163u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::create_recovery`]."]
                pub fn create_recovery(
                    &self,
                    friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    threshold: ::core::primitive::u16,
                    delay_period: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CreateRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "create_recovery",
                        types::CreateRecovery {
                            friends,
                            threshold,
                            delay_period,
                        },
                        [
                            36u8, 175u8, 11u8, 85u8, 95u8, 170u8, 58u8, 193u8, 102u8, 18u8, 117u8,
                            27u8, 199u8, 214u8, 70u8, 47u8, 129u8, 130u8, 109u8, 242u8, 240u8,
                            255u8, 120u8, 176u8, 40u8, 243u8, 175u8, 71u8, 3u8, 91u8, 186u8, 220u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::initiate_recovery`]."]
                pub fn initiate_recovery(
                    &self,
                    account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::InitiateRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "initiate_recovery",
                        types::InitiateRecovery { account },
                        [
                            56u8, 84u8, 36u8, 57u8, 221u8, 111u8, 15u8, 20u8, 233u8, 208u8, 135u8,
                            5u8, 136u8, 54u8, 146u8, 80u8, 97u8, 148u8, 186u8, 194u8, 116u8, 152u8,
                            88u8, 255u8, 212u8, 122u8, 49u8, 217u8, 65u8, 3u8, 139u8, 98u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vouch_recovery`]."]
                pub fn vouch_recovery(
                    &self,
                    lost: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    rescuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::VouchRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "vouch_recovery",
                        types::VouchRecovery { lost, rescuer },
                        [
                            88u8, 253u8, 241u8, 151u8, 32u8, 74u8, 100u8, 208u8, 250u8, 5u8, 44u8,
                            193u8, 33u8, 127u8, 148u8, 131u8, 141u8, 23u8, 15u8, 118u8, 243u8,
                            75u8, 109u8, 234u8, 208u8, 215u8, 147u8, 181u8, 166u8, 40u8, 140u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_recovery`]."]
                pub fn claim_recovery(
                    &self,
                    account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ClaimRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "claim_recovery",
                        types::ClaimRecovery { account },
                        [
                            102u8, 157u8, 185u8, 153u8, 1u8, 128u8, 144u8, 154u8, 95u8, 242u8,
                            200u8, 164u8, 107u8, 204u8, 244u8, 180u8, 35u8, 16u8, 25u8, 38u8,
                            222u8, 114u8, 143u8, 238u8, 125u8, 218u8, 235u8, 213u8, 0u8, 235u8,
                            91u8, 88u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close_recovery`]."]
                pub fn close_recovery(
                    &self,
                    rescuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::CloseRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "close_recovery",
                        types::CloseRecovery { rescuer },
                        [
                            48u8, 37u8, 121u8, 8u8, 201u8, 89u8, 204u8, 221u8, 149u8, 226u8, 191u8,
                            122u8, 239u8, 248u8, 28u8, 126u8, 155u8, 160u8, 0u8, 9u8, 141u8, 48u8,
                            81u8, 131u8, 45u8, 170u8, 14u8, 163u8, 184u8, 11u8, 3u8, 143u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_recovery`]."]
                pub fn remove_recovery(&self) -> ::subxt::tx::Payload<types::RemoveRecovery> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "remove_recovery",
                        types::RemoveRecovery {},
                        [
                            11u8, 38u8, 133u8, 172u8, 212u8, 252u8, 57u8, 216u8, 42u8, 202u8,
                            206u8, 91u8, 115u8, 91u8, 242u8, 123u8, 95u8, 196u8, 172u8, 243u8,
                            164u8, 1u8, 69u8, 180u8, 40u8, 68u8, 208u8, 221u8, 161u8, 250u8, 8u8,
                            72u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_recovered`]."]
                pub fn cancel_recovered(
                    &self,
                    account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::CancelRecovered> {
                    ::subxt::tx::Payload::new_static(
                        "Recovery",
                        "cancel_recovered",
                        types::CancelRecovered { account },
                        [
                            135u8, 91u8, 219u8, 37u8, 42u8, 87u8, 6u8, 237u8, 123u8, 7u8, 128u8,
                            173u8, 69u8, 90u8, 154u8, 155u8, 148u8, 186u8, 17u8, 46u8, 159u8, 4u8,
                            224u8, 245u8, 132u8, 32u8, 161u8, 170u8, 174u8, 73u8, 91u8, 78u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_recovery::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A recovery process has been set up for an account."]
            pub struct RecoveryCreated {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryCreated {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A recovery process has been initiated for lost account by rescuer account."]
            pub struct RecoveryInitiated {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryInitiated {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryInitiated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A recovery process for lost account by rescuer account has been vouched for by sender."]
            pub struct RecoveryVouched {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
                pub sender: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryVouched {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryVouched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A recovery process for lost account by rescuer account has been closed."]
            pub struct RecoveryClosed {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryClosed {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryClosed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Lost account has been successfully recovered by rescuer account."]
            pub struct AccountRecovered {
                pub lost_account: ::subxt::utils::AccountId32,
                pub rescuer_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for AccountRecovered {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "AccountRecovered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A recovery process has been removed for an account."]
            pub struct RecoveryRemoved {
                pub lost_account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for RecoveryRemoved {
                const PALLET: &'static str = "Recovery";
                const EVENT: &'static str = "RecoveryRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of recoverable accounts and their recovery configuration."]
                pub fn recoverable(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::RecoveryConfig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Recoverable",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            84u8, 43u8, 42u8, 106u8, 29u8, 77u8, 246u8, 145u8, 32u8, 34u8, 15u8,
                            200u8, 145u8, 255u8, 197u8, 243u8, 166u8, 206u8, 13u8, 40u8, 85u8,
                            126u8, 55u8, 138u8, 37u8, 159u8, 74u8, 199u8, 17u8, 72u8, 52u8, 209u8,
                        ],
                    )
                }
                #[doc = " The set of recoverable accounts and their recovery configuration."]
                pub fn recoverable_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::RecoveryConfig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Recoverable",
                        Vec::new(),
                        [
                            84u8, 43u8, 42u8, 106u8, 29u8, 77u8, 246u8, 145u8, 32u8, 34u8, 15u8,
                            200u8, 145u8, 255u8, 197u8, 243u8, 166u8, 206u8, 13u8, 40u8, 85u8,
                            126u8, 55u8, 138u8, 37u8, 159u8, 74u8, 199u8, 17u8, 72u8, 52u8, 209u8,
                        ],
                    )
                }
                #[doc = " Active recovery attempts."]
                #[doc = ""]
                #[doc = " First account is the account to be recovered, and the second account"]
                #[doc = " is the user trying to recover the account."]
                pub fn active_recoveries(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::ActiveRecovery<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "ActiveRecoveries",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            244u8, 129u8, 220u8, 238u8, 39u8, 91u8, 48u8, 219u8, 29u8, 204u8, 88u8,
                            191u8, 205u8, 221u8, 203u8, 237u8, 10u8, 9u8, 187u8, 100u8, 214u8,
                            58u8, 74u8, 131u8, 59u8, 160u8, 192u8, 60u8, 115u8, 173u8, 61u8, 80u8,
                        ],
                    )
                }
                #[doc = " Active recovery attempts."]
                #[doc = ""]
                #[doc = " First account is the account to be recovered, and the second account"]
                #[doc = " is the user trying to recover the account."]
                pub fn active_recoveries_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_recovery::ActiveRecovery<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "ActiveRecoveries",
                        Vec::new(),
                        [
                            244u8, 129u8, 220u8, 238u8, 39u8, 91u8, 48u8, 219u8, 29u8, 204u8, 88u8,
                            191u8, 205u8, 221u8, 203u8, 237u8, 10u8, 9u8, 187u8, 100u8, 214u8,
                            58u8, 74u8, 131u8, 59u8, 160u8, 192u8, 60u8, 115u8, 173u8, 61u8, 80u8,
                        ],
                    )
                }
                #[doc = " The list of allowed proxy accounts."]
                #[doc = ""]
                #[doc = " Map from the user who can access it to the recovered account."]
                pub fn proxy(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Proxy",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            57u8, 157u8, 122u8, 194u8, 71u8, 80u8, 129u8, 79u8, 156u8, 32u8, 4u8,
                            215u8, 86u8, 93u8, 86u8, 99u8, 209u8, 197u8, 159u8, 64u8, 160u8, 200u8,
                            51u8, 115u8, 1u8, 27u8, 8u8, 180u8, 90u8, 209u8, 27u8, 202u8,
                        ],
                    )
                }
                #[doc = " The list of allowed proxy accounts."]
                #[doc = ""]
                #[doc = " Map from the user who can access it to the recovered account."]
                pub fn proxy_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Recovery",
                        "Proxy",
                        Vec::new(),
                        [
                            57u8, 157u8, 122u8, 194u8, 71u8, 80u8, 129u8, 79u8, 156u8, 32u8, 4u8,
                            215u8, 86u8, 93u8, 86u8, 99u8, 209u8, 197u8, 159u8, 64u8, 160u8, 200u8,
                            51u8, 115u8, 1u8, 27u8, 8u8, 180u8, 90u8, 209u8, 27u8, 202u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a recovery configuration."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `2 + sizeof(BlockNumber, Balance)` bytes."]
                pub fn config_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "ConfigDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per additional user when creating a recovery"]
                #[doc = " configuration."]
                #[doc = ""]
                #[doc = " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage"]
                #[doc = " value."]
                pub fn friend_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "FriendDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of friends allowed in a recovery configuration."]
                #[doc = ""]
                #[doc = " NOTE: The threshold programmed in this Pallet uses u16, so it does"]
                #[doc = " not really make sense to have a limit here greater than u16::MAX."]
                #[doc = " But also, that is a lot more than you should probably set this value"]
                #[doc = " to anyway..."]
                pub fn max_friends(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "MaxFriends",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base amount of currency needed to reserve for starting a recovery."]
                #[doc = ""]
                #[doc = " This is primarily held for deterring malicious recovery attempts, and should"]
                #[doc = " have a value large enough that a bad actor would choose not to place this"]
                #[doc = " deposit. It also acts to fund additional storage item whose value size is"]
                #[doc = " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable"]
                #[doc = " threshold."]
                pub fn recovery_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Recovery",
                        "RecoveryDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod vesting {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the vesting pallet."]
        pub type Error = runtime_types::pallet_vesting::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_vesting::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vest;
                impl ::subxt::blocks::StaticExtrinsic for Vest {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VestOther {
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for VestOther {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VestedTransfer {
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for VestedTransfer {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vested_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceVestedTransfer {
                    pub source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceVestedTransfer {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "force_vested_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MergeSchedules {
                    pub schedule1_index: ::core::primitive::u32,
                    pub schedule2_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for MergeSchedules {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "merge_schedules";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::vest`]."]
                pub fn vest(&self) -> ::subxt::tx::Payload<types::Vest> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vest",
                        types::Vest {},
                        [
                            149u8, 89u8, 178u8, 148u8, 127u8, 127u8, 155u8, 60u8, 114u8, 126u8,
                            204u8, 123u8, 166u8, 70u8, 104u8, 208u8, 186u8, 69u8, 139u8, 181u8,
                            151u8, 154u8, 235u8, 161u8, 191u8, 35u8, 111u8, 60u8, 21u8, 165u8,
                            44u8, 122u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vest_other`]."]
                pub fn vest_other(
                    &self,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::VestOther> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vest_other",
                        types::VestOther { target },
                        [
                            237u8, 98u8, 131u8, 246u8, 166u8, 177u8, 74u8, 207u8, 136u8, 120u8,
                            117u8, 252u8, 197u8, 226u8, 72u8, 233u8, 141u8, 180u8, 220u8, 163u8,
                            64u8, 66u8, 95u8, 114u8, 143u8, 102u8, 158u8, 225u8, 44u8, 99u8, 75u8,
                            117u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vested_transfer`]."]
                pub fn vested_transfer(
                    &self,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::VestedTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "vested_transfer",
                        types::VestedTransfer { target, schedule },
                        [
                            208u8, 95u8, 120u8, 179u8, 8u8, 246u8, 213u8, 174u8, 133u8, 234u8,
                            117u8, 13u8, 25u8, 32u8, 245u8, 101u8, 168u8, 94u8, 255u8, 193u8,
                            236u8, 177u8, 164u8, 62u8, 113u8, 181u8, 105u8, 49u8, 133u8, 9u8,
                            133u8, 244u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_vested_transfer`]."]
                pub fn force_vested_transfer(
                    &self,
                    source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ForceVestedTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "force_vested_transfer",
                        types::ForceVestedTransfer {
                            source,
                            target,
                            schedule,
                        },
                        [
                            204u8, 15u8, 117u8, 96u8, 62u8, 131u8, 170u8, 139u8, 226u8, 58u8,
                            240u8, 170u8, 130u8, 15u8, 106u8, 168u8, 109u8, 93u8, 22u8, 185u8,
                            93u8, 211u8, 7u8, 234u8, 204u8, 30u8, 18u8, 239u8, 106u8, 196u8, 90u8,
                            240u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::merge_schedules`]."]
                pub fn merge_schedules(
                    &self,
                    schedule1_index: ::core::primitive::u32,
                    schedule2_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::MergeSchedules> {
                    ::subxt::tx::Payload::new_static(
                        "Vesting",
                        "merge_schedules",
                        types::MergeSchedules {
                            schedule1_index,
                            schedule2_index,
                        },
                        [
                            135u8, 49u8, 137u8, 222u8, 134u8, 94u8, 197u8, 182u8, 171u8, 57u8,
                            161u8, 6u8, 185u8, 130u8, 45u8, 30u8, 79u8, 77u8, 157u8, 118u8, 35u8,
                            249u8, 39u8, 10u8, 103u8, 160u8, 198u8, 75u8, 26u8, 50u8, 64u8, 26u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_vesting::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The amount vested has been updated. This could indicate a change in funds available."]
            #[doc = "The balance given is the amount which is left unvested (and thus locked)."]
            pub struct VestingUpdated {
                pub account: ::subxt::utils::AccountId32,
                pub unvested: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for VestingUpdated {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An \\[account\\] has become fully vested."]
            pub struct VestingCompleted {
                pub account: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for VestingCompleted {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingCompleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Information regarding the vesting of a given account."]
                pub fn vesting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "Vesting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            10u8, 98u8, 73u8, 242u8, 215u8, 4u8, 45u8, 227u8, 73u8, 203u8, 33u8,
                            105u8, 228u8, 247u8, 125u8, 99u8, 98u8, 38u8, 176u8, 123u8, 233u8,
                            219u8, 174u8, 118u8, 49u8, 172u8, 58u8, 162u8, 186u8, 110u8, 147u8,
                            122u8,
                        ],
                    )
                }
                #[doc = " Information regarding the vesting of a given account."]
                pub fn vesting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "Vesting",
                        Vec::new(),
                        [
                            10u8, 98u8, 73u8, 242u8, 215u8, 4u8, 45u8, 227u8, 73u8, 203u8, 33u8,
                            105u8, 228u8, 247u8, 125u8, 99u8, 98u8, 38u8, 176u8, 123u8, 233u8,
                            219u8, 174u8, 118u8, 49u8, 172u8, 58u8, 162u8, 186u8, 110u8, 147u8,
                            122u8,
                        ],
                    )
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " New networks start with latest version, as determined by the genesis build."]
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_vesting::Releases,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Vesting",
                        "StorageVersion",
                        vec![],
                        [
                            230u8, 137u8, 180u8, 133u8, 142u8, 124u8, 231u8, 234u8, 223u8, 10u8,
                            154u8, 98u8, 158u8, 253u8, 228u8, 80u8, 5u8, 9u8, 91u8, 210u8, 252u8,
                            9u8, 13u8, 195u8, 193u8, 164u8, 129u8, 113u8, 128u8, 218u8, 8u8, 40u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount transferred to call `vested_transfer`."]
                pub fn min_vested_transfer(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Vesting",
                        "MinVestedTransfer",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_vesting_schedules(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Vesting",
                        "MaxVestingSchedules",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod scheduler {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_scheduler::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_scheduler::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Schedule {
                    pub when: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Schedule {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Cancel {
                    pub when: ::core::primitive::u32,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Cancel {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleNamed {
                    pub id: [::core::primitive::u8; 32usize],
                    pub when: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelNamed {
                    pub id: [::core::primitive::u8; 32usize],
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel_named";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleAfter {
                    pub after: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_after";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ScheduleNamedAfter {
                    pub id: [::core::primitive::u8; 32usize],
                    pub after: ::core::primitive::u32,
                    pub maybe_periodic:
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                    pub priority: ::core::primitive::u8,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleNamedAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named_after";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::schedule`]."]
                pub fn schedule(
                    &self,
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::Schedule> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule",
                        types::Schedule {
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            93u8, 102u8, 4u8, 0u8, 162u8, 139u8, 163u8, 23u8, 173u8, 250u8, 128u8,
                            133u8, 82u8, 220u8, 9u8, 255u8, 159u8, 240u8, 94u8, 112u8, 142u8, 43u8,
                            91u8, 101u8, 241u8, 173u8, 201u8, 97u8, 134u8, 178u8, 119u8, 71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel`]."]
                pub fn cancel(
                    &self,
                    when: ::core::primitive::u32,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Cancel> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel",
                        types::Cancel { when, index },
                        [
                            32u8, 107u8, 14u8, 102u8, 56u8, 200u8, 68u8, 186u8, 192u8, 100u8,
                            152u8, 124u8, 171u8, 154u8, 230u8, 115u8, 62u8, 140u8, 88u8, 178u8,
                            119u8, 210u8, 222u8, 31u8, 134u8, 225u8, 133u8, 241u8, 42u8, 110u8,
                            147u8, 47u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::schedule_named`]."]
                pub fn schedule_named(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                    when: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ScheduleNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named",
                        types::ScheduleNamed {
                            id,
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            127u8, 90u8, 30u8, 93u8, 95u8, 35u8, 49u8, 86u8, 253u8, 132u8, 58u8,
                            226u8, 141u8, 146u8, 50u8, 40u8, 140u8, 96u8, 79u8, 226u8, 200u8,
                            117u8, 206u8, 205u8, 245u8, 32u8, 215u8, 61u8, 128u8, 33u8, 35u8,
                            107u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_named`]."]
                pub fn cancel_named(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                ) -> ::subxt::tx::Payload<types::CancelNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel_named",
                        types::CancelNamed { id },
                        [
                            205u8, 35u8, 28u8, 57u8, 224u8, 7u8, 49u8, 233u8, 236u8, 163u8, 93u8,
                            236u8, 103u8, 69u8, 65u8, 51u8, 121u8, 84u8, 9u8, 196u8, 147u8, 122u8,
                            227u8, 200u8, 181u8, 233u8, 62u8, 240u8, 174u8, 83u8, 129u8, 193u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::schedule_after`]."]
                pub fn schedule_after(
                    &self,
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ScheduleAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_after",
                        types::ScheduleAfter {
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            27u8, 188u8, 115u8, 96u8, 30u8, 53u8, 61u8, 120u8, 142u8, 246u8, 13u8,
                            209u8, 16u8, 50u8, 44u8, 87u8, 179u8, 63u8, 220u8, 37u8, 199u8, 145u8,
                            82u8, 14u8, 10u8, 206u8, 206u8, 37u8, 64u8, 33u8, 212u8, 5u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::schedule_named_after`]."]
                pub fn schedule_named_after(
                    &self,
                    id: [::core::primitive::u8; 32usize],
                    after: ::core::primitive::u32,
                    maybe_periodic: ::core::option::Option<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    priority: ::core::primitive::u8,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ScheduleNamedAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named_after",
                        types::ScheduleNamedAfter {
                            id,
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            165u8, 27u8, 109u8, 41u8, 57u8, 132u8, 210u8, 213u8, 104u8, 177u8,
                            157u8, 83u8, 209u8, 190u8, 179u8, 208u8, 177u8, 34u8, 153u8, 108u8,
                            88u8, 147u8, 88u8, 44u8, 248u8, 55u8, 18u8, 124u8, 108u8, 0u8, 59u8,
                            35u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_scheduler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Scheduled some task."]
            pub struct Scheduled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Scheduled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Scheduled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Canceled some task."]
            pub struct Canceled {
                pub when: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Canceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Dispatched some task."]
            pub struct Dispatched {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Dispatched {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Dispatched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The call for the provided hash was not found so the task has been aborted."]
            pub struct CallUnavailable {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for CallUnavailable {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "CallUnavailable";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
            pub struct PeriodicFailed {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for PeriodicFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PeriodicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given task can never be executed since it is overweight."]
            pub struct PermanentlyOverweight {
                pub task: (::core::primitive::u32, ::core::primitive::u32),
                pub id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
            }
            impl ::subxt::events::StaticEvent for PermanentlyOverweight {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PermanentlyOverweight";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn incomplete_since(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "IncompleteSince",
                        vec![],
                        [
                            250u8, 83u8, 64u8, 167u8, 205u8, 59u8, 225u8, 97u8, 205u8, 12u8, 76u8,
                            130u8, 197u8, 4u8, 111u8, 208u8, 92u8, 217u8, 145u8, 119u8, 38u8,
                            135u8, 1u8, 242u8, 228u8, 143u8, 56u8, 25u8, 115u8, 233u8, 227u8, 66u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::kitchensink_runtime::RuntimeCall,
                                >,
                                ::core::primitive::u32,
                                runtime_types::kitchensink_runtime::OriginCaller,
                                ::subxt::utils::AccountId32,
                            >,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            201u8, 70u8, 93u8, 233u8, 44u8, 39u8, 141u8, 170u8, 132u8, 49u8, 126u8,
                            112u8, 88u8, 63u8, 136u8, 155u8, 49u8, 234u8, 71u8, 133u8, 72u8, 76u8,
                            154u8, 210u8, 235u8, 117u8, 6u8, 95u8, 110u8, 65u8, 40u8, 209u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::kitchensink_runtime::RuntimeCall,
                                >,
                                ::core::primitive::u32,
                                runtime_types::kitchensink_runtime::OriginCaller,
                                ::subxt::utils::AccountId32,
                            >,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        Vec::new(),
                        [
                            201u8, 70u8, 93u8, 233u8, 44u8, 39u8, 141u8, 170u8, 132u8, 49u8, 126u8,
                            112u8, 88u8, 63u8, 136u8, 155u8, 49u8, 234u8, 71u8, 133u8, 72u8, 76u8,
                            154u8, 210u8, 235u8, 117u8, 6u8, 95u8, 110u8, 65u8, 40u8, 209u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup(
                    &self,
                    _0: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            157u8, 102u8, 210u8, 65u8, 190u8, 48u8, 168u8, 20u8, 197u8, 184u8,
                            74u8, 119u8, 176u8, 22u8, 244u8, 186u8, 231u8, 239u8, 97u8, 175u8,
                            34u8, 133u8, 165u8, 73u8, 223u8, 113u8, 78u8, 150u8, 83u8, 127u8,
                            126u8, 204u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (::core::primitive::u32, ::core::primitive::u32),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        Vec::new(),
                        [
                            157u8, 102u8, 210u8, 65u8, 190u8, 48u8, 168u8, 20u8, 197u8, 184u8,
                            74u8, 119u8, 176u8, 22u8, 244u8, 186u8, 231u8, 239u8, 97u8, 175u8,
                            34u8, 133u8, 165u8, 73u8, 223u8, 113u8, 78u8, 150u8, 83u8, 127u8,
                            126u8, 204u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight that may be scheduled per block for any dispatchables."]
                pub fn maximum_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaximumWeight",
                        [
                            222u8, 183u8, 203u8, 169u8, 31u8, 134u8, 28u8, 12u8, 47u8, 140u8, 71u8,
                            74u8, 61u8, 55u8, 71u8, 236u8, 215u8, 83u8, 28u8, 70u8, 45u8, 128u8,
                            184u8, 57u8, 101u8, 83u8, 42u8, 165u8, 34u8, 155u8, 64u8, 145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of scheduled calls in the queue for a single block."]
                #[doc = ""]
                #[doc = " NOTE:"]
                #[doc = " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a"]
                #[doc = " higher limit under `runtime-benchmarks` feature."]
                pub fn max_scheduled_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaxScheduledPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod glutton {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_glutton::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_glutton::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InitializePallet {
                    pub new_count: ::core::primitive::u32,
                    pub witness_count: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for InitializePallet {
                    const PALLET: &'static str = "Glutton";
                    const CALL: &'static str = "initialize_pallet";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCompute {
                    pub compute: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCompute {
                    const PALLET: &'static str = "Glutton";
                    const CALL: &'static str = "set_compute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetStorage {
                    pub storage: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "Glutton";
                    const CALL: &'static str = "set_storage";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::initialize_pallet`]."]
                pub fn initialize_pallet(
                    &self,
                    new_count: ::core::primitive::u32,
                    witness_count: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::InitializePallet> {
                    ::subxt::tx::Payload::new_static(
                        "Glutton",
                        "initialize_pallet",
                        types::InitializePallet {
                            new_count,
                            witness_count,
                        },
                        [
                            42u8, 97u8, 30u8, 108u8, 8u8, 123u8, 200u8, 94u8, 138u8, 239u8, 53u8,
                            103u8, 251u8, 251u8, 141u8, 128u8, 83u8, 147u8, 190u8, 154u8, 116u8,
                            188u8, 110u8, 58u8, 117u8, 240u8, 193u8, 141u8, 102u8, 120u8, 69u8,
                            207u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_compute`]."]
                pub fn set_compute(
                    &self,
                    compute: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                ) -> ::subxt::tx::Payload<types::SetCompute> {
                    ::subxt::tx::Payload::new_static(
                        "Glutton",
                        "set_compute",
                        types::SetCompute { compute },
                        [
                            124u8, 36u8, 136u8, 102u8, 170u8, 231u8, 45u8, 86u8, 124u8, 59u8, 99u8,
                            141u8, 154u8, 190u8, 145u8, 247u8, 196u8, 245u8, 37u8, 100u8, 3u8,
                            30u8, 97u8, 184u8, 169u8, 217u8, 56u8, 232u8, 137u8, 103u8, 98u8, 61u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_storage`]."]
                pub fn set_storage(
                    &self,
                    storage: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                ) -> ::subxt::tx::Payload<types::SetStorage> {
                    ::subxt::tx::Payload::new_static(
                        "Glutton",
                        "set_storage",
                        types::SetStorage { storage },
                        [
                            200u8, 142u8, 53u8, 174u8, 3u8, 112u8, 207u8, 252u8, 187u8, 200u8,
                            82u8, 158u8, 107u8, 229u8, 213u8, 220u8, 16u8, 243u8, 22u8, 111u8,
                            244u8, 24u8, 77u8, 201u8, 71u8, 13u8, 122u8, 251u8, 241u8, 1u8, 241u8,
                            62u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_glutton::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The pallet has been (re)initialized."]
            pub struct PalletInitialized {
                pub reinit: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for PalletInitialized {
                const PALLET: &'static str = "Glutton";
                const EVENT: &'static str = "PalletInitialized";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The computation limit has been updated."]
            pub struct ComputationLimitSet {
                pub compute: runtime_types::sp_arithmetic::fixed_point::FixedU64,
            }
            impl ::subxt::events::StaticEvent for ComputationLimitSet {
                const PALLET: &'static str = "Glutton";
                const EVENT: &'static str = "ComputationLimitSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The storage limit has been updated."]
            pub struct StorageLimitSet {
                pub storage: runtime_types::sp_arithmetic::fixed_point::FixedU64,
            }
            impl ::subxt::events::StaticEvent for StorageLimitSet {
                const PALLET: &'static str = "Glutton";
                const EVENT: &'static str = "StorageLimitSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The proportion of the remaining `ref_time` to consume during `on_idle`."]
                #[doc = ""]
                #[doc = " `1.0` is mapped to `100%`. Must be at most [`crate::RESOURCE_HARD_LIMIT`]. Setting this to"]
                #[doc = " over `1.0` could stall the chain."]
                pub fn compute(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::fixed_point::FixedU64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Glutton",
                        "Compute",
                        vec![],
                        [
                            252u8, 224u8, 208u8, 219u8, 47u8, 169u8, 40u8, 21u8, 190u8, 130u8,
                            83u8, 78u8, 131u8, 50u8, 36u8, 125u8, 44u8, 140u8, 191u8, 190u8, 149u8,
                            94u8, 157u8, 223u8, 198u8, 77u8, 132u8, 19u8, 111u8, 222u8, 134u8, 1u8,
                        ],
                    )
                }
                #[doc = " The proportion of the remaining `proof_size` to consume during `on_idle`."]
                #[doc = ""]
                #[doc = " `1.0` is mapped to `100%`. Must be at most [`crate::RESOURCE_HARD_LIMIT`]. Setting this to"]
                #[doc = " over `1.0` could stall the chain."]
                pub fn storage(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::fixed_point::FixedU64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Glutton",
                        "Storage",
                        vec![],
                        [
                            53u8, 129u8, 114u8, 59u8, 25u8, 212u8, 236u8, 237u8, 158u8, 146u8,
                            186u8, 229u8, 69u8, 12u8, 17u8, 101u8, 59u8, 215u8, 97u8, 179u8, 97u8,
                            188u8, 179u8, 200u8, 112u8, 225u8, 191u8, 53u8, 140u8, 179u8, 119u8,
                            63u8,
                        ],
                    )
                }
                #[doc = " Storage map used for wasting proof size."]
                #[doc = ""]
                #[doc = " It contains no meaningful data - hence the name \"Trash\". The maximal number of entries is"]
                #[doc = " set to 65k, which is just below the next jump at 16^4. This is important to reduce the proof"]
                #[doc = " size benchmarking overestimate. The assumption here is that we won't have more than 65k *"]
                #[doc = " 1KiB = 65MiB of proof size wasting in practice. However, this limit is not enforced, so the"]
                #[doc = " pallet would also work out of the box with more entries, but its benchmarked proof weight"]
                #[doc = " would possibly be underestimated in that case."]
                pub fn trash_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::primitive::u8; 1024usize],
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Glutton",
                        "TrashData",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            145u8, 216u8, 185u8, 9u8, 132u8, 24u8, 201u8, 206u8, 120u8, 86u8, 91u8,
                            89u8, 140u8, 141u8, 170u8, 195u8, 37u8, 102u8, 125u8, 167u8, 173u8,
                            136u8, 4u8, 120u8, 96u8, 41u8, 89u8, 185u8, 57u8, 87u8, 3u8, 70u8,
                        ],
                    )
                }
                #[doc = " Storage map used for wasting proof size."]
                #[doc = ""]
                #[doc = " It contains no meaningful data - hence the name \"Trash\". The maximal number of entries is"]
                #[doc = " set to 65k, which is just below the next jump at 16^4. This is important to reduce the proof"]
                #[doc = " size benchmarking overestimate. The assumption here is that we won't have more than 65k *"]
                #[doc = " 1KiB = 65MiB of proof size wasting in practice. However, this limit is not enforced, so the"]
                #[doc = " pallet would also work out of the box with more entries, but its benchmarked proof weight"]
                #[doc = " would possibly be underestimated in that case."]
                pub fn trash_data_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    [::core::primitive::u8; 1024usize],
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Glutton",
                        "TrashData",
                        Vec::new(),
                        [
                            145u8, 216u8, 185u8, 9u8, 132u8, 24u8, 201u8, 206u8, 120u8, 86u8, 91u8,
                            89u8, 140u8, 141u8, 170u8, 195u8, 37u8, 102u8, 125u8, 167u8, 173u8,
                            136u8, 4u8, 120u8, 96u8, 41u8, 89u8, 185u8, 57u8, 87u8, 3u8, 70u8,
                        ],
                    )
                }
                #[doc = " The current number of entries in `TrashData`."]
                pub fn trash_data_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Glutton",
                        "TrashDataCount",
                        vec![],
                        [
                            187u8, 15u8, 175u8, 131u8, 13u8, 210u8, 77u8, 102u8, 20u8, 149u8, 4u8,
                            140u8, 179u8, 87u8, 229u8, 13u8, 75u8, 113u8, 1u8, 79u8, 26u8, 115u8,
                            112u8, 111u8, 24u8, 229u8, 90u8, 220u8, 24u8, 237u8, 252u8, 9u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod preimage {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_preimage::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_preimage::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NotePreimage {
                    pub bytes: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for NotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "note_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnnotePreimage {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for UnnotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unnote_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RequestPreimage {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "request_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnrequestPreimage {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for UnrequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unrequest_preimage";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::note_preimage`]."]
                pub fn note_preimage(
                    &self,
                    bytes: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::NotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "note_preimage",
                        types::NotePreimage { bytes },
                        [
                            121u8, 88u8, 18u8, 92u8, 176u8, 15u8, 192u8, 198u8, 146u8, 198u8, 38u8,
                            242u8, 213u8, 83u8, 7u8, 230u8, 14u8, 110u8, 235u8, 32u8, 215u8, 26u8,
                            192u8, 217u8, 113u8, 224u8, 206u8, 96u8, 177u8, 198u8, 246u8, 33u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unnote_preimage`]."]
                pub fn unnote_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::UnnotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unnote_preimage",
                        types::UnnotePreimage { hash },
                        [
                            188u8, 116u8, 222u8, 22u8, 127u8, 215u8, 2u8, 133u8, 96u8, 202u8,
                            190u8, 123u8, 203u8, 43u8, 200u8, 161u8, 226u8, 24u8, 49u8, 36u8,
                            221u8, 160u8, 130u8, 119u8, 30u8, 138u8, 144u8, 85u8, 5u8, 164u8,
                            252u8, 222u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::request_preimage`]."]
                pub fn request_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "request_preimage",
                        types::RequestPreimage { hash },
                        [
                            87u8, 0u8, 204u8, 111u8, 43u8, 115u8, 64u8, 209u8, 133u8, 13u8, 83u8,
                            45u8, 164u8, 166u8, 233u8, 105u8, 242u8, 238u8, 235u8, 208u8, 113u8,
                            134u8, 93u8, 242u8, 86u8, 32u8, 7u8, 152u8, 107u8, 208u8, 79u8, 59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unrequest_preimage`]."]
                pub fn unrequest_preimage(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::UnrequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unrequest_preimage",
                        types::UnrequestPreimage { hash },
                        [
                            55u8, 37u8, 224u8, 149u8, 142u8, 120u8, 8u8, 68u8, 183u8, 225u8, 255u8,
                            240u8, 254u8, 111u8, 58u8, 200u8, 113u8, 217u8, 177u8, 203u8, 107u8,
                            104u8, 233u8, 87u8, 252u8, 53u8, 33u8, 112u8, 116u8, 254u8, 117u8,
                            134u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_preimage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has been noted."]
            pub struct Noted {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Noted {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Noted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has been requested."]
            pub struct Requested {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Requested {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Requested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has ben cleared."]
            pub struct Cleared {
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Cleared {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Cleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The request status of a given hash."]
                pub fn status_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_preimage::RequestStatus<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            176u8, 174u8, 255u8, 131u8, 156u8, 64u8, 181u8, 119u8, 81u8, 243u8,
                            144u8, 55u8, 19u8, 140u8, 119u8, 30u8, 210u8, 112u8, 201u8, 247u8,
                            13u8, 19u8, 120u8, 190u8, 253u8, 89u8, 4u8, 109u8, 122u8, 62u8, 87u8,
                            186u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]
                pub fn status_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_preimage::RequestStatus<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        Vec::new(),
                        [
                            176u8, 174u8, 255u8, 131u8, 156u8, 64u8, 181u8, 119u8, 81u8, 243u8,
                            144u8, 55u8, 19u8, 140u8, 119u8, 30u8, 210u8, 112u8, 201u8, 247u8,
                            13u8, 19u8, 120u8, 190u8, 253u8, 89u8, 4u8, 109u8, 122u8, 62u8, 87u8,
                            186u8,
                        ],
                    )
                }
                pub fn preimage_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            20u8, 5u8, 33u8, 71u8, 153u8, 129u8, 98u8, 23u8, 214u8, 138u8, 96u8,
                            113u8, 245u8, 128u8, 51u8, 55u8, 123u8, 218u8, 165u8, 247u8, 14u8,
                            104u8, 119u8, 87u8, 71u8, 222u8, 200u8, 103u8, 58u8, 10u8, 97u8, 134u8,
                        ],
                    )
                }
                pub fn preimage_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        Vec::new(),
                        [
                            20u8, 5u8, 33u8, 71u8, 153u8, 129u8, 98u8, 23u8, 214u8, 138u8, 96u8,
                            113u8, 245u8, 128u8, 51u8, 55u8, 123u8, 218u8, 165u8, 247u8, 14u8,
                            104u8, 119u8, 87u8, 71u8, 222u8, 200u8, 103u8, 58u8, 10u8, 97u8, 134u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_proxy::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_proxy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Proxy {
                    pub real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub force_proxy_type:
                        ::core::option::Option<runtime_types::kitchensink_runtime::ProxyType>,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Proxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddProxy {
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    pub delay: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "add_proxy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveProxy {
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    pub delay: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveProxies;
                impl ::subxt::blocks::StaticExtrinsic for RemoveProxies {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxies";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreatePure {
                    pub proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    pub delay: ::core::primitive::u32,
                    pub index: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for CreatePure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "create_pure";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KillPure {
                    pub spawner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    pub index: ::core::primitive::u16,
                    #[codec(compact)]
                    pub height: ::core::primitive::u32,
                    #[codec(compact)]
                    pub ext_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for KillPure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "kill_pure";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Announce {
                    pub real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for Announce {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "announce";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveAnnouncement {
                    pub real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_announcement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RejectAnnouncement {
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RejectAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "reject_announcement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProxyAnnounced {
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub force_proxy_type:
                        ::core::option::Option<runtime_types::kitchensink_runtime::ProxyType>,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProxyAnnounced {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy_announced";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::proxy`]."]
                pub fn proxy(
                    &self,
                    real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::kitchensink_runtime::ProxyType,
                    >,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::Proxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "proxy",
                        types::Proxy {
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            130u8, 149u8, 178u8, 92u8, 44u8, 116u8, 52u8, 141u8, 233u8, 116u8,
                            41u8, 138u8, 197u8, 238u8, 94u8, 86u8, 178u8, 145u8, 240u8, 3u8, 122u8,
                            83u8, 249u8, 115u8, 152u8, 169u8, 254u8, 51u8, 70u8, 136u8, 69u8, 42u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::add_proxy`]."]
                pub fn add_proxy(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::AddProxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "add_proxy",
                        types::AddProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            97u8, 125u8, 128u8, 243u8, 184u8, 99u8, 124u8, 24u8, 133u8, 41u8,
                            195u8, 127u8, 221u8, 215u8, 222u8, 132u8, 252u8, 167u8, 40u8, 241u8,
                            39u8, 96u8, 26u8, 209u8, 201u8, 9u8, 61u8, 145u8, 212u8, 99u8, 40u8,
                            235u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_proxy`]."]
                pub fn remove_proxy(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveProxy> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_proxy",
                        types::RemoveProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            200u8, 191u8, 58u8, 137u8, 191u8, 132u8, 73u8, 124u8, 188u8, 206u8,
                            125u8, 121u8, 246u8, 123u8, 114u8, 54u8, 134u8, 94u8, 169u8, 247u8,
                            6u8, 86u8, 221u8, 1u8, 88u8, 59u8, 215u8, 40u8, 206u8, 60u8, 68u8,
                            171u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_proxies`]."]
                pub fn remove_proxies(&self) -> ::subxt::tx::Payload<types::RemoveProxies> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_proxies",
                        types::RemoveProxies {},
                        [
                            1u8, 126u8, 36u8, 227u8, 185u8, 34u8, 218u8, 236u8, 125u8, 231u8, 68u8,
                            185u8, 145u8, 63u8, 250u8, 225u8, 103u8, 3u8, 189u8, 37u8, 172u8,
                            195u8, 197u8, 216u8, 99u8, 210u8, 240u8, 162u8, 158u8, 132u8, 24u8,
                            6u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::create_pure`]."]
                pub fn create_pure(
                    &self,
                    proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    delay: ::core::primitive::u32,
                    index: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::CreatePure> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "create_pure",
                        types::CreatePure {
                            proxy_type,
                            delay,
                            index,
                        },
                        [
                            124u8, 25u8, 141u8, 194u8, 131u8, 102u8, 15u8, 29u8, 77u8, 240u8, 98u8,
                            39u8, 164u8, 93u8, 7u8, 231u8, 142u8, 56u8, 94u8, 150u8, 0u8, 12u8,
                            158u8, 156u8, 176u8, 76u8, 49u8, 153u8, 212u8, 110u8, 160u8, 96u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill_pure`]."]
                pub fn kill_pure(
                    &self,
                    spawner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                    index: ::core::primitive::u16,
                    height: ::core::primitive::u32,
                    ext_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::KillPure> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "kill_pure",
                        types::KillPure {
                            spawner,
                            proxy_type,
                            index,
                            height,
                            ext_index,
                        },
                        [
                            64u8, 36u8, 70u8, 155u8, 220u8, 122u8, 205u8, 146u8, 203u8, 5u8, 15u8,
                            8u8, 239u8, 31u8, 210u8, 228u8, 37u8, 216u8, 82u8, 214u8, 210u8, 98u8,
                            14u8, 45u8, 58u8, 247u8, 65u8, 57u8, 23u8, 176u8, 212u8, 239u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::announce`]."]
                pub fn announce(
                    &self,
                    real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::Announce> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "announce",
                        types::Announce { real, call_hash },
                        [
                            221u8, 164u8, 208u8, 81u8, 100u8, 102u8, 1u8, 122u8, 103u8, 208u8,
                            75u8, 23u8, 238u8, 93u8, 160u8, 101u8, 101u8, 183u8, 112u8, 13u8,
                            113u8, 180u8, 171u8, 239u8, 53u8, 181u8, 46u8, 131u8, 191u8, 57u8,
                            191u8, 44u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_announcement`]."]
                pub fn remove_announcement(
                    &self,
                    real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RemoveAnnouncement> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "remove_announcement",
                        types::RemoveAnnouncement { real, call_hash },
                        [
                            101u8, 86u8, 40u8, 136u8, 201u8, 115u8, 247u8, 209u8, 11u8, 90u8, 15u8,
                            191u8, 76u8, 206u8, 229u8, 159u8, 144u8, 198u8, 45u8, 113u8, 129u8,
                            39u8, 215u8, 77u8, 175u8, 108u8, 230u8, 113u8, 205u8, 109u8, 189u8,
                            6u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::reject_announcement`]."]
                pub fn reject_announcement(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RejectAnnouncement> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "reject_announcement",
                        types::RejectAnnouncement {
                            delegate,
                            call_hash,
                        },
                        [
                            83u8, 185u8, 140u8, 49u8, 246u8, 64u8, 68u8, 248u8, 26u8, 107u8, 235u8,
                            167u8, 130u8, 60u8, 24u8, 108u8, 108u8, 15u8, 155u8, 135u8, 228u8,
                            166u8, 242u8, 8u8, 85u8, 25u8, 58u8, 113u8, 168u8, 125u8, 155u8, 31u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::proxy_announced`]."]
                pub fn proxy_announced(
                    &self,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    real: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    force_proxy_type: ::core::option::Option<
                        runtime_types::kitchensink_runtime::ProxyType,
                    >,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::ProxyAnnounced> {
                    ::subxt::tx::Payload::new_static(
                        "Proxy",
                        "proxy_announced",
                        types::ProxyAnnounced {
                            delegate,
                            real,
                            force_proxy_type,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            217u8, 220u8, 146u8, 101u8, 166u8, 67u8, 190u8, 187u8, 249u8, 163u8,
                            6u8, 233u8, 121u8, 39u8, 226u8, 133u8, 144u8, 62u8, 243u8, 11u8, 140u8,
                            14u8, 167u8, 169u8, 179u8, 112u8, 98u8, 61u8, 192u8, 131u8, 230u8,
                            122u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proxy was executed correctly, with the given."]
            pub struct ProxyExecuted {
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A pure account has been created by new proxy with given"]
            #[doc = "disambiguation index and proxy type."]
            pub struct PureCreated {
                pub pure: ::subxt::utils::AccountId32,
                pub who: ::subxt::utils::AccountId32,
                pub proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                pub disambiguation_index: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for PureCreated {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "PureCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An announcement was placed to make a call in the future."]
            pub struct Announced {
                pub real: ::subxt::utils::AccountId32,
                pub proxy: ::subxt::utils::AccountId32,
                pub call_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Announced {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "Announced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proxy was added."]
            pub struct ProxyAdded {
                pub delegator: ::subxt::utils::AccountId32,
                pub delegatee: ::subxt::utils::AccountId32,
                pub proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProxyAdded {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proxy was removed."]
            pub struct ProxyRemoved {
                pub delegator: ::subxt::utils::AccountId32,
                pub delegatee: ::subxt::utils::AccountId32,
                pub proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                pub delay: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                ::subxt::utils::AccountId32,
                                runtime_types::kitchensink_runtime::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Proxies",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            12u8, 0u8, 205u8, 30u8, 181u8, 11u8, 140u8, 207u8, 72u8, 175u8, 155u8,
                            245u8, 20u8, 69u8, 245u8, 212u8, 17u8, 161u8, 69u8, 215u8, 159u8,
                            243u8, 253u8, 182u8, 132u8, 139u8, 242u8, 255u8, 101u8, 211u8, 190u8,
                            157u8,
                        ],
                    )
                }
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::ProxyDefinition<
                                ::subxt::utils::AccountId32,
                                runtime_types::kitchensink_runtime::ProxyType,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Proxies",
                        Vec::new(),
                        [
                            12u8, 0u8, 205u8, 30u8, 181u8, 11u8, 140u8, 207u8, 72u8, 175u8, 155u8,
                            245u8, 20u8, 69u8, 245u8, 212u8, 17u8, 161u8, 69u8, 215u8, 159u8,
                            243u8, 253u8, 182u8, 132u8, 139u8, 242u8, 255u8, 101u8, 211u8, 190u8,
                            157u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                ::subxt::utils::AccountId32,
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Announcements",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            195u8, 103u8, 36u8, 115u8, 220u8, 178u8, 159u8, 50u8, 133u8, 198u8,
                            14u8, 54u8, 122u8, 123u8, 35u8, 134u8, 152u8, 84u8, 103u8, 52u8, 31u8,
                            78u8, 136u8, 206u8, 9u8, 83u8, 155u8, 94u8, 2u8, 135u8, 159u8, 72u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                ::subxt::utils::AccountId32,
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Proxy",
                        "Announcements",
                        Vec::new(),
                        [
                            195u8, 103u8, 36u8, 115u8, 220u8, 178u8, 159u8, 50u8, 133u8, 198u8,
                            14u8, 54u8, 122u8, 123u8, 35u8, 134u8, 152u8, 84u8, 103u8, 52u8, 31u8,
                            78u8, 136u8, 206u8, 9u8, 83u8, 155u8, 94u8, 2u8, 135u8, 159u8, 72u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a proxy."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
                pub fn proxy_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "ProxyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per proxy added."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
                #[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
                #[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
                pub fn proxy_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "ProxyDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of proxies allowed for a single account."]
                pub fn max_proxies(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "MaxProxies",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
                pub fn max_pending(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "MaxPending",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base amount of currency needed to reserve for creating an announcement."]
                #[doc = ""]
                #[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
                #[doc = " bytes)."]
                pub fn announcement_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "AnnouncementDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per announcement made."]
                #[doc = ""]
                #[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
                #[doc = " into a pre-existing storage value."]
                pub fn announcement_deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Proxy",
                        "AnnouncementDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_multisig::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_multisig::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsMultiThreshold1 {
                    pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMultiThreshold1 {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi_threshold_1";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AsMulti {
                    pub threshold: ::core::primitive::u16,
                    pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveAsMulti {
                    pub threshold: ::core::primitive::u16,
                    pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    pub call_hash: [::core::primitive::u8; 32usize],
                    pub max_weight: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "approve_as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelAsMulti {
                    pub threshold: ::core::primitive::u16,
                    pub other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub timepoint:
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    pub call_hash: [::core::primitive::u8; 32usize],
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "cancel_as_multi";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::as_multi_threshold_1`]."]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::AsMultiThreshold1> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi_threshold_1",
                        types::AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            32u8, 6u8, 133u8, 172u8, 0u8, 105u8, 59u8, 103u8, 24u8, 187u8, 184u8,
                            180u8, 244u8, 13u8, 76u8, 170u8, 15u8, 86u8, 153u8, 26u8, 142u8, 87u8,
                            213u8, 62u8, 209u8, 204u8, 58u8, 143u8, 177u8, 23u8, 160u8, 12u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::as_multi`]."]
                pub fn as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::AsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi",
                        types::AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call: ::std::boxed::Box::new(call),
                            max_weight,
                        },
                        [
                            72u8, 241u8, 109u8, 77u8, 193u8, 251u8, 162u8, 141u8, 14u8, 132u8,
                            55u8, 139u8, 5u8, 128u8, 216u8, 31u8, 226u8, 59u8, 170u8, 196u8, 54u8,
                            15u8, 61u8, 74u8, 28u8, 118u8, 10u8, 178u8, 158u8, 79u8, 172u8, 125u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_as_multi`]."]
                pub fn approve_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call_hash: [::core::primitive::u8; 32usize],
                    max_weight: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::ApproveAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "approve_as_multi",
                        types::ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            240u8, 17u8, 138u8, 10u8, 165u8, 3u8, 88u8, 240u8, 11u8, 208u8, 9u8,
                            123u8, 95u8, 53u8, 142u8, 8u8, 30u8, 5u8, 130u8, 205u8, 102u8, 95u8,
                            71u8, 92u8, 184u8, 92u8, 218u8, 224u8, 146u8, 87u8, 93u8, 224u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_as_multi`]."]
                pub fn cancel_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    call_hash: [::core::primitive::u8; 32usize],
                ) -> ::subxt::tx::Payload<types::CancelAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "cancel_as_multi",
                        types::CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            14u8, 123u8, 126u8, 239u8, 174u8, 101u8, 28u8, 221u8, 117u8, 75u8,
                            82u8, 249u8, 151u8, 59u8, 224u8, 239u8, 54u8, 196u8, 244u8, 46u8, 31u8,
                            218u8, 224u8, 58u8, 146u8, 165u8, 135u8, 101u8, 189u8, 93u8, 149u8,
                            130u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: ::subxt::utils::AccountId32,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: ::subxt::utils::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: ::subxt::utils::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: ::subxt::utils::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::utils::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of open multisig operations."]
                pub fn multisigs(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<[::core::primitive::u8; 32usize]>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            22u8, 46u8, 92u8, 90u8, 193u8, 51u8, 12u8, 187u8, 247u8, 141u8, 101u8,
                            133u8, 220u8, 5u8, 124u8, 197u8, 149u8, 81u8, 51u8, 194u8, 194u8, 72u8,
                            63u8, 249u8, 227u8, 208u8, 58u8, 253u8, 33u8, 107u8, 10u8, 44u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        Vec::new(),
                        [
                            22u8, 46u8, 92u8, 90u8, 193u8, 51u8, 12u8, 187u8, 247u8, 141u8, 101u8,
                            133u8, 220u8, 5u8, 124u8, 197u8, 149u8, 81u8, 51u8, 194u8, 194u8, 72u8,
                            63u8, 249u8, 227u8, 208u8, 58u8, 253u8, 33u8, 107u8, 10u8, 44u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "MaxSignatories",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bounties {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bounties::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bounties::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProposeBounty {
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub description: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProposeBounty {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "propose_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveBounty {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveBounty {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "approve_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProposeCurator {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                    pub curator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub fee: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProposeCurator {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "propose_curator";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnassignCurator {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for UnassignCurator {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "unassign_curator";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AcceptCurator {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for AcceptCurator {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "accept_curator";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AwardBounty {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for AwardBounty {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "award_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimBounty {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClaimBounty {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "claim_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CloseBounty {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CloseBounty {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "close_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExtendBountyExpiry {
                    #[codec(compact)]
                    pub bounty_id: ::core::primitive::u32,
                    pub remark: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExtendBountyExpiry {
                    const PALLET: &'static str = "Bounties";
                    const CALL: &'static str = "extend_bounty_expiry";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::propose_bounty`]."]
                pub fn propose_bounty(
                    &self,
                    value: ::core::primitive::u128,
                    description: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::ProposeBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "propose_bounty",
                        types::ProposeBounty { value, description },
                        [
                            131u8, 169u8, 55u8, 102u8, 212u8, 139u8, 9u8, 65u8, 75u8, 112u8, 6u8,
                            180u8, 92u8, 124u8, 43u8, 42u8, 38u8, 40u8, 226u8, 24u8, 28u8, 34u8,
                            169u8, 220u8, 184u8, 206u8, 109u8, 227u8, 53u8, 228u8, 88u8, 25u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_bounty`]."]
                pub fn approve_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ApproveBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "approve_bounty",
                        types::ApproveBounty { bounty_id },
                        [
                            85u8, 12u8, 177u8, 91u8, 183u8, 124u8, 175u8, 148u8, 188u8, 200u8,
                            237u8, 144u8, 6u8, 67u8, 159u8, 48u8, 177u8, 222u8, 183u8, 137u8,
                            173u8, 131u8, 128u8, 219u8, 255u8, 243u8, 80u8, 224u8, 126u8, 136u8,
                            90u8, 47u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::propose_curator`]."]
                pub fn propose_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    curator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ProposeCurator> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "propose_curator",
                        types::ProposeCurator {
                            bounty_id,
                            curator,
                            fee,
                        },
                        [
                            71u8, 194u8, 107u8, 158u8, 153u8, 106u8, 130u8, 173u8, 57u8, 240u8,
                            43u8, 213u8, 143u8, 48u8, 179u8, 254u8, 63u8, 190u8, 105u8, 52u8,
                            127u8, 238u8, 84u8, 105u8, 41u8, 180u8, 25u8, 98u8, 215u8, 197u8, 61u8,
                            72u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unassign_curator`]."]
                pub fn unassign_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::UnassignCurator> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "unassign_curator",
                        types::UnassignCurator { bounty_id },
                        [
                            98u8, 94u8, 107u8, 111u8, 151u8, 182u8, 71u8, 239u8, 214u8, 88u8,
                            108u8, 11u8, 51u8, 163u8, 102u8, 162u8, 245u8, 247u8, 244u8, 159u8,
                            197u8, 23u8, 171u8, 6u8, 60u8, 146u8, 144u8, 101u8, 68u8, 133u8, 245u8,
                            74u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::accept_curator`]."]
                pub fn accept_curator(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::AcceptCurator> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "accept_curator",
                        types::AcceptCurator { bounty_id },
                        [
                            178u8, 142u8, 138u8, 15u8, 243u8, 10u8, 222u8, 169u8, 150u8, 200u8,
                            85u8, 185u8, 39u8, 167u8, 134u8, 3u8, 186u8, 84u8, 43u8, 140u8, 11u8,
                            70u8, 56u8, 197u8, 39u8, 84u8, 138u8, 139u8, 198u8, 104u8, 41u8, 238u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::award_bounty`]."]
                pub fn award_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::AwardBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "award_bounty",
                        types::AwardBounty {
                            bounty_id,
                            beneficiary,
                        },
                        [
                            69u8, 87u8, 233u8, 113u8, 45u8, 84u8, 104u8, 158u8, 128u8, 111u8,
                            231u8, 80u8, 175u8, 226u8, 231u8, 61u8, 106u8, 6u8, 192u8, 208u8,
                            128u8, 160u8, 75u8, 27u8, 190u8, 9u8, 191u8, 90u8, 219u8, 25u8, 129u8,
                            244u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_bounty`]."]
                pub fn claim_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClaimBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "claim_bounty",
                        types::ClaimBounty { bounty_id },
                        [
                            211u8, 143u8, 123u8, 205u8, 140u8, 43u8, 176u8, 103u8, 110u8, 125u8,
                            158u8, 131u8, 103u8, 62u8, 69u8, 215u8, 220u8, 110u8, 11u8, 3u8, 30u8,
                            193u8, 235u8, 177u8, 96u8, 241u8, 140u8, 53u8, 62u8, 133u8, 170u8,
                            25u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close_bounty`]."]
                pub fn close_bounty(
                    &self,
                    bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CloseBounty> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "close_bounty",
                        types::CloseBounty { bounty_id },
                        [
                            144u8, 234u8, 109u8, 39u8, 227u8, 231u8, 104u8, 48u8, 45u8, 196u8,
                            217u8, 220u8, 241u8, 197u8, 157u8, 227u8, 154u8, 156u8, 181u8, 69u8,
                            146u8, 77u8, 203u8, 167u8, 79u8, 102u8, 15u8, 253u8, 135u8, 53u8, 96u8,
                            60u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::extend_bounty_expiry`]."]
                pub fn extend_bounty_expiry(
                    &self,
                    bounty_id: ::core::primitive::u32,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::ExtendBountyExpiry> {
                    ::subxt::tx::Payload::new_static(
                        "Bounties",
                        "extend_bounty_expiry",
                        types::ExtendBountyExpiry { bounty_id, remark },
                        [
                            102u8, 118u8, 89u8, 189u8, 138u8, 157u8, 216u8, 10u8, 239u8, 3u8,
                            200u8, 217u8, 219u8, 19u8, 195u8, 182u8, 105u8, 220u8, 11u8, 146u8,
                            222u8, 79u8, 95u8, 136u8, 188u8, 230u8, 248u8, 119u8, 30u8, 6u8, 242u8,
                            194u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bounties::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New bounty proposal."]
            pub struct BountyProposed {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyProposed {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyProposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bounty proposal was rejected; funds were slashed."]
            pub struct BountyRejected {
                pub index: ::core::primitive::u32,
                pub bond: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for BountyRejected {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyRejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bounty proposal is funded and became active."]
            pub struct BountyBecameActive {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyBecameActive {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyBecameActive";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bounty is awarded to a beneficiary."]
            pub struct BountyAwarded {
                pub index: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for BountyAwarded {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyAwarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bounty is claimed by beneficiary."]
            pub struct BountyClaimed {
                pub index: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for BountyClaimed {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyClaimed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bounty is cancelled."]
            pub struct BountyCanceled {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyCanceled {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyCanceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bounty expiry is extended."]
            pub struct BountyExtended {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BountyExtended {
                const PALLET: &'static str = "Bounties";
                const EVENT: &'static str = "BountyExtended";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of bounty proposals that have been made."]
                pub fn bounty_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyCount",
                        vec![],
                        [
                            120u8, 204u8, 26u8, 150u8, 37u8, 81u8, 43u8, 223u8, 180u8, 252u8,
                            142u8, 144u8, 109u8, 5u8, 184u8, 72u8, 223u8, 230u8, 66u8, 196u8, 14u8,
                            14u8, 164u8, 190u8, 246u8, 168u8, 190u8, 56u8, 212u8, 73u8, 175u8,
                            26u8,
                        ],
                    )
                }
                #[doc = " Bounties that have been made."]
                pub fn bounties(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bounties::Bounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "Bounties",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            197u8, 26u8, 141u8, 98u8, 53u8, 123u8, 87u8, 219u8, 248u8, 200u8,
                            207u8, 196u8, 211u8, 159u8, 124u8, 173u8, 143u8, 144u8, 85u8, 180u8,
                            227u8, 24u8, 7u8, 52u8, 130u8, 98u8, 107u8, 145u8, 162u8, 55u8, 64u8,
                            199u8,
                        ],
                    )
                }
                #[doc = " Bounties that have been made."]
                pub fn bounties_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bounties::Bounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "Bounties",
                        Vec::new(),
                        [
                            197u8, 26u8, 141u8, 98u8, 53u8, 123u8, 87u8, 219u8, 248u8, 200u8,
                            207u8, 196u8, 211u8, 159u8, 124u8, 173u8, 143u8, 144u8, 85u8, 180u8,
                            227u8, 24u8, 7u8, 52u8, 130u8, 98u8, 107u8, 145u8, 162u8, 55u8, 64u8,
                            199u8,
                        ],
                    )
                }
                #[doc = " The description of each bounty."]
                pub fn bounty_descriptions(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyDescriptions",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            71u8, 40u8, 133u8, 84u8, 55u8, 207u8, 169u8, 189u8, 160u8, 51u8, 202u8,
                            144u8, 15u8, 226u8, 97u8, 114u8, 54u8, 247u8, 53u8, 26u8, 36u8, 54u8,
                            186u8, 163u8, 198u8, 100u8, 191u8, 121u8, 186u8, 160u8, 85u8, 97u8,
                        ],
                    )
                }
                #[doc = " The description of each bounty."]
                pub fn bounty_descriptions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyDescriptions",
                        Vec::new(),
                        [
                            71u8, 40u8, 133u8, 84u8, 55u8, 207u8, 169u8, 189u8, 160u8, 51u8, 202u8,
                            144u8, 15u8, 226u8, 97u8, 114u8, 54u8, 247u8, 53u8, 26u8, 36u8, 54u8,
                            186u8, 163u8, 198u8, 100u8, 191u8, 121u8, 186u8, 160u8, 85u8, 97u8,
                        ],
                    )
                }
                #[doc = " Bounty indices that have been approved but not yet funded."]
                pub fn bounty_approvals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Bounties",
                        "BountyApprovals",
                        vec![],
                        [
                            182u8, 228u8, 0u8, 46u8, 176u8, 25u8, 222u8, 180u8, 51u8, 57u8, 14u8,
                            0u8, 69u8, 160u8, 64u8, 27u8, 88u8, 29u8, 227u8, 146u8, 2u8, 121u8,
                            27u8, 85u8, 45u8, 110u8, 244u8, 62u8, 134u8, 77u8, 175u8, 188u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount held on deposit for placing a bounty proposal."]
                pub fn bounty_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The delay period for which a bounty beneficiary need to wait before claim the payout."]
                pub fn bounty_deposit_payout_delay(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyDepositPayoutDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Bounty duration in blocks."]
                pub fn bounty_update_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyUpdatePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The curator deposit is calculated as a percentage of the curator fee."]
                #[doc = ""]
                #[doc = " This deposit has optional upper and lower bounds with `CuratorDepositMax` and"]
                #[doc = " `CuratorDepositMin`."]
                pub fn curator_deposit_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "CuratorDepositMultiplier",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn curator_deposit_max(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "CuratorDepositMax",
                        [
                            198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
                            199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
                            215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
                            147u8,
                        ],
                    )
                }
                #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn curator_deposit_min(
                    &self,
                ) -> ::subxt::constants::Address<::core::option::Option<::core::primitive::u128>>
                {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "CuratorDepositMin",
                        [
                            198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
                            199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
                            215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
                            147u8,
                        ],
                    )
                }
                #[doc = " Minimum value for a bounty."]
                pub fn bounty_value_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "BountyValueMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
                pub fn data_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "DataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum acceptable reason length."]
                #[doc = ""]
                #[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
                pub fn maximum_reason_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Bounties",
                        "MaximumReasonLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod tips {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_tips::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_tips::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReportAwesome {
                    pub reason: ::std::vec::Vec<::core::primitive::u8>,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReportAwesome {
                    const PALLET: &'static str = "Tips";
                    const CALL: &'static str = "report_awesome";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RetractTip {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RetractTip {
                    const PALLET: &'static str = "Tips";
                    const CALL: &'static str = "retract_tip";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TipNew {
                    pub reason: ::std::vec::Vec<::core::primitive::u8>,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub tip_value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TipNew {
                    const PALLET: &'static str = "Tips";
                    const CALL: &'static str = "tip_new";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Tip {
                    pub hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub tip_value: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Tip {
                    const PALLET: &'static str = "Tips";
                    const CALL: &'static str = "tip";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CloseTip {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for CloseTip {
                    const PALLET: &'static str = "Tips";
                    const CALL: &'static str = "close_tip";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SlashTip {
                    pub hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for SlashTip {
                    const PALLET: &'static str = "Tips";
                    const CALL: &'static str = "slash_tip";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::report_awesome`]."]
                pub fn report_awesome(
                    &self,
                    reason: ::std::vec::Vec<::core::primitive::u8>,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ReportAwesome> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "report_awesome",
                        types::ReportAwesome { reason, who },
                        [
                            162u8, 130u8, 216u8, 166u8, 87u8, 77u8, 47u8, 168u8, 146u8, 90u8, 39u8,
                            41u8, 160u8, 144u8, 176u8, 42u8, 68u8, 112u8, 240u8, 144u8, 119u8,
                            24u8, 69u8, 101u8, 240u8, 212u8, 170u8, 174u8, 155u8, 234u8, 184u8,
                            232u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::retract_tip`]."]
                pub fn retract_tip(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RetractTip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "retract_tip",
                        types::RetractTip { hash },
                        [
                            127u8, 232u8, 112u8, 136u8, 48u8, 227u8, 202u8, 51u8, 78u8, 191u8,
                            248u8, 44u8, 159u8, 76u8, 101u8, 107u8, 212u8, 55u8, 85u8, 250u8,
                            222u8, 181u8, 58u8, 130u8, 53u8, 103u8, 190u8, 31u8, 113u8, 195u8,
                            186u8, 44u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::tip_new`]."]
                pub fn tip_new(
                    &self,
                    reason: ::std::vec::Vec<::core::primitive::u8>,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    tip_value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TipNew> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "tip_new",
                        types::TipNew {
                            reason,
                            who,
                            tip_value,
                        },
                        [
                            236u8, 82u8, 15u8, 103u8, 143u8, 84u8, 161u8, 90u8, 120u8, 185u8,
                            251u8, 212u8, 168u8, 2u8, 227u8, 63u8, 222u8, 171u8, 187u8, 137u8,
                            177u8, 0u8, 119u8, 97u8, 72u8, 244u8, 31u8, 252u8, 29u8, 19u8, 225u8,
                            5u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::tip`]."]
                pub fn tip(
                    &self,
                    hash: ::subxt::utils::H256,
                    tip_value: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Tip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "tip",
                        types::Tip { hash, tip_value },
                        [
                            241u8, 5u8, 164u8, 248u8, 140u8, 60u8, 29u8, 9u8, 63u8, 208u8, 249u8,
                            210u8, 221u8, 173u8, 70u8, 240u8, 50u8, 131u8, 80u8, 236u8, 131u8,
                            101u8, 191u8, 49u8, 94u8, 216u8, 74u8, 234u8, 184u8, 167u8, 159u8,
                            176u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close_tip`]."]
                pub fn close_tip(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::CloseTip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "close_tip",
                        types::CloseTip { hash },
                        [
                            85u8, 213u8, 248u8, 146u8, 90u8, 110u8, 217u8, 109u8, 78u8, 6u8, 104u8,
                            71u8, 184u8, 209u8, 148u8, 81u8, 145u8, 71u8, 151u8, 174u8, 25u8,
                            238u8, 48u8, 0u8, 51u8, 102u8, 155u8, 143u8, 130u8, 157u8, 100u8,
                            246u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::slash_tip`]."]
                pub fn slash_tip(
                    &self,
                    hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::SlashTip> {
                    ::subxt::tx::Payload::new_static(
                        "Tips",
                        "slash_tip",
                        types::SlashTip { hash },
                        [
                            127u8, 21u8, 252u8, 189u8, 121u8, 103u8, 54u8, 155u8, 71u8, 81u8,
                            109u8, 0u8, 159u8, 151u8, 62u8, 81u8, 104u8, 31u8, 2u8, 83u8, 248u8,
                            141u8, 252u8, 162u8, 173u8, 189u8, 252u8, 249u8, 54u8, 142u8, 108u8,
                            19u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_tips::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new tip suggestion has been opened."]
            pub struct NewTip {
                pub tip_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for NewTip {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "NewTip";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A tip suggestion has reached threshold and is closing."]
            pub struct TipClosing {
                pub tip_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for TipClosing {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipClosing";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A tip suggestion has been closed."]
            pub struct TipClosed {
                pub tip_hash: ::subxt::utils::H256,
                pub who: ::subxt::utils::AccountId32,
                pub payout: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TipClosed {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipClosed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A tip suggestion has been retracted."]
            pub struct TipRetracted {
                pub tip_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for TipRetracted {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipRetracted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A tip suggestion has been slashed."]
            pub struct TipSlashed {
                pub tip_hash: ::subxt::utils::H256,
                pub finder: ::subxt::utils::AccountId32,
                pub deposit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TipSlashed {
                const PALLET: &'static str = "Tips";
                const EVENT: &'static str = "TipSlashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."]
                #[doc = " This has the insecure enumerable hash function since the key itself is already"]
                #[doc = " guaranteed to be a secure hash."]
                pub fn tips(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_tips::OpenTip<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Tips",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            173u8, 172u8, 116u8, 247u8, 202u8, 228u8, 47u8, 222u8, 67u8, 146u8,
                            225u8, 0u8, 74u8, 189u8, 226u8, 206u8, 245u8, 209u8, 26u8, 49u8, 189u8,
                            73u8, 20u8, 117u8, 30u8, 41u8, 129u8, 170u8, 5u8, 226u8, 92u8, 140u8,
                        ],
                    )
                }
                #[doc = " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value."]
                #[doc = " This has the insecure enumerable hash function since the key itself is already"]
                #[doc = " guaranteed to be a secure hash."]
                pub fn tips_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_tips::OpenTip<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::subxt::utils::H256,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Tips",
                        Vec::new(),
                        [
                            173u8, 172u8, 116u8, 247u8, 202u8, 228u8, 47u8, 222u8, 67u8, 146u8,
                            225u8, 0u8, 74u8, 189u8, 226u8, 206u8, 245u8, 209u8, 26u8, 49u8, 189u8,
                            73u8, 20u8, 117u8, 30u8, 41u8, 129u8, 170u8, 5u8, 226u8, 92u8, 140u8,
                        ],
                    )
                }
                #[doc = " Simple preimage lookup from the reason's hash to the original data. Again, has an"]
                #[doc = " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]
                pub fn reasons(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Reasons",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            212u8, 224u8, 153u8, 133u8, 234u8, 213u8, 134u8, 255u8, 59u8, 61u8,
                            200u8, 47u8, 186u8, 177u8, 35u8, 108u8, 85u8, 144u8, 185u8, 69u8,
                            159u8, 38u8, 83u8, 166u8, 200u8, 20u8, 220u8, 234u8, 59u8, 61u8, 223u8,
                            167u8,
                        ],
                    )
                }
                #[doc = " Simple preimage lookup from the reason's hash to the original data. Again, has an"]
                #[doc = " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."]
                pub fn reasons_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Tips",
                        "Reasons",
                        Vec::new(),
                        [
                            212u8, 224u8, 153u8, 133u8, 234u8, 213u8, 134u8, 255u8, 59u8, 61u8,
                            200u8, 47u8, 186u8, 177u8, 35u8, 108u8, 85u8, 144u8, 185u8, 69u8,
                            159u8, 38u8, 83u8, 166u8, 200u8, 20u8, 220u8, 234u8, 59u8, 61u8, 223u8,
                            167u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximum acceptable reason length."]
                #[doc = ""]
                #[doc = " Benchmarks depend on this value, be sure to update weights file when changing this value"]
                pub fn maximum_reason_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "MaximumReasonLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per byte within the tip report reason or bounty description."]
                pub fn data_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "DataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The period for which a tip remains open after is has achieved threshold tippers."]
                pub fn tip_countdown(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "TipCountdown",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The percent of the final tip which goes to the original reporter of the tip."]
                pub fn tip_finders_fee(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Percent>
                {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "TipFindersFee",
                        [
                            40u8, 171u8, 69u8, 196u8, 34u8, 184u8, 50u8, 128u8, 139u8, 192u8, 63u8,
                            231u8, 249u8, 200u8, 252u8, 73u8, 244u8, 170u8, 51u8, 177u8, 106u8,
                            47u8, 114u8, 234u8, 84u8, 104u8, 62u8, 118u8, 227u8, 50u8, 225u8,
                            122u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit for placing a tip report."]
                pub fn tip_report_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Tips",
                        "TipReportDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod assets {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_assets::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_assets::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCreate {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub is_sufficient: ::core::primitive::bool,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCreate {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StartDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for StartDestroy {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "start_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyAccounts {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyAccounts {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "destroy_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyApprovals {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyApprovals {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "destroy_approvals";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FinishDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for FinishDestroy {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "finish_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Mint {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "mint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Burn {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferKeepAlive {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Freeze {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Freeze {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "freeze";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Thaw {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Thaw {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "thaw";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FreezeAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for FreezeAsset {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "freeze_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ThawAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ThawAsset {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "thaw_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferOwnership {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferOwnership {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTeam {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTeam {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "set_team";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceClearMetadata {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceAssetStatus {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                    pub is_sufficient: ::core::primitive::bool,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceAssetStatus {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_asset_status";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveTransfer {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "approve_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelApproval {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCancelApproval {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "force_cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferApproved {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub destination: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferApproved {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "transfer_approved";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Touch {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Touch {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "touch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Refund {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub allow_burn: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Refund {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "refund";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMinBalance {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMinBalance {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "set_min_balance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TouchOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for TouchOther {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "touch_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundOther {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "refund_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Block {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Block {
                    const PALLET: &'static str = "Assets";
                    const CALL: &'static str = "block";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::create`]."]
                pub fn create(
                    &self,
                    id: ::core::primitive::u32,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "create",
                        types::Create {
                            id,
                            admin,
                            min_balance,
                        },
                        [
                            145u8, 101u8, 103u8, 83u8, 71u8, 47u8, 35u8, 182u8, 251u8, 91u8, 34u8,
                            243u8, 26u8, 127u8, 169u8, 98u8, 101u8, 224u8, 130u8, 56u8, 218u8,
                            222u8, 33u8, 126u8, 175u8, 246u8, 199u8, 104u8, 164u8, 51u8, 143u8,
                            201u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_create`]."]
                pub fn force_create(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    is_sufficient: ::core::primitive::bool,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceCreate> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_create",
                        types::ForceCreate {
                            id,
                            owner,
                            is_sufficient,
                            min_balance,
                        },
                        [
                            196u8, 215u8, 224u8, 20u8, 84u8, 14u8, 133u8, 20u8, 114u8, 79u8, 131u8,
                            252u8, 58u8, 11u8, 242u8, 74u8, 126u8, 179u8, 191u8, 170u8, 154u8, 4u8,
                            128u8, 81u8, 118u8, 152u8, 74u8, 89u8, 16u8, 75u8, 24u8, 114u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::start_destroy`]."]
                pub fn start_destroy(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::StartDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "start_destroy",
                        types::StartDestroy { id },
                        [
                            125u8, 82u8, 151u8, 106u8, 25u8, 49u8, 68u8, 203u8, 247u8, 175u8,
                            117u8, 230u8, 84u8, 98u8, 172u8, 73u8, 233u8, 218u8, 212u8, 198u8,
                            69u8, 35u8, 15u8, 179u8, 161u8, 205u8, 190u8, 109u8, 198u8, 214u8,
                            65u8, 164u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::destroy_accounts`]."]
                pub fn destroy_accounts(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::DestroyAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "destroy_accounts",
                        types::DestroyAccounts { id },
                        [
                            236u8, 102u8, 233u8, 170u8, 179u8, 46u8, 42u8, 29u8, 200u8, 116u8,
                            62u8, 114u8, 233u8, 59u8, 217u8, 215u8, 109u8, 232u8, 147u8, 95u8,
                            255u8, 248u8, 119u8, 222u8, 216u8, 165u8, 138u8, 47u8, 28u8, 56u8,
                            204u8, 93u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::destroy_approvals`]."]
                pub fn destroy_approvals(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::DestroyApprovals> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "destroy_approvals",
                        types::DestroyApprovals { id },
                        [
                            34u8, 35u8, 15u8, 44u8, 239u8, 232u8, 88u8, 130u8, 130u8, 87u8, 171u8,
                            255u8, 247u8, 179u8, 14u8, 35u8, 47u8, 223u8, 32u8, 232u8, 41u8, 105u8,
                            207u8, 199u8, 90u8, 136u8, 144u8, 139u8, 252u8, 76u8, 177u8, 106u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::finish_destroy`]."]
                pub fn finish_destroy(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::FinishDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "finish_destroy",
                        types::FinishDestroy { id },
                        [
                            132u8, 67u8, 78u8, 84u8, 240u8, 51u8, 176u8, 119u8, 48u8, 34u8, 153u8,
                            37u8, 25u8, 171u8, 21u8, 164u8, 53u8, 214u8, 36u8, 149u8, 20u8, 240u8,
                            123u8, 195u8, 170u8, 162u8, 118u8, 81u8, 176u8, 218u8, 114u8, 113u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::mint`]."]
                pub fn mint(
                    &self,
                    id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Mint> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "mint",
                        types::Mint {
                            id,
                            beneficiary,
                            amount,
                        },
                        [
                            191u8, 249u8, 66u8, 161u8, 149u8, 36u8, 155u8, 152u8, 203u8, 153u8,
                            106u8, 104u8, 220u8, 6u8, 62u8, 84u8, 102u8, 116u8, 194u8, 224u8,
                            154u8, 73u8, 232u8, 36u8, 233u8, 68u8, 250u8, 134u8, 200u8, 241u8,
                            191u8, 121u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::burn`]."]
                pub fn burn(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Burn> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "burn",
                        types::Burn { id, who, amount },
                        [
                            21u8, 83u8, 255u8, 183u8, 44u8, 200u8, 234u8, 184u8, 19u8, 213u8,
                            187u8, 65u8, 37u8, 28u8, 185u8, 100u8, 14u8, 109u8, 27u8, 57u8, 217u8,
                            152u8, 63u8, 94u8, 95u8, 37u8, 47u8, 59u8, 45u8, 72u8, 198u8, 171u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer`]."]
                pub fn transfer(
                    &self,
                    id: ::core::primitive::u32,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer",
                        types::Transfer { id, target, amount },
                        [
                            105u8, 34u8, 40u8, 12u8, 13u8, 51u8, 202u8, 188u8, 7u8, 109u8, 238u8,
                            241u8, 220u8, 187u8, 119u8, 210u8, 248u8, 211u8, 152u8, 172u8, 232u8,
                            207u8, 142u8, 232u8, 132u8, 122u8, 61u8, 2u8, 202u8, 250u8, 220u8,
                            187u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_keep_alive`]."]
                pub fn transfer_keep_alive(
                    &self,
                    id: ::core::primitive::u32,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { id, target, amount },
                        [
                            48u8, 155u8, 240u8, 146u8, 126u8, 8u8, 51u8, 200u8, 249u8, 132u8,
                            109u8, 55u8, 76u8, 234u8, 205u8, 4u8, 246u8, 38u8, 158u8, 2u8, 27u8,
                            102u8, 206u8, 242u8, 248u8, 83u8, 224u8, 4u8, 146u8, 234u8, 9u8, 16u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_transfer`]."]
                pub fn force_transfer(
                    &self,
                    id: ::core::primitive::u32,
                    source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_transfer",
                        types::ForceTransfer {
                            id,
                            source,
                            dest,
                            amount,
                        },
                        [
                            244u8, 136u8, 65u8, 228u8, 65u8, 0u8, 56u8, 79u8, 136u8, 128u8, 205u8,
                            183u8, 122u8, 141u8, 55u8, 97u8, 106u8, 19u8, 103u8, 249u8, 235u8,
                            92u8, 158u8, 21u8, 181u8, 22u8, 247u8, 141u8, 226u8, 186u8, 169u8,
                            61u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::freeze`]."]
                pub fn freeze(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Freeze> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "freeze",
                        types::Freeze { id, who },
                        [
                            94u8, 168u8, 16u8, 19u8, 139u8, 30u8, 183u8, 201u8, 0u8, 169u8, 218u8,
                            221u8, 166u8, 131u8, 183u8, 23u8, 127u8, 248u8, 65u8, 107u8, 16u8,
                            233u8, 168u8, 134u8, 154u8, 145u8, 163u8, 63u8, 20u8, 37u8, 185u8,
                            59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw`]."]
                pub fn thaw(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Thaw> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "thaw",
                        types::Thaw { id, who },
                        [
                            171u8, 203u8, 90u8, 53u8, 239u8, 72u8, 219u8, 185u8, 251u8, 14u8,
                            192u8, 251u8, 121u8, 49u8, 201u8, 28u8, 87u8, 4u8, 28u8, 223u8, 160u8,
                            136u8, 183u8, 183u8, 34u8, 148u8, 4u8, 24u8, 129u8, 75u8, 230u8, 89u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::freeze_asset`]."]
                pub fn freeze_asset(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::FreezeAsset> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "freeze_asset",
                        types::FreezeAsset { id },
                        [
                            75u8, 237u8, 183u8, 112u8, 112u8, 123u8, 250u8, 203u8, 169u8, 51u8,
                            218u8, 35u8, 159u8, 23u8, 21u8, 10u8, 167u8, 84u8, 161u8, 212u8, 124u8,
                            236u8, 88u8, 175u8, 48u8, 195u8, 33u8, 145u8, 141u8, 156u8, 31u8,
                            250u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw_asset`]."]
                pub fn thaw_asset(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ThawAsset> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "thaw_asset",
                        types::ThawAsset { id },
                        [
                            151u8, 6u8, 170u8, 114u8, 55u8, 8u8, 5u8, 194u8, 251u8, 78u8, 232u8,
                            181u8, 157u8, 62u8, 16u8, 39u8, 79u8, 119u8, 205u8, 198u8, 199u8, 26u8,
                            92u8, 162u8, 169u8, 173u8, 93u8, 51u8, 7u8, 79u8, 198u8, 77u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_ownership`]."]
                pub fn transfer_ownership(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::TransferOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer_ownership",
                        types::TransferOwnership { id, owner },
                        [
                            46u8, 162u8, 249u8, 221u8, 125u8, 252u8, 206u8, 245u8, 168u8, 212u8,
                            30u8, 85u8, 104u8, 158u8, 168u8, 188u8, 24u8, 63u8, 235u8, 109u8, 70u8,
                            186u8, 167u8, 240u8, 113u8, 167u8, 235u8, 191u8, 73u8, 162u8, 237u8,
                            80u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_team`]."]
                pub fn set_team(
                    &self,
                    id: ::core::primitive::u32,
                    issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetTeam> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "set_team",
                        types::SetTeam {
                            id,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            49u8, 21u8, 103u8, 199u8, 177u8, 242u8, 98u8, 160u8, 225u8, 141u8,
                            199u8, 53u8, 153u8, 109u8, 119u8, 33u8, 102u8, 208u8, 234u8, 247u8,
                            44u8, 174u8, 107u8, 114u8, 53u8, 64u8, 6u8, 161u8, 194u8, 119u8, 157u8,
                            201u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    id: ::core::primitive::u32,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "set_metadata",
                        types::SetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                        },
                        [
                            149u8, 29u8, 69u8, 45u8, 29u8, 165u8, 150u8, 134u8, 52u8, 14u8, 158u8,
                            26u8, 100u8, 103u8, 179u8, 72u8, 211u8, 241u8, 140u8, 38u8, 254u8,
                            106u8, 48u8, 155u8, 178u8, 191u8, 165u8, 42u8, 66u8, 203u8, 205u8,
                            59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_metadata`]."]
                pub fn clear_metadata(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "clear_metadata",
                        types::ClearMetadata { id },
                        [
                            68u8, 172u8, 6u8, 158u8, 237u8, 254u8, 22u8, 4u8, 254u8, 157u8, 179u8,
                            168u8, 105u8, 114u8, 56u8, 166u8, 213u8, 38u8, 188u8, 195u8, 99u8,
                            43u8, 142u8, 220u8, 94u8, 248u8, 51u8, 226u8, 233u8, 114u8, 86u8, 93u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_set_metadata`]."]
                pub fn force_set_metadata(
                    &self,
                    id: ::core::primitive::u32,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceSetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_set_metadata",
                        types::ForceSetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                            is_frozen,
                        },
                        [
                            197u8, 232u8, 208u8, 52u8, 135u8, 227u8, 241u8, 252u8, 204u8, 65u8,
                            24u8, 25u8, 252u8, 17u8, 239u8, 213u8, 34u8, 128u8, 84u8, 9u8, 225u8,
                            175u8, 217u8, 121u8, 238u8, 71u8, 192u8, 73u8, 32u8, 187u8, 127u8,
                            186u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_clear_metadata`]."]
                pub fn force_clear_metadata(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ForceClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_clear_metadata",
                        types::ForceClearMetadata { id },
                        [
                            2u8, 224u8, 84u8, 48u8, 130u8, 132u8, 79u8, 38u8, 217u8, 17u8, 165u8,
                            139u8, 89u8, 53u8, 116u8, 184u8, 32u8, 91u8, 122u8, 39u8, 85u8, 40u8,
                            213u8, 216u8, 135u8, 171u8, 50u8, 69u8, 202u8, 28u8, 166u8, 147u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_asset_status`]."]
                pub fn force_asset_status(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    min_balance: ::core::primitive::u128,
                    is_sufficient: ::core::primitive::bool,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceAssetStatus> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_asset_status",
                        types::ForceAssetStatus {
                            id,
                            owner,
                            issuer,
                            admin,
                            freezer,
                            min_balance,
                            is_sufficient,
                            is_frozen,
                        },
                        [
                            229u8, 87u8, 103u8, 34u8, 97u8, 195u8, 198u8, 25u8, 74u8, 44u8, 14u8,
                            73u8, 66u8, 181u8, 57u8, 1u8, 6u8, 152u8, 2u8, 14u8, 135u8, 112u8,
                            64u8, 226u8, 168u8, 224u8, 51u8, 25u8, 212u8, 100u8, 132u8, 48u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_transfer`]."]
                pub fn approve_transfer(
                    &self,
                    id: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ApproveTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "approve_transfer",
                        types::ApproveTransfer {
                            id,
                            delegate,
                            amount,
                        },
                        [
                            10u8, 18u8, 211u8, 4u8, 165u8, 191u8, 27u8, 252u8, 215u8, 206u8, 64u8,
                            215u8, 77u8, 46u8, 89u8, 32u8, 116u8, 183u8, 89u8, 166u8, 12u8, 226u8,
                            142u8, 195u8, 120u8, 6u8, 115u8, 43u8, 214u8, 157u8, 182u8, 73u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_approval`]."]
                pub fn cancel_approval(
                    &self,
                    id: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::CancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "cancel_approval",
                        types::CancelApproval { id, delegate },
                        [
                            147u8, 108u8, 72u8, 71u8, 47u8, 21u8, 60u8, 142u8, 247u8, 9u8, 15u8,
                            126u8, 212u8, 53u8, 140u8, 199u8, 103u8, 99u8, 250u8, 243u8, 19u8,
                            156u8, 88u8, 8u8, 224u8, 81u8, 232u8, 240u8, 7u8, 182u8, 226u8, 63u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_cancel_approval`]."]
                pub fn force_cancel_approval(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ForceCancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "force_cancel_approval",
                        types::ForceCancelApproval {
                            id,
                            owner,
                            delegate,
                        },
                        [
                            217u8, 24u8, 124u8, 44u8, 15u8, 43u8, 140u8, 118u8, 36u8, 21u8, 53u8,
                            32u8, 147u8, 164u8, 122u8, 233u8, 41u8, 226u8, 115u8, 113u8, 62u8,
                            251u8, 246u8, 240u8, 53u8, 58u8, 39u8, 44u8, 248u8, 168u8, 98u8, 76u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_approved`]."]
                pub fn transfer_approved(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    destination: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferApproved> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "transfer_approved",
                        types::TransferApproved {
                            id,
                            owner,
                            destination,
                            amount,
                        },
                        [
                            68u8, 152u8, 244u8, 139u8, 168u8, 68u8, 215u8, 25u8, 85u8, 79u8, 233u8,
                            140u8, 123u8, 200u8, 46u8, 67u8, 111u8, 75u8, 231u8, 51u8, 4u8, 112u8,
                            13u8, 156u8, 36u8, 86u8, 149u8, 31u8, 85u8, 121u8, 190u8, 196u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::touch`]."]
                pub fn touch(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Touch> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "touch",
                        types::Touch { id },
                        [
                            50u8, 185u8, 46u8, 134u8, 136u8, 31u8, 191u8, 34u8, 215u8, 150u8, 73u8,
                            103u8, 140u8, 36u8, 95u8, 156u8, 201u8, 152u8, 32u8, 165u8, 47u8, 86u8,
                            163u8, 255u8, 8u8, 251u8, 176u8, 138u8, 165u8, 48u8, 12u8, 27u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund`]."]
                pub fn refund(
                    &self,
                    id: ::core::primitive::u32,
                    allow_burn: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Refund> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "refund",
                        types::Refund { id, allow_burn },
                        [
                            218u8, 207u8, 8u8, 41u8, 154u8, 250u8, 117u8, 174u8, 143u8, 133u8,
                            34u8, 113u8, 171u8, 18u8, 177u8, 227u8, 146u8, 92u8, 12u8, 226u8,
                            101u8, 230u8, 246u8, 162u8, 32u8, 73u8, 138u8, 158u8, 95u8, 226u8,
                            75u8, 95u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_min_balance`]."]
                pub fn set_min_balance(
                    &self,
                    id: ::core::primitive::u32,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetMinBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "set_min_balance",
                        types::SetMinBalance { id, min_balance },
                        [
                            141u8, 241u8, 137u8, 50u8, 232u8, 122u8, 252u8, 104u8, 185u8, 170u8,
                            246u8, 0u8, 20u8, 128u8, 136u8, 155u8, 62u8, 243u8, 4u8, 221u8, 42u8,
                            225u8, 16u8, 245u8, 58u8, 127u8, 84u8, 193u8, 175u8, 165u8, 35u8, 49u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::touch_other`]."]
                pub fn touch_other(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::TouchOther> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "touch_other",
                        types::TouchOther { id, who },
                        [
                            127u8, 233u8, 16u8, 111u8, 25u8, 249u8, 131u8, 226u8, 122u8, 165u8,
                            24u8, 109u8, 238u8, 242u8, 238u8, 193u8, 141u8, 13u8, 228u8, 162u8,
                            36u8, 30u8, 49u8, 8u8, 225u8, 234u8, 149u8, 200u8, 84u8, 58u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund_other`]."]
                pub fn refund_other(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::RefundOther> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "refund_other",
                        types::RefundOther { id, who },
                        [
                            158u8, 70u8, 20u8, 199u8, 75u8, 101u8, 222u8, 140u8, 132u8, 105u8,
                            61u8, 78u8, 20u8, 250u8, 26u8, 34u8, 113u8, 174u8, 56u8, 169u8, 142u8,
                            152u8, 9u8, 248u8, 197u8, 92u8, 35u8, 204u8, 221u8, 5u8, 73u8, 74u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::block`]."]
                pub fn block(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Block> {
                    ::subxt::tx::Payload::new_static(
                        "Assets",
                        "block",
                        types::Block { id, who },
                        [
                            176u8, 161u8, 196u8, 83u8, 206u8, 44u8, 214u8, 169u8, 96u8, 232u8,
                            217u8, 87u8, 82u8, 153u8, 113u8, 139u8, 185u8, 107u8, 152u8, 89u8,
                            70u8, 46u8, 234u8, 191u8, 5u8, 72u8, 172u8, 214u8, 197u8, 138u8, 242u8,
                            61u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_assets::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was created."]
            pub struct Created {
                pub asset_id: ::core::primitive::u32,
                pub creator: ::subxt::utils::AccountId32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were issued."]
            pub struct Issued {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were transferred."]
            pub struct Transferred {
                pub asset_id: ::core::primitive::u32,
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were destroyed."]
            pub struct Burned {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub asset_id: ::core::primitive::u32,
                pub issuer: ::subxt::utils::AccountId32,
                pub admin: ::subxt::utils::AccountId32,
                pub freezer: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was frozen."]
            pub struct Frozen {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was thawed."]
            pub struct Thawed {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was frozen."]
            pub struct AssetFrozen {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetFrozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetFrozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was thawed."]
            pub struct AssetThawed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetThawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetThawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Accounts were destroyed for given asset."]
            pub struct AccountsDestroyed {
                pub asset_id: ::core::primitive::u32,
                pub accounts_destroyed: ::core::primitive::u32,
                pub accounts_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AccountsDestroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AccountsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Approvals were destroyed for given asset."]
            pub struct ApprovalsDestroyed {
                pub asset_id: ::core::primitive::u32,
                pub approvals_destroyed: ::core::primitive::u32,
                pub approvals_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ApprovalsDestroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovalsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class is in the process of being destroyed."]
            pub struct DestructionStarted {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for DestructionStarted {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "DestructionStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class was destroyed."]
            pub struct Destroyed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was force-created."]
            pub struct ForceCreated {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for an asset."]
            pub struct MetadataSet {
                pub asset_id: ::core::primitive::u32,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an asset."]
            pub struct MetadataCleared {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "(Additional) funds have been approved for transfer to a destination account."]
            pub struct ApprovedTransfer {
                pub asset_id: ::core::primitive::u32,
                pub source: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ApprovedTransfer {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An approval for account `delegate` was cancelled by `owner`."]
            pub struct ApprovalCancelled {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
            #[doc = "the approved `delegate`."]
            pub struct TransferredApproved {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
                pub destination: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransferredApproved {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TransferredApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset has had its attributes changed by the `Force` origin."]
            pub struct AssetStatusChanged {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetStatusChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetStatusChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The min_balance of an asset has been updated by the asset owner."]
            pub struct AssetMinBalanceChanged {
                pub asset_id: ::core::primitive::u32,
                pub new_min_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetMinBalanceChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetMinBalanceChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was created with a deposit from `depositor`."]
            pub struct Touched {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub depositor: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Touched {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Touched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was blocked."]
            pub struct Blocked {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Blocked {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Blocked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of an asset."]
                pub fn asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Asset",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            239u8, 178u8, 246u8, 198u8, 90u8, 71u8, 185u8, 113u8, 25u8, 103u8,
                            132u8, 103u8, 200u8, 215u8, 150u8, 7u8, 253u8, 18u8, 211u8, 183u8,
                            163u8, 186u8, 164u8, 213u8, 205u8, 122u8, 213u8, 147u8, 144u8, 139u8,
                            14u8, 159u8,
                        ],
                    )
                }
                #[doc = " Details of an asset."]
                pub fn asset_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Asset",
                        Vec::new(),
                        [
                            239u8, 178u8, 246u8, 198u8, 90u8, 71u8, 185u8, 113u8, 25u8, 103u8,
                            132u8, 103u8, 200u8, 215u8, 150u8, 7u8, 253u8, 18u8, 211u8, 183u8,
                            163u8, 186u8, 164u8, 213u8, 205u8, 122u8, 213u8, 147u8, 144u8, 139u8,
                            14u8, 159u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Account",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            109u8, 78u8, 9u8, 69u8, 54u8, 200u8, 49u8, 209u8, 123u8, 186u8, 222u8,
                            159u8, 9u8, 89u8, 203u8, 250u8, 228u8, 57u8, 246u8, 120u8, 132u8, 53u8,
                            36u8, 180u8, 71u8, 73u8, 87u8, 150u8, 175u8, 211u8, 147u8, 31u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        ::subxt::utils::AccountId32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Account",
                        Vec::new(),
                        [
                            109u8, 78u8, 9u8, 69u8, 54u8, 200u8, 49u8, 209u8, 123u8, 186u8, 222u8,
                            159u8, 9u8, 89u8, 203u8, 250u8, 228u8, 57u8, 246u8, 120u8, 132u8, 53u8,
                            36u8, 180u8, 71u8, 73u8, 87u8, 150u8, 175u8, 211u8, 147u8, 31u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _2: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Approvals",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            39u8, 105u8, 152u8, 8u8, 118u8, 16u8, 9u8, 192u8, 210u8, 161u8, 219u8,
                            86u8, 73u8, 34u8, 23u8, 146u8, 164u8, 51u8, 248u8, 132u8, 156u8, 182u8,
                            187u8, 227u8, 55u8, 121u8, 79u8, 72u8, 38u8, 236u8, 217u8, 67u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Approvals",
                        Vec::new(),
                        [
                            39u8, 105u8, 152u8, 8u8, 118u8, 16u8, 9u8, 192u8, 210u8, 161u8, 219u8,
                            86u8, 73u8, 34u8, 23u8, 146u8, 164u8, 51u8, 248u8, 132u8, 156u8, 182u8,
                            187u8, 227u8, 55u8, 121u8, 79u8, 72u8, 38u8, 236u8, 217u8, 67u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Metadata",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            139u8, 76u8, 180u8, 117u8, 121u8, 108u8, 151u8, 160u8, 128u8, 183u8,
                            57u8, 213u8, 85u8, 26u8, 84u8, 223u8, 14u8, 211u8, 3u8, 178u8, 49u8,
                            160u8, 135u8, 239u8, 143u8, 195u8, 116u8, 180u8, 89u8, 34u8, 194u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Assets",
                        "Metadata",
                        Vec::new(),
                        [
                            139u8, 76u8, 180u8, 117u8, 121u8, 108u8, 151u8, 160u8, 128u8, 183u8,
                            57u8, 213u8, 85u8, 26u8, 84u8, 223u8, 14u8, 211u8, 3u8, 178u8, 49u8,
                            160u8, 135u8, 239u8, 143u8, 195u8, 116u8, 180u8, 89u8, 34u8, 194u8,
                            145u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call."]
                #[doc = ""]
                #[doc = " Must be configured to result in a weight that makes each call fit in a block."]
                pub fn remove_items_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "RemoveItemsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved for an asset."]
                pub fn asset_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "AssetDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved for a non-provider asset account to be"]
                #[doc = " maintained."]
                pub fn asset_account_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "AssetAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes you store in your"]
                #[doc = " metadata."]
                pub fn metadata_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "MetadataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved when creating a new approval."]
                pub fn approval_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "ApprovalDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a name or symbol stored on-chain."]
                pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Assets",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod pool_assets {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_assets::pallet::Error2;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_assets::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCreate {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub is_sufficient: ::core::primitive::bool,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCreate {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "force_create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StartDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for StartDestroy {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "start_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyAccounts {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyAccounts {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "destroy_accounts";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyApprovals {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for DestroyApprovals {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "destroy_approvals";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FinishDestroy {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for FinishDestroy {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "finish_destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Mint {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "mint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Burn {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferKeepAlive {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Freeze {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Freeze {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "freeze";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Thaw {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Thaw {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "thaw";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FreezeAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for FreezeAsset {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "freeze_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ThawAsset {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ThawAsset {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "thaw_asset";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferOwnership {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferOwnership {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "transfer_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTeam {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTeam {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "set_team";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearMetadata {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub name: ::std::vec::Vec<::core::primitive::u8>,
                    pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetMetadata {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "force_set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceClearMetadata {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceClearMetadata {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "force_clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceAssetStatus {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub min_balance: ::core::primitive::u128,
                    pub is_sufficient: ::core::primitive::bool,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceAssetStatus {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "force_asset_status";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveTransfer {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveTransfer {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "approve_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelApproval {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCancelApproval {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCancelApproval {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "force_cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferApproved {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub destination: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferApproved {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "transfer_approved";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Touch {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Touch {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "touch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Refund {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub allow_burn: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Refund {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "refund";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMinBalance {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub min_balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMinBalance {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "set_min_balance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TouchOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for TouchOther {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "touch_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundOther {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundOther {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "refund_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Block {
                    #[codec(compact)]
                    pub id: ::core::primitive::u32,
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Block {
                    const PALLET: &'static str = "PoolAssets";
                    const CALL: &'static str = "block";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::create`]."]
                pub fn create(
                    &self,
                    id: ::core::primitive::u32,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "create",
                        types::Create {
                            id,
                            admin,
                            min_balance,
                        },
                        [
                            145u8, 101u8, 103u8, 83u8, 71u8, 47u8, 35u8, 182u8, 251u8, 91u8, 34u8,
                            243u8, 26u8, 127u8, 169u8, 98u8, 101u8, 224u8, 130u8, 56u8, 218u8,
                            222u8, 33u8, 126u8, 175u8, 246u8, 199u8, 104u8, 164u8, 51u8, 143u8,
                            201u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_create`]."]
                pub fn force_create(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    is_sufficient: ::core::primitive::bool,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceCreate> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "force_create",
                        types::ForceCreate {
                            id,
                            owner,
                            is_sufficient,
                            min_balance,
                        },
                        [
                            196u8, 215u8, 224u8, 20u8, 84u8, 14u8, 133u8, 20u8, 114u8, 79u8, 131u8,
                            252u8, 58u8, 11u8, 242u8, 74u8, 126u8, 179u8, 191u8, 170u8, 154u8, 4u8,
                            128u8, 81u8, 118u8, 152u8, 74u8, 89u8, 16u8, 75u8, 24u8, 114u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::start_destroy`]."]
                pub fn start_destroy(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::StartDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "start_destroy",
                        types::StartDestroy { id },
                        [
                            125u8, 82u8, 151u8, 106u8, 25u8, 49u8, 68u8, 203u8, 247u8, 175u8,
                            117u8, 230u8, 84u8, 98u8, 172u8, 73u8, 233u8, 218u8, 212u8, 198u8,
                            69u8, 35u8, 15u8, 179u8, 161u8, 205u8, 190u8, 109u8, 198u8, 214u8,
                            65u8, 164u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::destroy_accounts`]."]
                pub fn destroy_accounts(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::DestroyAccounts> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "destroy_accounts",
                        types::DestroyAccounts { id },
                        [
                            236u8, 102u8, 233u8, 170u8, 179u8, 46u8, 42u8, 29u8, 200u8, 116u8,
                            62u8, 114u8, 233u8, 59u8, 217u8, 215u8, 109u8, 232u8, 147u8, 95u8,
                            255u8, 248u8, 119u8, 222u8, 216u8, 165u8, 138u8, 47u8, 28u8, 56u8,
                            204u8, 93u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::destroy_approvals`]."]
                pub fn destroy_approvals(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::DestroyApprovals> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "destroy_approvals",
                        types::DestroyApprovals { id },
                        [
                            34u8, 35u8, 15u8, 44u8, 239u8, 232u8, 88u8, 130u8, 130u8, 87u8, 171u8,
                            255u8, 247u8, 179u8, 14u8, 35u8, 47u8, 223u8, 32u8, 232u8, 41u8, 105u8,
                            207u8, 199u8, 90u8, 136u8, 144u8, 139u8, 252u8, 76u8, 177u8, 106u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::finish_destroy`]."]
                pub fn finish_destroy(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::FinishDestroy> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "finish_destroy",
                        types::FinishDestroy { id },
                        [
                            132u8, 67u8, 78u8, 84u8, 240u8, 51u8, 176u8, 119u8, 48u8, 34u8, 153u8,
                            37u8, 25u8, 171u8, 21u8, 164u8, 53u8, 214u8, 36u8, 149u8, 20u8, 240u8,
                            123u8, 195u8, 170u8, 162u8, 118u8, 81u8, 176u8, 218u8, 114u8, 113u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::mint`]."]
                pub fn mint(
                    &self,
                    id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Mint> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "mint",
                        types::Mint {
                            id,
                            beneficiary,
                            amount,
                        },
                        [
                            191u8, 249u8, 66u8, 161u8, 149u8, 36u8, 155u8, 152u8, 203u8, 153u8,
                            106u8, 104u8, 220u8, 6u8, 62u8, 84u8, 102u8, 116u8, 194u8, 224u8,
                            154u8, 73u8, 232u8, 36u8, 233u8, 68u8, 250u8, 134u8, 200u8, 241u8,
                            191u8, 121u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::burn`]."]
                pub fn burn(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Burn> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "burn",
                        types::Burn { id, who, amount },
                        [
                            21u8, 83u8, 255u8, 183u8, 44u8, 200u8, 234u8, 184u8, 19u8, 213u8,
                            187u8, 65u8, 37u8, 28u8, 185u8, 100u8, 14u8, 109u8, 27u8, 57u8, 217u8,
                            152u8, 63u8, 94u8, 95u8, 37u8, 47u8, 59u8, 45u8, 72u8, 198u8, 171u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer`]."]
                pub fn transfer(
                    &self,
                    id: ::core::primitive::u32,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "transfer",
                        types::Transfer { id, target, amount },
                        [
                            105u8, 34u8, 40u8, 12u8, 13u8, 51u8, 202u8, 188u8, 7u8, 109u8, 238u8,
                            241u8, 220u8, 187u8, 119u8, 210u8, 248u8, 211u8, 152u8, 172u8, 232u8,
                            207u8, 142u8, 232u8, 132u8, 122u8, 61u8, 2u8, 202u8, 250u8, 220u8,
                            187u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_keep_alive`]."]
                pub fn transfer_keep_alive(
                    &self,
                    id: ::core::primitive::u32,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { id, target, amount },
                        [
                            48u8, 155u8, 240u8, 146u8, 126u8, 8u8, 51u8, 200u8, 249u8, 132u8,
                            109u8, 55u8, 76u8, 234u8, 205u8, 4u8, 246u8, 38u8, 158u8, 2u8, 27u8,
                            102u8, 206u8, 242u8, 248u8, 83u8, 224u8, 4u8, 146u8, 234u8, 9u8, 16u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_transfer`]."]
                pub fn force_transfer(
                    &self,
                    id: ::core::primitive::u32,
                    source: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "force_transfer",
                        types::ForceTransfer {
                            id,
                            source,
                            dest,
                            amount,
                        },
                        [
                            244u8, 136u8, 65u8, 228u8, 65u8, 0u8, 56u8, 79u8, 136u8, 128u8, 205u8,
                            183u8, 122u8, 141u8, 55u8, 97u8, 106u8, 19u8, 103u8, 249u8, 235u8,
                            92u8, 158u8, 21u8, 181u8, 22u8, 247u8, 141u8, 226u8, 186u8, 169u8,
                            61u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::freeze`]."]
                pub fn freeze(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Freeze> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "freeze",
                        types::Freeze { id, who },
                        [
                            94u8, 168u8, 16u8, 19u8, 139u8, 30u8, 183u8, 201u8, 0u8, 169u8, 218u8,
                            221u8, 166u8, 131u8, 183u8, 23u8, 127u8, 248u8, 65u8, 107u8, 16u8,
                            233u8, 168u8, 134u8, 154u8, 145u8, 163u8, 63u8, 20u8, 37u8, 185u8,
                            59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw`]."]
                pub fn thaw(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Thaw> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "thaw",
                        types::Thaw { id, who },
                        [
                            171u8, 203u8, 90u8, 53u8, 239u8, 72u8, 219u8, 185u8, 251u8, 14u8,
                            192u8, 251u8, 121u8, 49u8, 201u8, 28u8, 87u8, 4u8, 28u8, 223u8, 160u8,
                            136u8, 183u8, 183u8, 34u8, 148u8, 4u8, 24u8, 129u8, 75u8, 230u8, 89u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::freeze_asset`]."]
                pub fn freeze_asset(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::FreezeAsset> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "freeze_asset",
                        types::FreezeAsset { id },
                        [
                            75u8, 237u8, 183u8, 112u8, 112u8, 123u8, 250u8, 203u8, 169u8, 51u8,
                            218u8, 35u8, 159u8, 23u8, 21u8, 10u8, 167u8, 84u8, 161u8, 212u8, 124u8,
                            236u8, 88u8, 175u8, 48u8, 195u8, 33u8, 145u8, 141u8, 156u8, 31u8,
                            250u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw_asset`]."]
                pub fn thaw_asset(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ThawAsset> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "thaw_asset",
                        types::ThawAsset { id },
                        [
                            151u8, 6u8, 170u8, 114u8, 55u8, 8u8, 5u8, 194u8, 251u8, 78u8, 232u8,
                            181u8, 157u8, 62u8, 16u8, 39u8, 79u8, 119u8, 205u8, 198u8, 199u8, 26u8,
                            92u8, 162u8, 169u8, 173u8, 93u8, 51u8, 7u8, 79u8, 198u8, 77u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_ownership`]."]
                pub fn transfer_ownership(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::TransferOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "transfer_ownership",
                        types::TransferOwnership { id, owner },
                        [
                            46u8, 162u8, 249u8, 221u8, 125u8, 252u8, 206u8, 245u8, 168u8, 212u8,
                            30u8, 85u8, 104u8, 158u8, 168u8, 188u8, 24u8, 63u8, 235u8, 109u8, 70u8,
                            186u8, 167u8, 240u8, 113u8, 167u8, 235u8, 191u8, 73u8, 162u8, 237u8,
                            80u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_team`]."]
                pub fn set_team(
                    &self,
                    id: ::core::primitive::u32,
                    issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetTeam> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "set_team",
                        types::SetTeam {
                            id,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            49u8, 21u8, 103u8, 199u8, 177u8, 242u8, 98u8, 160u8, 225u8, 141u8,
                            199u8, 53u8, 153u8, 109u8, 119u8, 33u8, 102u8, 208u8, 234u8, 247u8,
                            44u8, 174u8, 107u8, 114u8, 53u8, 64u8, 6u8, 161u8, 194u8, 119u8, 157u8,
                            201u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    id: ::core::primitive::u32,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "set_metadata",
                        types::SetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                        },
                        [
                            149u8, 29u8, 69u8, 45u8, 29u8, 165u8, 150u8, 134u8, 52u8, 14u8, 158u8,
                            26u8, 100u8, 103u8, 179u8, 72u8, 211u8, 241u8, 140u8, 38u8, 254u8,
                            106u8, 48u8, 155u8, 178u8, 191u8, 165u8, 42u8, 66u8, 203u8, 205u8,
                            59u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_metadata`]."]
                pub fn clear_metadata(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "clear_metadata",
                        types::ClearMetadata { id },
                        [
                            68u8, 172u8, 6u8, 158u8, 237u8, 254u8, 22u8, 4u8, 254u8, 157u8, 179u8,
                            168u8, 105u8, 114u8, 56u8, 166u8, 213u8, 38u8, 188u8, 195u8, 99u8,
                            43u8, 142u8, 220u8, 94u8, 248u8, 51u8, 226u8, 233u8, 114u8, 86u8, 93u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_set_metadata`]."]
                pub fn force_set_metadata(
                    &self,
                    id: ::core::primitive::u32,
                    name: ::std::vec::Vec<::core::primitive::u8>,
                    symbol: ::std::vec::Vec<::core::primitive::u8>,
                    decimals: ::core::primitive::u8,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceSetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "force_set_metadata",
                        types::ForceSetMetadata {
                            id,
                            name,
                            symbol,
                            decimals,
                            is_frozen,
                        },
                        [
                            197u8, 232u8, 208u8, 52u8, 135u8, 227u8, 241u8, 252u8, 204u8, 65u8,
                            24u8, 25u8, 252u8, 17u8, 239u8, 213u8, 34u8, 128u8, 84u8, 9u8, 225u8,
                            175u8, 217u8, 121u8, 238u8, 71u8, 192u8, 73u8, 32u8, 187u8, 127u8,
                            186u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_clear_metadata`]."]
                pub fn force_clear_metadata(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ForceClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "force_clear_metadata",
                        types::ForceClearMetadata { id },
                        [
                            2u8, 224u8, 84u8, 48u8, 130u8, 132u8, 79u8, 38u8, 217u8, 17u8, 165u8,
                            139u8, 89u8, 53u8, 116u8, 184u8, 32u8, 91u8, 122u8, 39u8, 85u8, 40u8,
                            213u8, 216u8, 135u8, 171u8, 50u8, 69u8, 202u8, 28u8, 166u8, 147u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_asset_status`]."]
                pub fn force_asset_status(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    min_balance: ::core::primitive::u128,
                    is_sufficient: ::core::primitive::bool,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceAssetStatus> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "force_asset_status",
                        types::ForceAssetStatus {
                            id,
                            owner,
                            issuer,
                            admin,
                            freezer,
                            min_balance,
                            is_sufficient,
                            is_frozen,
                        },
                        [
                            229u8, 87u8, 103u8, 34u8, 97u8, 195u8, 198u8, 25u8, 74u8, 44u8, 14u8,
                            73u8, 66u8, 181u8, 57u8, 1u8, 6u8, 152u8, 2u8, 14u8, 135u8, 112u8,
                            64u8, 226u8, 168u8, 224u8, 51u8, 25u8, 212u8, 100u8, 132u8, 48u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_transfer`]."]
                pub fn approve_transfer(
                    &self,
                    id: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ApproveTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "approve_transfer",
                        types::ApproveTransfer {
                            id,
                            delegate,
                            amount,
                        },
                        [
                            10u8, 18u8, 211u8, 4u8, 165u8, 191u8, 27u8, 252u8, 215u8, 206u8, 64u8,
                            215u8, 77u8, 46u8, 89u8, 32u8, 116u8, 183u8, 89u8, 166u8, 12u8, 226u8,
                            142u8, 195u8, 120u8, 6u8, 115u8, 43u8, 214u8, 157u8, 182u8, 73u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_approval`]."]
                pub fn cancel_approval(
                    &self,
                    id: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::CancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "cancel_approval",
                        types::CancelApproval { id, delegate },
                        [
                            147u8, 108u8, 72u8, 71u8, 47u8, 21u8, 60u8, 142u8, 247u8, 9u8, 15u8,
                            126u8, 212u8, 53u8, 140u8, 199u8, 103u8, 99u8, 250u8, 243u8, 19u8,
                            156u8, 88u8, 8u8, 224u8, 81u8, 232u8, 240u8, 7u8, 182u8, 226u8, 63u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_cancel_approval`]."]
                pub fn force_cancel_approval(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ForceCancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "force_cancel_approval",
                        types::ForceCancelApproval {
                            id,
                            owner,
                            delegate,
                        },
                        [
                            217u8, 24u8, 124u8, 44u8, 15u8, 43u8, 140u8, 118u8, 36u8, 21u8, 53u8,
                            32u8, 147u8, 164u8, 122u8, 233u8, 41u8, 226u8, 115u8, 113u8, 62u8,
                            251u8, 246u8, 240u8, 53u8, 58u8, 39u8, 44u8, 248u8, 168u8, 98u8, 76u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_approved`]."]
                pub fn transfer_approved(
                    &self,
                    id: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    destination: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    amount: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::TransferApproved> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "transfer_approved",
                        types::TransferApproved {
                            id,
                            owner,
                            destination,
                            amount,
                        },
                        [
                            68u8, 152u8, 244u8, 139u8, 168u8, 68u8, 215u8, 25u8, 85u8, 79u8, 233u8,
                            140u8, 123u8, 200u8, 46u8, 67u8, 111u8, 75u8, 231u8, 51u8, 4u8, 112u8,
                            13u8, 156u8, 36u8, 86u8, 149u8, 31u8, 85u8, 121u8, 190u8, 196u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::touch`]."]
                pub fn touch(
                    &self,
                    id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Touch> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "touch",
                        types::Touch { id },
                        [
                            50u8, 185u8, 46u8, 134u8, 136u8, 31u8, 191u8, 34u8, 215u8, 150u8, 73u8,
                            103u8, 140u8, 36u8, 95u8, 156u8, 201u8, 152u8, 32u8, 165u8, 47u8, 86u8,
                            163u8, 255u8, 8u8, 251u8, 176u8, 138u8, 165u8, 48u8, 12u8, 27u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund`]."]
                pub fn refund(
                    &self,
                    id: ::core::primitive::u32,
                    allow_burn: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Refund> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "refund",
                        types::Refund { id, allow_burn },
                        [
                            218u8, 207u8, 8u8, 41u8, 154u8, 250u8, 117u8, 174u8, 143u8, 133u8,
                            34u8, 113u8, 171u8, 18u8, 177u8, 227u8, 146u8, 92u8, 12u8, 226u8,
                            101u8, 230u8, 246u8, 162u8, 32u8, 73u8, 138u8, 158u8, 95u8, 226u8,
                            75u8, 95u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_min_balance`]."]
                pub fn set_min_balance(
                    &self,
                    id: ::core::primitive::u32,
                    min_balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::SetMinBalance> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "set_min_balance",
                        types::SetMinBalance { id, min_balance },
                        [
                            141u8, 241u8, 137u8, 50u8, 232u8, 122u8, 252u8, 104u8, 185u8, 170u8,
                            246u8, 0u8, 20u8, 128u8, 136u8, 155u8, 62u8, 243u8, 4u8, 221u8, 42u8,
                            225u8, 16u8, 245u8, 58u8, 127u8, 84u8, 193u8, 175u8, 165u8, 35u8, 49u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::touch_other`]."]
                pub fn touch_other(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::TouchOther> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "touch_other",
                        types::TouchOther { id, who },
                        [
                            127u8, 233u8, 16u8, 111u8, 25u8, 249u8, 131u8, 226u8, 122u8, 165u8,
                            24u8, 109u8, 238u8, 242u8, 238u8, 193u8, 141u8, 13u8, 228u8, 162u8,
                            36u8, 30u8, 49u8, 8u8, 225u8, 234u8, 149u8, 200u8, 84u8, 58u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund_other`]."]
                pub fn refund_other(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::RefundOther> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "refund_other",
                        types::RefundOther { id, who },
                        [
                            158u8, 70u8, 20u8, 199u8, 75u8, 101u8, 222u8, 140u8, 132u8, 105u8,
                            61u8, 78u8, 20u8, 250u8, 26u8, 34u8, 113u8, 174u8, 56u8, 169u8, 142u8,
                            152u8, 9u8, 248u8, 197u8, 92u8, 35u8, 204u8, 221u8, 5u8, 73u8, 74u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::block`]."]
                pub fn block(
                    &self,
                    id: ::core::primitive::u32,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Block> {
                    ::subxt::tx::Payload::new_static(
                        "PoolAssets",
                        "block",
                        types::Block { id, who },
                        [
                            176u8, 161u8, 196u8, 83u8, 206u8, 44u8, 214u8, 169u8, 96u8, 232u8,
                            217u8, 87u8, 82u8, 153u8, 113u8, 139u8, 185u8, 107u8, 152u8, 89u8,
                            70u8, 46u8, 234u8, 191u8, 5u8, 72u8, 172u8, 214u8, 197u8, 138u8, 242u8,
                            61u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_assets::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was created."]
            pub struct Created {
                pub asset_id: ::core::primitive::u32,
                pub creator: ::subxt::utils::AccountId32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were issued."]
            pub struct Issued {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were transferred."]
            pub struct Transferred {
                pub asset_id: ::core::primitive::u32,
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some assets were destroyed."]
            pub struct Burned {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub asset_id: ::core::primitive::u32,
                pub issuer: ::subxt::utils::AccountId32,
                pub admin: ::subxt::utils::AccountId32,
                pub freezer: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was frozen."]
            pub struct Frozen {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was thawed."]
            pub struct Thawed {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was frozen."]
            pub struct AssetFrozen {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetFrozen {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "AssetFrozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset `asset_id` was thawed."]
            pub struct AssetThawed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetThawed {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "AssetThawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Accounts were destroyed for given asset."]
            pub struct AccountsDestroyed {
                pub asset_id: ::core::primitive::u32,
                pub accounts_destroyed: ::core::primitive::u32,
                pub accounts_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AccountsDestroyed {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "AccountsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Approvals were destroyed for given asset."]
            pub struct ApprovalsDestroyed {
                pub asset_id: ::core::primitive::u32,
                pub approvals_destroyed: ::core::primitive::u32,
                pub approvals_remaining: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ApprovalsDestroyed {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "ApprovalsDestroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class is in the process of being destroyed."]
            pub struct DestructionStarted {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for DestructionStarted {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "DestructionStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset class was destroyed."]
            pub struct Destroyed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some asset class was force-created."]
            pub struct ForceCreated {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for an asset."]
            pub struct MetadataSet {
                pub asset_id: ::core::primitive::u32,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an asset."]
            pub struct MetadataCleared {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "(Additional) funds have been approved for transfer to a destination account."]
            pub struct ApprovedTransfer {
                pub asset_id: ::core::primitive::u32,
                pub source: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for ApprovedTransfer {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An approval for account `delegate` was cancelled by `owner`."]
            pub struct ApprovalCancelled {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
            #[doc = "the approved `delegate`."]
            pub struct TransferredApproved {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
                pub destination: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TransferredApproved {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "TransferredApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An asset has had its attributes changed by the `Force` origin."]
            pub struct AssetStatusChanged {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AssetStatusChanged {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "AssetStatusChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The min_balance of an asset has been updated by the asset owner."]
            pub struct AssetMinBalanceChanged {
                pub asset_id: ::core::primitive::u32,
                pub new_min_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for AssetMinBalanceChanged {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "AssetMinBalanceChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was created with a deposit from `depositor`."]
            pub struct Touched {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub depositor: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Touched {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Touched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account `who` was blocked."]
            pub struct Blocked {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Blocked {
                const PALLET: &'static str = "PoolAssets";
                const EVENT: &'static str = "Blocked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of an asset."]
                pub fn asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Asset",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            239u8, 178u8, 246u8, 198u8, 90u8, 71u8, 185u8, 113u8, 25u8, 103u8,
                            132u8, 103u8, 200u8, 215u8, 150u8, 7u8, 253u8, 18u8, 211u8, 183u8,
                            163u8, 186u8, 164u8, 213u8, 205u8, 122u8, 213u8, 147u8, 144u8, 139u8,
                            14u8, 159u8,
                        ],
                    )
                }
                #[doc = " Details of an asset."]
                pub fn asset_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetDetails<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Asset",
                        Vec::new(),
                        [
                            239u8, 178u8, 246u8, 198u8, 90u8, 71u8, 185u8, 113u8, 25u8, 103u8,
                            132u8, 103u8, 200u8, 215u8, 150u8, 7u8, 253u8, 18u8, 211u8, 183u8,
                            163u8, 186u8, 164u8, 213u8, 205u8, 122u8, 213u8, 147u8, 144u8, 139u8,
                            14u8, 159u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Account",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            109u8, 78u8, 9u8, 69u8, 54u8, 200u8, 49u8, 209u8, 123u8, 186u8, 222u8,
                            159u8, 9u8, 89u8, 203u8, 250u8, 228u8, 57u8, 246u8, 120u8, 132u8, 53u8,
                            36u8, 180u8, 71u8, 73u8, 87u8, 150u8, 175u8, 211u8, 147u8, 31u8,
                        ],
                    )
                }
                #[doc = " The holdings of a specific account for a specific asset."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetAccount<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        (),
                        ::subxt::utils::AccountId32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Account",
                        Vec::new(),
                        [
                            109u8, 78u8, 9u8, 69u8, 54u8, 200u8, 49u8, 209u8, 123u8, 186u8, 222u8,
                            159u8, 9u8, 89u8, 203u8, 250u8, 228u8, 57u8, 246u8, 120u8, 132u8, 53u8,
                            36u8, 180u8, 71u8, 73u8, 87u8, 150u8, 175u8, 211u8, 147u8, 31u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _2: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Approvals",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            39u8, 105u8, 152u8, 8u8, 118u8, 16u8, 9u8, 192u8, 210u8, 161u8, 219u8,
                            86u8, 73u8, 34u8, 23u8, 146u8, 164u8, 51u8, 248u8, 132u8, 156u8, 182u8,
                            187u8, 227u8, 55u8, 121u8, 79u8, 72u8, 38u8, 236u8, 217u8, 67u8,
                        ],
                    )
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::Approval<
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Approvals",
                        Vec::new(),
                        [
                            39u8, 105u8, 152u8, 8u8, 118u8, 16u8, 9u8, 192u8, 210u8, 161u8, 219u8,
                            86u8, 73u8, 34u8, 23u8, 146u8, 164u8, 51u8, 248u8, 132u8, 156u8, 182u8,
                            187u8, 227u8, 55u8, 121u8, 79u8, 72u8, 38u8, 236u8, 217u8, 67u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Metadata",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            139u8, 76u8, 180u8, 117u8, 121u8, 108u8, 151u8, 160u8, 128u8, 183u8,
                            57u8, 213u8, 85u8, 26u8, 84u8, 223u8, 14u8, 211u8, 3u8, 178u8, 49u8,
                            160u8, 135u8, 239u8, 143u8, 195u8, 116u8, 180u8, 89u8, 34u8, 194u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_assets::types::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "PoolAssets",
                        "Metadata",
                        Vec::new(),
                        [
                            139u8, 76u8, 180u8, 117u8, 121u8, 108u8, 151u8, 160u8, 128u8, 183u8,
                            57u8, 213u8, 85u8, 26u8, 84u8, 223u8, 14u8, 211u8, 3u8, 178u8, 49u8,
                            160u8, 135u8, 239u8, 143u8, 195u8, 116u8, 180u8, 89u8, 34u8, 194u8,
                            145u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call."]
                #[doc = ""]
                #[doc = " Must be configured to result in a weight that makes each call fit in a block."]
                pub fn remove_items_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PoolAssets",
                        "RemoveItemsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved for an asset."]
                pub fn asset_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PoolAssets",
                        "AssetDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved for a non-provider asset account to be"]
                #[doc = " maintained."]
                pub fn asset_account_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PoolAssets",
                        "AssetAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PoolAssets",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes you store in your"]
                #[doc = " metadata."]
                pub fn metadata_deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PoolAssets",
                        "MetadataDepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of funds that must be reserved when creating a new approval."]
                pub fn approval_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "PoolAssets",
                        "ApprovalDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a name or symbol stored on-chain."]
                pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "PoolAssets",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod mmr {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Latest MMR Root hash."]
                pub fn root_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "RootHash",
                        vec![],
                        [
                            111u8, 206u8, 173u8, 92u8, 67u8, 49u8, 150u8, 113u8, 90u8, 245u8, 38u8,
                            254u8, 76u8, 250u8, 167u8, 66u8, 130u8, 129u8, 251u8, 220u8, 172u8,
                            229u8, 162u8, 251u8, 36u8, 227u8, 43u8, 189u8, 7u8, 106u8, 23u8, 13u8,
                        ],
                    )
                }
                #[doc = " Current size of the MMR (number of leaves)."]
                pub fn number_of_leaves(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u64,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "NumberOfLeaves",
                        vec![],
                        [
                            123u8, 58u8, 149u8, 174u8, 85u8, 45u8, 20u8, 115u8, 241u8, 0u8, 51u8,
                            174u8, 234u8, 60u8, 230u8, 59u8, 237u8, 144u8, 170u8, 32u8, 4u8, 0u8,
                            34u8, 163u8, 238u8, 205u8, 93u8, 208u8, 53u8, 38u8, 141u8, 195u8,
                        ],
                    )
                }
                #[doc = " Hashes of the nodes in the MMR."]
                #[doc = ""]
                #[doc = " Note this collection only contains MMR peaks, the inner nodes (and leaves)"]
                #[doc = " are pruned and only stored in the Offchain DB."]
                pub fn nodes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "Nodes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            27u8, 84u8, 41u8, 195u8, 146u8, 81u8, 211u8, 189u8, 63u8, 125u8, 173u8,
                            206u8, 69u8, 198u8, 202u8, 213u8, 89u8, 31u8, 89u8, 177u8, 76u8, 154u8,
                            249u8, 197u8, 133u8, 78u8, 142u8, 71u8, 183u8, 3u8, 132u8, 25u8,
                        ],
                    )
                }
                #[doc = " Hashes of the nodes in the MMR."]
                #[doc = ""]
                #[doc = " Note this collection only contains MMR peaks, the inner nodes (and leaves)"]
                #[doc = " are pruned and only stored in the Offchain DB."]
                pub fn nodes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Mmr",
                        "Nodes",
                        Vec::new(),
                        [
                            27u8, 84u8, 41u8, 195u8, 146u8, 81u8, 211u8, 189u8, 63u8, 125u8, 173u8,
                            206u8, 69u8, 198u8, 202u8, 213u8, 89u8, 31u8, 89u8, 177u8, 76u8, 154u8,
                            249u8, 197u8, 133u8, 78u8, 142u8, 71u8, 183u8, 3u8, 132u8, 25u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod lottery {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_lottery::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_lottery::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BuyTicket {
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for BuyTicket {
                    const PALLET: &'static str = "Lottery";
                    const CALL: &'static str = "buy_ticket";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCalls {
                    pub calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCalls {
                    const PALLET: &'static str = "Lottery";
                    const CALL: &'static str = "set_calls";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StartLottery {
                    pub price: ::core::primitive::u128,
                    pub length: ::core::primitive::u32,
                    pub delay: ::core::primitive::u32,
                    pub repeat: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for StartLottery {
                    const PALLET: &'static str = "Lottery";
                    const CALL: &'static str = "start_lottery";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct StopRepeat;
                impl ::subxt::blocks::StaticExtrinsic for StopRepeat {
                    const PALLET: &'static str = "Lottery";
                    const CALL: &'static str = "stop_repeat";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::buy_ticket`]."]
                pub fn buy_ticket(
                    &self,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::BuyTicket> {
                    ::subxt::tx::Payload::new_static(
                        "Lottery",
                        "buy_ticket",
                        types::BuyTicket {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            167u8, 190u8, 81u8, 163u8, 132u8, 76u8, 186u8, 99u8, 160u8, 233u8,
                            11u8, 197u8, 145u8, 12u8, 188u8, 244u8, 237u8, 202u8, 142u8, 252u8,
                            184u8, 73u8, 196u8, 143u8, 1u8, 179u8, 158u8, 126u8, 188u8, 16u8,
                            219u8, 17u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_calls`]."]
                pub fn set_calls(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                ) -> ::subxt::tx::Payload<types::SetCalls> {
                    ::subxt::tx::Payload::new_static(
                        "Lottery",
                        "set_calls",
                        types::SetCalls { calls },
                        [
                            58u8, 190u8, 247u8, 214u8, 23u8, 139u8, 37u8, 159u8, 139u8, 19u8,
                            182u8, 160u8, 156u8, 232u8, 17u8, 223u8, 223u8, 180u8, 223u8, 183u8,
                            66u8, 20u8, 168u8, 140u8, 84u8, 46u8, 14u8, 228u8, 104u8, 96u8, 26u8,
                            225u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::start_lottery`]."]
                pub fn start_lottery(
                    &self,
                    price: ::core::primitive::u128,
                    length: ::core::primitive::u32,
                    delay: ::core::primitive::u32,
                    repeat: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::StartLottery> {
                    ::subxt::tx::Payload::new_static(
                        "Lottery",
                        "start_lottery",
                        types::StartLottery {
                            price,
                            length,
                            delay,
                            repeat,
                        },
                        [
                            216u8, 65u8, 236u8, 220u8, 82u8, 32u8, 83u8, 99u8, 133u8, 222u8, 238u8,
                            31u8, 12u8, 96u8, 97u8, 235u8, 215u8, 83u8, 81u8, 98u8, 92u8, 131u8,
                            73u8, 223u8, 159u8, 226u8, 213u8, 151u8, 81u8, 153u8, 106u8, 139u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::stop_repeat`]."]
                pub fn stop_repeat(&self) -> ::subxt::tx::Payload<types::StopRepeat> {
                    ::subxt::tx::Payload::new_static(
                        "Lottery",
                        "stop_repeat",
                        types::StopRepeat {},
                        [
                            242u8, 122u8, 161u8, 14u8, 43u8, 115u8, 234u8, 131u8, 235u8, 234u8,
                            89u8, 21u8, 109u8, 83u8, 119u8, 77u8, 116u8, 57u8, 98u8, 56u8, 150u8,
                            123u8, 251u8, 97u8, 211u8, 136u8, 219u8, 174u8, 156u8, 92u8, 72u8,
                            251u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_lottery::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A lottery has been started!"]
            pub struct LotteryStarted;
            impl ::subxt::events::StaticEvent for LotteryStarted {
                const PALLET: &'static str = "Lottery";
                const EVENT: &'static str = "LotteryStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new set of calls have been set!"]
            pub struct CallsUpdated;
            impl ::subxt::events::StaticEvent for CallsUpdated {
                const PALLET: &'static str = "Lottery";
                const EVENT: &'static str = "CallsUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A winner has been chosen!"]
            pub struct Winner {
                pub winner: ::subxt::utils::AccountId32,
                pub lottery_balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Winner {
                const PALLET: &'static str = "Lottery";
                const EVENT: &'static str = "Winner";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A ticket has been bought!"]
            pub struct TicketBought {
                pub who: ::subxt::utils::AccountId32,
                pub call_index: (::core::primitive::u8, ::core::primitive::u8),
            }
            impl ::subxt::events::StaticEvent for TicketBought {
                const PALLET: &'static str = "Lottery";
                const EVENT: &'static str = "TicketBought";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn lottery_index(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "LotteryIndex",
                        vec![],
                        [
                            10u8, 241u8, 0u8, 255u8, 87u8, 44u8, 63u8, 86u8, 15u8, 18u8, 34u8,
                            242u8, 36u8, 184u8, 159u8, 90u8, 5u8, 197u8, 107u8, 138u8, 104u8, 96u8,
                            209u8, 197u8, 144u8, 91u8, 165u8, 217u8, 249u8, 113u8, 14u8, 174u8,
                        ],
                    )
                }
                #[doc = " The configuration for the current lottery."]
                pub fn lottery(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_lottery::LotteryConfig<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "Lottery",
                        vec![],
                        [
                            151u8, 14u8, 5u8, 176u8, 35u8, 73u8, 2u8, 72u8, 204u8, 31u8, 64u8,
                            84u8, 172u8, 165u8, 135u8, 218u8, 12u8, 40u8, 53u8, 220u8, 255u8, 72u8,
                            227u8, 96u8, 135u8, 235u8, 219u8, 39u8, 25u8, 37u8, 208u8, 113u8,
                        ],
                    )
                }
                #[doc = " Users who have purchased a ticket. (Lottery Index, Tickets Purchased)"]
                pub fn participants(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u8,
                            ::core::primitive::u8,
                        )>,
                    ),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "Participants",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            222u8, 220u8, 198u8, 17u8, 106u8, 231u8, 34u8, 163u8, 43u8, 41u8, 63u8,
                            148u8, 139u8, 7u8, 99u8, 34u8, 194u8, 110u8, 47u8, 227u8, 161u8, 182u8,
                            168u8, 164u8, 186u8, 0u8, 149u8, 11u8, 69u8, 89u8, 156u8, 95u8,
                        ],
                    )
                }
                #[doc = " Users who have purchased a ticket. (Lottery Index, Tickets Purchased)"]
                pub fn participants_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u8,
                            ::core::primitive::u8,
                        )>,
                    ),
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "Participants",
                        Vec::new(),
                        [
                            222u8, 220u8, 198u8, 17u8, 106u8, 231u8, 34u8, 163u8, 43u8, 41u8, 63u8,
                            148u8, 139u8, 7u8, 99u8, 34u8, 194u8, 110u8, 47u8, 227u8, 161u8, 182u8,
                            168u8, 164u8, 186u8, 0u8, 149u8, 11u8, 69u8, 89u8, 156u8, 95u8,
                        ],
                    )
                }
                #[doc = " Total number of tickets sold."]
                pub fn tickets_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "TicketsCount",
                        vec![],
                        [
                            93u8, 186u8, 110u8, 45u8, 66u8, 145u8, 114u8, 176u8, 130u8, 140u8,
                            153u8, 239u8, 225u8, 118u8, 73u8, 88u8, 131u8, 225u8, 115u8, 14u8,
                            12u8, 107u8, 199u8, 220u8, 206u8, 29u8, 49u8, 83u8, 88u8, 157u8, 73u8,
                            100u8,
                        ],
                    )
                }
                #[doc = " Each ticket's owner."]
                #[doc = ""]
                #[doc = " May have residual storage from previous lotteries. Use `TicketsCount` to see which ones"]
                #[doc = " are actually valid ticket mappings."]
                pub fn tickets(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "Tickets",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            124u8, 47u8, 251u8, 82u8, 222u8, 232u8, 159u8, 52u8, 71u8, 176u8, 80u8,
                            4u8, 109u8, 75u8, 17u8, 1u8, 244u8, 173u8, 127u8, 149u8, 75u8, 11u8,
                            188u8, 178u8, 211u8, 138u8, 99u8, 85u8, 17u8, 160u8, 132u8, 134u8,
                        ],
                    )
                }
                #[doc = " Each ticket's owner."]
                #[doc = ""]
                #[doc = " May have residual storage from previous lotteries. Use `TicketsCount` to see which ones"]
                #[doc = " are actually valid ticket mappings."]
                pub fn tickets_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "Tickets",
                        Vec::new(),
                        [
                            124u8, 47u8, 251u8, 82u8, 222u8, 232u8, 159u8, 52u8, 71u8, 176u8, 80u8,
                            4u8, 109u8, 75u8, 17u8, 1u8, 244u8, 173u8, 127u8, 149u8, 75u8, 11u8,
                            188u8, 178u8, 211u8, 138u8, 99u8, 85u8, 17u8, 160u8, 132u8, 134u8,
                        ],
                    )
                }
                #[doc = " The calls stored in this pallet to be used in an active lottery if configured"]
                #[doc = " by `Config::ValidateCall`."]
                pub fn call_indices(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u8,
                        ::core::primitive::u8,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Lottery",
                        "CallIndices",
                        vec![],
                        [
                            39u8, 119u8, 67u8, 95u8, 114u8, 206u8, 171u8, 112u8, 220u8, 50u8,
                            104u8, 17u8, 183u8, 100u8, 213u8, 26u8, 138u8, 217u8, 183u8, 29u8,
                            75u8, 100u8, 24u8, 78u8, 41u8, 236u8, 142u8, 192u8, 90u8, 106u8, 196u8,
                            21u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The Lottery's pallet id"]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Lottery",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The max number of calls available in a single lottery."]
                pub fn max_calls(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Lottery",
                        "MaxCalls",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of time we should try to generate a random number that has no modulo bias."]
                #[doc = " The larger this number, the more potential computation is used for picking the winner,"]
                #[doc = " but also the more likely that the chosen winner is done fairly."]
                pub fn max_generate_random(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Lottery",
                        "MaxGenerateRandom",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nis {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_nis::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_nis::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PlaceBid {
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                    pub duration: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for PlaceBid {
                    const PALLET: &'static str = "Nis";
                    const CALL: &'static str = "place_bid";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RetractBid {
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                    pub duration: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RetractBid {
                    const PALLET: &'static str = "Nis";
                    const CALL: &'static str = "retract_bid";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FundDeficit;
                impl ::subxt::blocks::StaticExtrinsic for FundDeficit {
                    const PALLET: &'static str = "Nis";
                    const CALL: &'static str = "fund_deficit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ThawPrivate {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub maybe_proportion: ::core::option::Option<
                        runtime_types::sp_arithmetic::per_things::Perquintill,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ThawPrivate {
                    const PALLET: &'static str = "Nis";
                    const CALL: &'static str = "thaw_private";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ThawCommunal {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ThawCommunal {
                    const PALLET: &'static str = "Nis";
                    const CALL: &'static str = "thaw_communal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Communify {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Communify {
                    const PALLET: &'static str = "Nis";
                    const CALL: &'static str = "communify";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Privatize {
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Privatize {
                    const PALLET: &'static str = "Nis";
                    const CALL: &'static str = "privatize";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::place_bid`]."]
                pub fn place_bid(
                    &self,
                    amount: ::core::primitive::u128,
                    duration: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::PlaceBid> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "place_bid",
                        types::PlaceBid { amount, duration },
                        [
                            138u8, 214u8, 63u8, 53u8, 233u8, 95u8, 186u8, 83u8, 235u8, 121u8, 4u8,
                            41u8, 210u8, 214u8, 35u8, 196u8, 89u8, 102u8, 115u8, 130u8, 151u8,
                            212u8, 13u8, 34u8, 198u8, 103u8, 160u8, 39u8, 22u8, 151u8, 216u8,
                            243u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::retract_bid`]."]
                pub fn retract_bid(
                    &self,
                    amount: ::core::primitive::u128,
                    duration: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RetractBid> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "retract_bid",
                        types::RetractBid { amount, duration },
                        [
                            156u8, 140u8, 160u8, 45u8, 107u8, 72u8, 2u8, 129u8, 149u8, 89u8, 103u8,
                            95u8, 189u8, 42u8, 0u8, 21u8, 51u8, 236u8, 113u8, 33u8, 136u8, 115u8,
                            93u8, 223u8, 72u8, 139u8, 46u8, 76u8, 128u8, 134u8, 209u8, 252u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::fund_deficit`]."]
                pub fn fund_deficit(&self) -> ::subxt::tx::Payload<types::FundDeficit> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "fund_deficit",
                        types::FundDeficit {},
                        [
                            49u8, 183u8, 23u8, 249u8, 232u8, 74u8, 238u8, 100u8, 165u8, 242u8,
                            42u8, 6u8, 58u8, 91u8, 28u8, 229u8, 5u8, 180u8, 108u8, 164u8, 63u8,
                            20u8, 92u8, 122u8, 222u8, 149u8, 190u8, 194u8, 64u8, 114u8, 22u8,
                            176u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw_private`]."]
                pub fn thaw_private(
                    &self,
                    index: ::core::primitive::u32,
                    maybe_proportion: ::core::option::Option<
                        runtime_types::sp_arithmetic::per_things::Perquintill,
                    >,
                ) -> ::subxt::tx::Payload<types::ThawPrivate> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "thaw_private",
                        types::ThawPrivate {
                            index,
                            maybe_proportion,
                        },
                        [
                            202u8, 131u8, 103u8, 88u8, 165u8, 203u8, 191u8, 48u8, 99u8, 26u8, 1u8,
                            133u8, 8u8, 139u8, 216u8, 195u8, 22u8, 91u8, 240u8, 188u8, 228u8, 54u8,
                            140u8, 156u8, 66u8, 13u8, 53u8, 184u8, 157u8, 177u8, 227u8, 52u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw_communal`]."]
                pub fn thaw_communal(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ThawCommunal> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "thaw_communal",
                        types::ThawCommunal { index },
                        [
                            106u8, 64u8, 53u8, 173u8, 59u8, 135u8, 254u8, 38u8, 119u8, 2u8, 4u8,
                            109u8, 21u8, 220u8, 218u8, 220u8, 34u8, 10u8, 86u8, 248u8, 166u8,
                            226u8, 183u8, 117u8, 211u8, 16u8, 53u8, 236u8, 0u8, 187u8, 140u8,
                            221u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::communify`]."]
                pub fn communify(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Communify> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "communify",
                        types::Communify { index },
                        [
                            206u8, 141u8, 231u8, 98u8, 101u8, 34u8, 101u8, 190u8, 22u8, 246u8,
                            238u8, 30u8, 48u8, 104u8, 128u8, 115u8, 49u8, 78u8, 30u8, 230u8, 59u8,
                            173u8, 70u8, 89u8, 82u8, 212u8, 105u8, 236u8, 86u8, 244u8, 248u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::privatize`]."]
                pub fn privatize(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Privatize> {
                    ::subxt::tx::Payload::new_static(
                        "Nis",
                        "privatize",
                        types::Privatize { index },
                        [
                            228u8, 215u8, 197u8, 40u8, 194u8, 170u8, 139u8, 192u8, 214u8, 61u8,
                            107u8, 132u8, 89u8, 122u8, 58u8, 12u8, 11u8, 231u8, 186u8, 73u8, 106u8,
                            99u8, 134u8, 216u8, 206u8, 118u8, 221u8, 223u8, 187u8, 206u8, 246u8,
                            255u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_nis::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bid was successfully placed."]
            pub struct BidPlaced {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BidPlaced {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "BidPlaced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bid was successfully removed (before being accepted)."]
            pub struct BidRetracted {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BidRetracted {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "BidRetracted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bid was dropped from a queue because of another, more substantial, bid was present."]
            pub struct BidDropped {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub duration: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BidDropped {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "BidDropped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A bid was accepted. The balance may not be released until expiry."]
            pub struct Issued {
                pub index: ::core::primitive::u32,
                pub expiry: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An receipt has been (at least partially) thawed."]
            pub struct Thawed {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                pub amount: ::core::primitive::u128,
                pub dropped: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An automatic funding of the deficit was made."]
            pub struct Funded {
                pub deficit: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Funded {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Funded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A receipt was transfered."]
            pub struct Transferred {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Nis";
                const EVENT: &'static str = "Transferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The totals of items and balances within each queue. Saves a lot of storage reads in the"]
                #[doc = " case of sparsely packed queues."]
                #[doc = ""]
                #[doc = " The vector is indexed by duration in `Period`s, offset by one, so information on the queue"]
                #[doc = " whose duration is one `Period` would be storage `0`."]
                pub fn queue_totals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "QueueTotals",
                        vec![],
                        [
                            40u8, 120u8, 43u8, 203u8, 97u8, 129u8, 61u8, 184u8, 137u8, 45u8, 201u8,
                            90u8, 227u8, 161u8, 52u8, 179u8, 9u8, 74u8, 104u8, 225u8, 209u8, 62u8,
                            69u8, 222u8, 124u8, 202u8, 36u8, 137u8, 183u8, 102u8, 234u8, 58u8,
                        ],
                    )
                }
                #[doc = " The queues of bids. Indexed by duration (in `Period`s)."]
                pub fn queues(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_nis::pallet::Bid<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Queues",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            144u8, 181u8, 173u8, 134u8, 6u8, 165u8, 174u8, 91u8, 75u8, 241u8,
                            142u8, 192u8, 246u8, 71u8, 132u8, 146u8, 181u8, 158u8, 125u8, 34u8,
                            5u8, 151u8, 136u8, 148u8, 228u8, 11u8, 226u8, 229u8, 8u8, 50u8, 205u8,
                            75u8,
                        ],
                    )
                }
                #[doc = " The queues of bids. Indexed by duration (in `Period`s)."]
                pub fn queues_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_nis::pallet::Bid<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Queues",
                        Vec::new(),
                        [
                            144u8, 181u8, 173u8, 134u8, 6u8, 165u8, 174u8, 91u8, 75u8, 241u8,
                            142u8, 192u8, 246u8, 71u8, 132u8, 146u8, 181u8, 158u8, 125u8, 34u8,
                            5u8, 151u8, 136u8, 148u8, 228u8, 11u8, 226u8, 229u8, 8u8, 50u8, 205u8,
                            75u8,
                        ],
                    )
                }
                #[doc = " Summary information over the general state."]
                pub fn summary(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nis::pallet::SummaryRecord<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Summary",
                        vec![],
                        [
                            106u8, 163u8, 21u8, 4u8, 192u8, 144u8, 172u8, 185u8, 111u8, 133u8,
                            19u8, 128u8, 237u8, 11u8, 162u8, 252u8, 184u8, 221u8, 148u8, 63u8,
                            104u8, 109u8, 176u8, 158u8, 6u8, 174u8, 241u8, 238u8, 234u8, 201u8,
                            59u8, 15u8,
                        ],
                    )
                }
                #[doc = " The currently outstanding receipts, indexed according to the order of creation."]
                pub fn receipts(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nis::pallet::ReceiptRecord<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Receipts",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            245u8, 93u8, 4u8, 120u8, 230u8, 128u8, 163u8, 81u8, 6u8, 198u8, 238u8,
                            80u8, 155u8, 112u8, 159u8, 175u8, 40u8, 6u8, 247u8, 16u8, 15u8, 95u8,
                            159u8, 157u8, 228u8, 124u8, 84u8, 183u8, 165u8, 11u8, 178u8, 48u8,
                        ],
                    )
                }
                #[doc = " The currently outstanding receipts, indexed according to the order of creation."]
                pub fn receipts_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nis::pallet::ReceiptRecord<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nis",
                        "Receipts",
                        Vec::new(),
                        [
                            245u8, 93u8, 4u8, 120u8, 230u8, 128u8, 163u8, 81u8, 6u8, 198u8, 238u8,
                            80u8, 155u8, 112u8, 159u8, 175u8, 40u8, 6u8, 247u8, 16u8, 15u8, 95u8,
                            159u8, 157u8, 228u8, 124u8, 84u8, 183u8, 165u8, 11u8, 178u8, 48u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " Number of duration queues in total. This sets the maximum duration supported, which is"]
                #[doc = " this value multiplied by `Period`."]
                pub fn queue_count(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "QueueCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of items that may be in each duration queue."]
                #[doc = ""]
                #[doc = " Must be larger than zero."]
                pub fn max_queue_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MaxQueueLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Portion of the queue which is free from ordering and just a FIFO."]
                #[doc = ""]
                #[doc = " Must be no greater than `MaxQueueLen`."]
                pub fn fifo_queue_len(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "FifoQueueLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base period for the duration queues. This is the common multiple across all"]
                #[doc = " supported freezing durations that can be bid upon."]
                pub fn base_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "BasePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of funds that may be placed in a bid. Note that this"]
                #[doc = " does not actually limit the amount which may be represented in a receipt since bids may"]
                #[doc = " be split up by the system."]
                #[doc = ""]
                #[doc = " It should be at least big enough to ensure that there is no possible storage spam attack"]
                #[doc = " or queue-filling attack."]
                pub fn min_bid(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MinBid",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The minimum amount of funds which may intentionally be left remaining under a single"]
                #[doc = " receipt."]
                pub fn min_receipt(
                    &self,
                ) -> ::subxt::constants::Address<
                    runtime_types::sp_arithmetic::per_things::Perquintill,
                > {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MinReceipt",
                        [
                            184u8, 78u8, 161u8, 6u8, 214u8, 205u8, 82u8, 205u8, 126u8, 46u8, 7u8,
                            198u8, 186u8, 10u8, 66u8, 116u8, 191u8, 223u8, 17u8, 246u8, 196u8,
                            190u8, 222u8, 226u8, 62u8, 35u8, 191u8, 127u8, 60u8, 171u8, 85u8,
                            201u8,
                        ],
                    )
                }
                #[doc = " The number of blocks between consecutive attempts to dequeue bids and create receipts."]
                #[doc = ""]
                #[doc = " A larger value results in fewer storage hits each block, but a slower period to get to"]
                #[doc = " the target."]
                pub fn intake_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "IntakePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of bids that can consolidated into receipts in a single intake. A"]
                #[doc = " larger value here means less of the block available for transactions should there be a"]
                #[doc = " glut of bids."]
                pub fn max_intake_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "MaxIntakeWeight",
                        [
                            222u8, 183u8, 203u8, 169u8, 31u8, 134u8, 28u8, 12u8, 47u8, 140u8, 71u8,
                            74u8, 61u8, 55u8, 71u8, 236u8, 215u8, 83u8, 28u8, 70u8, 45u8, 128u8,
                            184u8, 57u8, 101u8, 83u8, 42u8, 165u8, 34u8, 155u8, 64u8, 145u8,
                        ],
                    )
                }
                #[doc = " The maximum proportion which may be thawed and the period over which it is reset."]
                pub fn thaw_throttle(
                    &self,
                ) -> ::subxt::constants::Address<(
                    runtime_types::sp_arithmetic::per_things::Perquintill,
                    ::core::primitive::u32,
                )> {
                    ::subxt::constants::Address::new_static(
                        "Nis",
                        "ThawThrottle",
                        [
                            41u8, 240u8, 41u8, 161u8, 238u8, 241u8, 63u8, 205u8, 122u8, 230u8,
                            158u8, 65u8, 212u8, 229u8, 123u8, 215u8, 69u8, 204u8, 207u8, 193u8,
                            149u8, 229u8, 193u8, 245u8, 210u8, 63u8, 106u8, 42u8, 27u8, 182u8,
                            66u8, 167u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod uniques {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_uniques::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_uniques::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    pub collection: ::core::primitive::u32,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCreate {
                    pub collection: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub free_holding: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCreate {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "force_create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Destroy {
                    pub collection: ::core::primitive::u32,
                    pub witness: runtime_types::pallet_uniques::types::DestroyWitness,
                }
                impl ::subxt::blocks::StaticExtrinsic for Destroy {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Mint {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "mint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Burn {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub check_owner: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Redeposit {
                    pub collection: ::core::primitive::u32,
                    pub items: ::std::vec::Vec<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Redeposit {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "redeposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Freeze {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Freeze {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "freeze";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Thaw {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Thaw {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "thaw";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FreezeCollection {
                    pub collection: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for FreezeCollection {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "freeze_collection";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ThawCollection {
                    pub collection: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ThawCollection {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "thaw_collection";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferOwnership {
                    pub collection: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferOwnership {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "transfer_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTeam {
                    pub collection: ::core::primitive::u32,
                    pub issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTeam {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "set_team";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveTransfer {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveTransfer {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "approve_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelApproval {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub maybe_check_delegate: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelApproval {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceItemStatus {
                    pub collection: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub free_holding: ::core::primitive::bool,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceItemStatus {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "force_item_status";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAttribute {
                    pub collection: ::core::primitive::u32,
                    pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                    pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAttribute {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "set_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearAttribute {
                    pub collection: ::core::primitive::u32,
                    pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                    pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearAttribute {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "clear_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearMetadata {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearMetadata {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCollectionMetadata {
                    pub collection: ::core::primitive::u32,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub is_frozen: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCollectionMetadata {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "set_collection_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearCollectionMetadata {
                    pub collection: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearCollectionMetadata {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "clear_collection_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAcceptOwnership {
                    pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAcceptOwnership {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "set_accept_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCollectionMaxSupply {
                    pub collection: ::core::primitive::u32,
                    pub max_supply: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCollectionMaxSupply {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "set_collection_max_supply";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetPrice {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub price: ::core::option::Option<::core::primitive::u128>,
                    pub whitelisted_buyer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetPrice {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "set_price";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BuyItem {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub bid_price: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for BuyItem {
                    const PALLET: &'static str = "Uniques";
                    const CALL: &'static str = "buy_item";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::create`]."]
                pub fn create(
                    &self,
                    collection: ::core::primitive::u32,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "create",
                        types::Create { collection, admin },
                        [
                            149u8, 165u8, 72u8, 26u8, 211u8, 147u8, 101u8, 164u8, 26u8, 71u8, 65u8,
                            119u8, 4u8, 143u8, 154u8, 222u8, 90u8, 214u8, 237u8, 25u8, 6u8, 219u8,
                            119u8, 109u8, 38u8, 92u8, 244u8, 62u8, 194u8, 142u8, 60u8, 96u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_create`]."]
                pub fn force_create(
                    &self,
                    collection: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    free_holding: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceCreate> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "force_create",
                        types::ForceCreate {
                            collection,
                            owner,
                            free_holding,
                        },
                        [
                            30u8, 60u8, 204u8, 125u8, 114u8, 191u8, 75u8, 36u8, 228u8, 16u8, 3u8,
                            70u8, 158u8, 154u8, 156u8, 93u8, 248u8, 24u8, 115u8, 5u8, 203u8, 150u8,
                            115u8, 163u8, 97u8, 253u8, 254u8, 81u8, 117u8, 247u8, 221u8, 51u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::destroy`]."]
                pub fn destroy(
                    &self,
                    collection: ::core::primitive::u32,
                    witness: runtime_types::pallet_uniques::types::DestroyWitness,
                ) -> ::subxt::tx::Payload<types::Destroy> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "destroy",
                        types::Destroy {
                            collection,
                            witness,
                        },
                        [
                            164u8, 227u8, 93u8, 84u8, 22u8, 55u8, 175u8, 182u8, 128u8, 164u8, 84u8,
                            146u8, 170u8, 228u8, 33u8, 39u8, 175u8, 223u8, 12u8, 200u8, 6u8, 162u8,
                            157u8, 111u8, 124u8, 212u8, 189u8, 27u8, 3u8, 12u8, 100u8, 113u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::mint`]."]
                pub fn mint(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Mint> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "mint",
                        types::Mint {
                            collection,
                            item,
                            owner,
                        },
                        [
                            9u8, 39u8, 231u8, 213u8, 131u8, 213u8, 196u8, 76u8, 149u8, 176u8, 41u8,
                            58u8, 205u8, 210u8, 212u8, 216u8, 37u8, 180u8, 243u8, 21u8, 13u8, 40u8,
                            83u8, 99u8, 190u8, 9u8, 181u8, 70u8, 114u8, 227u8, 126u8, 2u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::burn`]."]
                pub fn burn(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    check_owner: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::Burn> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "burn",
                        types::Burn {
                            collection,
                            item,
                            check_owner,
                        },
                        [
                            159u8, 186u8, 125u8, 230u8, 126u8, 241u8, 181u8, 6u8, 163u8, 117u8,
                            51u8, 3u8, 175u8, 83u8, 121u8, 106u8, 11u8, 7u8, 96u8, 136u8, 69u8,
                            62u8, 145u8, 54u8, 113u8, 151u8, 173u8, 204u8, 191u8, 252u8, 200u8,
                            163u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer`]."]
                pub fn transfer(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "transfer",
                        types::Transfer {
                            collection,
                            item,
                            dest,
                        },
                        [
                            28u8, 87u8, 86u8, 189u8, 215u8, 33u8, 73u8, 9u8, 203u8, 35u8, 204u8,
                            44u8, 4u8, 100u8, 133u8, 5u8, 67u8, 110u8, 89u8, 207u8, 191u8, 157u8,
                            237u8, 243u8, 137u8, 251u8, 101u8, 45u8, 82u8, 198u8, 203u8, 224u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::redeposit`]."]
                pub fn redeposit(
                    &self,
                    collection: ::core::primitive::u32,
                    items: ::std::vec::Vec<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::Redeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "redeposit",
                        types::Redeposit { collection, items },
                        [
                            140u8, 193u8, 91u8, 21u8, 240u8, 168u8, 88u8, 38u8, 129u8, 221u8,
                            202u8, 102u8, 11u8, 16u8, 255u8, 27u8, 232u8, 68u8, 24u8, 181u8, 143u8,
                            204u8, 246u8, 214u8, 153u8, 126u8, 246u8, 128u8, 196u8, 87u8, 142u8,
                            48u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::freeze`]."]
                pub fn freeze(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Freeze> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "freeze",
                        types::Freeze { collection, item },
                        [
                            201u8, 109u8, 42u8, 59u8, 93u8, 246u8, 32u8, 33u8, 235u8, 238u8, 71u8,
                            171u8, 113u8, 210u8, 177u8, 146u8, 18u8, 106u8, 104u8, 72u8, 146u8,
                            74u8, 15u8, 121u8, 71u8, 219u8, 101u8, 247u8, 198u8, 200u8, 91u8,
                            175u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw`]."]
                pub fn thaw(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Thaw> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "thaw",
                        types::Thaw { collection, item },
                        [
                            179u8, 236u8, 83u8, 196u8, 137u8, 9u8, 231u8, 113u8, 82u8, 69u8, 22u8,
                            88u8, 210u8, 94u8, 119u8, 168u8, 46u8, 94u8, 156u8, 77u8, 108u8, 237u8,
                            99u8, 18u8, 222u8, 45u8, 30u8, 238u8, 152u8, 121u8, 168u8, 152u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::freeze_collection`]."]
                pub fn freeze_collection(
                    &self,
                    collection: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::FreezeCollection> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "freeze_collection",
                        types::FreezeCollection { collection },
                        [
                            101u8, 17u8, 33u8, 19u8, 92u8, 67u8, 159u8, 71u8, 111u8, 221u8, 189u8,
                            24u8, 89u8, 88u8, 221u8, 48u8, 55u8, 154u8, 1u8, 242u8, 84u8, 87u8,
                            83u8, 244u8, 239u8, 140u8, 17u8, 39u8, 123u8, 171u8, 207u8, 83u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::thaw_collection`]."]
                pub fn thaw_collection(
                    &self,
                    collection: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ThawCollection> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "thaw_collection",
                        types::ThawCollection { collection },
                        [
                            163u8, 97u8, 180u8, 135u8, 154u8, 108u8, 55u8, 227u8, 73u8, 179u8,
                            194u8, 174u8, 133u8, 66u8, 141u8, 217u8, 49u8, 38u8, 151u8, 184u8,
                            41u8, 225u8, 171u8, 2u8, 236u8, 211u8, 241u8, 90u8, 110u8, 238u8, 4u8,
                            76u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_ownership`]."]
                pub fn transfer_ownership(
                    &self,
                    collection: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::TransferOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "transfer_ownership",
                        types::TransferOwnership { collection, owner },
                        [
                            8u8, 160u8, 171u8, 11u8, 58u8, 64u8, 115u8, 116u8, 231u8, 21u8, 92u8,
                            70u8, 98u8, 107u8, 6u8, 136u8, 89u8, 69u8, 215u8, 27u8, 125u8, 54u8,
                            216u8, 210u8, 242u8, 88u8, 116u8, 117u8, 58u8, 228u8, 97u8, 223u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_team`]."]
                pub fn set_team(
                    &self,
                    collection: ::core::primitive::u32,
                    issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetTeam> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "set_team",
                        types::SetTeam {
                            collection,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            249u8, 206u8, 31u8, 26u8, 81u8, 208u8, 252u8, 189u8, 105u8, 105u8,
                            151u8, 226u8, 191u8, 170u8, 0u8, 156u8, 117u8, 227u8, 193u8, 189u8,
                            193u8, 159u8, 233u8, 25u8, 203u8, 112u8, 20u8, 2u8, 4u8, 201u8, 119u8,
                            164u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_transfer`]."]
                pub fn approve_transfer(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ApproveTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "approve_transfer",
                        types::ApproveTransfer {
                            collection,
                            item,
                            delegate,
                        },
                        [
                            45u8, 41u8, 190u8, 101u8, 210u8, 222u8, 100u8, 96u8, 253u8, 173u8,
                            245u8, 208u8, 200u8, 15u8, 100u8, 140u8, 19u8, 93u8, 164u8, 51u8,
                            204u8, 104u8, 236u8, 20u8, 233u8, 208u8, 248u8, 115u8, 80u8, 205u8,
                            232u8, 182u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_approval`]."]
                pub fn cancel_approval(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    maybe_check_delegate: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::CancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "cancel_approval",
                        types::CancelApproval {
                            collection,
                            item,
                            maybe_check_delegate,
                        },
                        [
                            144u8, 128u8, 226u8, 89u8, 22u8, 87u8, 140u8, 74u8, 167u8, 220u8,
                            133u8, 45u8, 187u8, 102u8, 6u8, 47u8, 40u8, 211u8, 68u8, 28u8, 251u8,
                            6u8, 137u8, 57u8, 65u8, 229u8, 109u8, 217u8, 123u8, 185u8, 38u8, 146u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_item_status`]."]
                pub fn force_item_status(
                    &self,
                    collection: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    issuer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    freezer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    free_holding: ::core::primitive::bool,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::ForceItemStatus> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "force_item_status",
                        types::ForceItemStatus {
                            collection,
                            owner,
                            issuer,
                            admin,
                            freezer,
                            free_holding,
                            is_frozen,
                        },
                        [
                            15u8, 13u8, 80u8, 3u8, 18u8, 198u8, 220u8, 25u8, 45u8, 204u8, 62u8,
                            155u8, 108u8, 186u8, 142u8, 109u8, 58u8, 29u8, 120u8, 236u8, 130u8,
                            137u8, 51u8, 182u8, 28u8, 32u8, 255u8, 235u8, 97u8, 232u8, 100u8, 78u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_attribute`]."]
                pub fn set_attribute(
                    &self,
                    collection: ::core::primitive::u32,
                    maybe_item: ::core::option::Option<::core::primitive::u32>,
                    key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::SetAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "set_attribute",
                        types::SetAttribute {
                            collection,
                            maybe_item,
                            key,
                            value,
                        },
                        [
                            160u8, 79u8, 136u8, 74u8, 32u8, 217u8, 209u8, 100u8, 248u8, 198u8,
                            41u8, 5u8, 109u8, 219u8, 178u8, 247u8, 198u8, 42u8, 238u8, 189u8,
                            200u8, 223u8, 2u8, 198u8, 14u8, 108u8, 47u8, 88u8, 43u8, 141u8, 110u8,
                            10u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_attribute`]."]
                pub fn clear_attribute(
                    &self,
                    collection: ::core::primitive::u32,
                    maybe_item: ::core::option::Option<::core::primitive::u32>,
                    key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::ClearAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "clear_attribute",
                        types::ClearAttribute {
                            collection,
                            maybe_item,
                            key,
                        },
                        [
                            77u8, 11u8, 145u8, 101u8, 195u8, 60u8, 166u8, 2u8, 183u8, 55u8, 68u8,
                            129u8, 89u8, 250u8, 250u8, 70u8, 144u8, 84u8, 89u8, 36u8, 142u8, 147u8,
                            213u8, 53u8, 3u8, 214u8, 131u8, 179u8, 112u8, 116u8, 40u8, 160u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "set_metadata",
                        types::SetMetadata {
                            collection,
                            item,
                            data,
                            is_frozen,
                        },
                        [
                            49u8, 220u8, 131u8, 180u8, 229u8, 33u8, 50u8, 88u8, 172u8, 123u8, 88u8,
                            14u8, 153u8, 205u8, 230u8, 126u8, 33u8, 126u8, 149u8, 3u8, 168u8,
                            118u8, 1u8, 184u8, 63u8, 237u8, 9u8, 216u8, 58u8, 50u8, 166u8, 100u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_metadata`]."]
                pub fn clear_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "clear_metadata",
                        types::ClearMetadata { collection, item },
                        [
                            92u8, 8u8, 69u8, 79u8, 18u8, 247u8, 231u8, 152u8, 46u8, 165u8, 34u8,
                            184u8, 174u8, 7u8, 215u8, 112u8, 250u8, 13u8, 131u8, 42u8, 155u8,
                            218u8, 45u8, 150u8, 172u8, 86u8, 12u8, 206u8, 162u8, 45u8, 127u8,
                            166u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_collection_metadata`]."]
                pub fn set_collection_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                    data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    is_frozen: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::SetCollectionMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "set_collection_metadata",
                        types::SetCollectionMetadata {
                            collection,
                            data,
                            is_frozen,
                        },
                        [
                            17u8, 197u8, 73u8, 70u8, 21u8, 122u8, 35u8, 178u8, 178u8, 62u8, 161u8,
                            133u8, 18u8, 27u8, 8u8, 38u8, 1u8, 83u8, 220u8, 77u8, 73u8, 11u8,
                            230u8, 232u8, 191u8, 213u8, 80u8, 157u8, 94u8, 231u8, 108u8, 255u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_collection_metadata`]."]
                pub fn clear_collection_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClearCollectionMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "clear_collection_metadata",
                        types::ClearCollectionMetadata { collection },
                        [
                            144u8, 178u8, 204u8, 186u8, 72u8, 61u8, 132u8, 36u8, 145u8, 191u8,
                            47u8, 39u8, 39u8, 42u8, 165u8, 177u8, 168u8, 183u8, 84u8, 198u8, 1u8,
                            31u8, 126u8, 68u8, 60u8, 122u8, 153u8, 120u8, 56u8, 240u8, 16u8, 20u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_accept_ownership`]."]
                pub fn set_accept_ownership(
                    &self,
                    maybe_collection: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::SetAcceptOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "set_accept_ownership",
                        types::SetAcceptOwnership { maybe_collection },
                        [
                            146u8, 84u8, 33u8, 108u8, 166u8, 232u8, 219u8, 134u8, 24u8, 255u8,
                            170u8, 90u8, 127u8, 72u8, 34u8, 106u8, 151u8, 125u8, 179u8, 125u8,
                            36u8, 77u8, 115u8, 121u8, 174u8, 113u8, 188u8, 77u8, 153u8, 111u8,
                            100u8, 182u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_collection_max_supply`]."]
                pub fn set_collection_max_supply(
                    &self,
                    collection: ::core::primitive::u32,
                    max_supply: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetCollectionMaxSupply> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "set_collection_max_supply",
                        types::SetCollectionMaxSupply {
                            collection,
                            max_supply,
                        },
                        [
                            247u8, 169u8, 181u8, 168u8, 250u8, 79u8, 180u8, 219u8, 218u8, 20u8,
                            181u8, 82u8, 206u8, 35u8, 25u8, 252u8, 30u8, 193u8, 94u8, 17u8, 186u8,
                            109u8, 145u8, 211u8, 140u8, 132u8, 85u8, 206u8, 56u8, 176u8, 56u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_price`]."]
                pub fn set_price(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    price: ::core::option::Option<::core::primitive::u128>,
                    whitelisted_buyer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::SetPrice> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "set_price",
                        types::SetPrice {
                            collection,
                            item,
                            price,
                            whitelisted_buyer,
                        },
                        [
                            67u8, 175u8, 4u8, 158u8, 252u8, 157u8, 133u8, 34u8, 63u8, 150u8, 102u8,
                            136u8, 111u8, 61u8, 214u8, 1u8, 5u8, 51u8, 35u8, 250u8, 244u8, 117u8,
                            136u8, 142u8, 203u8, 201u8, 120u8, 96u8, 77u8, 213u8, 115u8, 58u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::buy_item`]."]
                pub fn buy_item(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    bid_price: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::BuyItem> {
                    ::subxt::tx::Payload::new_static(
                        "Uniques",
                        "buy_item",
                        types::BuyItem {
                            collection,
                            item,
                            bid_price,
                        },
                        [
                            100u8, 147u8, 247u8, 54u8, 153u8, 78u8, 111u8, 183u8, 134u8, 133u8,
                            252u8, 58u8, 159u8, 224u8, 120u8, 7u8, 77u8, 32u8, 175u8, 37u8, 243u8,
                            164u8, 101u8, 199u8, 79u8, 169u8, 131u8, 176u8, 150u8, 111u8, 53u8,
                            233u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_uniques::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` was created."]
            pub struct Created {
                pub collection: ::core::primitive::u32,
                pub creator: ::subxt::utils::AccountId32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` was force-created."]
            pub struct ForceCreated {
                pub collection: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` was destroyed."]
            pub struct Destroyed {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` was issued."]
            pub struct Issued {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` was transferred."]
            pub struct Transferred {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` was destroyed."]
            pub struct Burned {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some `item` was frozen."]
            pub struct Frozen {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Frozen {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some `item` was thawed."]
            pub struct Thawed {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Thawed {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some `collection` was frozen."]
            pub struct CollectionFrozen {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionFrozen {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "CollectionFrozen";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some `collection` was thawed."]
            pub struct CollectionThawed {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionThawed {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "CollectionThawed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub collection: ::core::primitive::u32,
                pub new_owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub collection: ::core::primitive::u32,
                pub issuer: ::subxt::utils::AccountId32,
                pub admin: ::subxt::utils::AccountId32,
                pub freezer: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` of a `collection` has been approved by the `owner` for transfer by"]
            #[doc = "a `delegate`."]
            pub struct ApprovedTransfer {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ApprovedTransfer {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An approval for a `delegate` account to transfer the `item` of an item"]
            #[doc = "`collection` was cancelled by its `owner`."]
            pub struct ApprovalCancelled {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` has had its attributes changed by the `Force` origin."]
            pub struct ItemStatusChanged {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ItemStatusChanged {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ItemStatusChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for a `collection`."]
            pub struct CollectionMetadataSet {
                pub collection: ::core::primitive::u32,
                pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for CollectionMetadataSet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "CollectionMetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for a `collection`."]
            pub struct CollectionMetadataCleared {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionMetadataCleared {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "CollectionMetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for an item."]
            pub struct MetadataSet {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an item."]
            pub struct MetadataCleared {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an item."]
            pub struct Redeposited {
                pub collection: ::core::primitive::u32,
                pub successful_items: ::std::vec::Vec<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for Redeposited {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Redeposited";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New attribute metadata has been set for a `collection` or `item`."]
            pub struct AttributeSet {
                pub collection: ::core::primitive::u32,
                pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            impl ::subxt::events::StaticEvent for AttributeSet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "AttributeSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Attribute metadata has been cleared for a `collection` or `item`."]
            pub struct AttributeCleared {
                pub collection: ::core::primitive::u32,
                pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            impl ::subxt::events::StaticEvent for AttributeCleared {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "AttributeCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Ownership acceptance has changed for an account."]
            pub struct OwnershipAcceptanceChanged {
                pub who: ::subxt::utils::AccountId32,
                pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for OwnershipAcceptanceChanged {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "OwnershipAcceptanceChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Max supply has been set for a collection."]
            pub struct CollectionMaxSupplySet {
                pub collection: ::core::primitive::u32,
                pub max_supply: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionMaxSupplySet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "CollectionMaxSupplySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The price was set for the instance."]
            pub struct ItemPriceSet {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub price: ::core::primitive::u128,
                pub whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for ItemPriceSet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ItemPriceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The price for the instance was removed."]
            pub struct ItemPriceRemoved {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ItemPriceRemoved {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ItemPriceRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An item was bought."]
            pub struct ItemBought {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub price: ::core::primitive::u128,
                pub seller: ::subxt::utils::AccountId32,
                pub buyer: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ItemBought {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ItemBought";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of a collection."]
                pub fn class(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::CollectionDetails<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Class",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            249u8, 58u8, 128u8, 140u8, 143u8, 55u8, 44u8, 4u8, 159u8, 23u8, 235u8,
                            11u8, 188u8, 232u8, 194u8, 189u8, 131u8, 227u8, 60u8, 200u8, 33u8,
                            205u8, 42u8, 109u8, 230u8, 67u8, 173u8, 119u8, 127u8, 121u8, 141u8,
                            248u8,
                        ],
                    )
                }
                #[doc = " Details of a collection."]
                pub fn class_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::CollectionDetails<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Class",
                        Vec::new(),
                        [
                            249u8, 58u8, 128u8, 140u8, 143u8, 55u8, 44u8, 4u8, 159u8, 23u8, 235u8,
                            11u8, 188u8, 232u8, 194u8, 189u8, 131u8, 227u8, 60u8, 200u8, 33u8,
                            205u8, 42u8, 109u8, 230u8, 67u8, 173u8, 119u8, 127u8, 121u8, 141u8,
                            248u8,
                        ],
                    )
                }
                #[doc = " The collection, if any, of which an account is willing to take ownership."]
                pub fn ownership_acceptance(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "OwnershipAcceptance",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            237u8, 207u8, 154u8, 240u8, 36u8, 85u8, 41u8, 121u8, 183u8, 128u8,
                            70u8, 97u8, 243u8, 44u8, 218u8, 70u8, 18u8, 112u8, 228u8, 231u8, 163u8,
                            191u8, 100u8, 141u8, 82u8, 151u8, 19u8, 249u8, 121u8, 166u8, 73u8,
                            88u8,
                        ],
                    )
                }
                #[doc = " The collection, if any, of which an account is willing to take ownership."]
                pub fn ownership_acceptance_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "OwnershipAcceptance",
                        Vec::new(),
                        [
                            237u8, 207u8, 154u8, 240u8, 36u8, 85u8, 41u8, 121u8, 183u8, 128u8,
                            70u8, 97u8, 243u8, 44u8, 218u8, 70u8, 18u8, 112u8, 228u8, 231u8, 163u8,
                            191u8, 100u8, 141u8, 82u8, 151u8, 19u8, 249u8, 121u8, 166u8, 73u8,
                            88u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _2: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Account",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            46u8, 94u8, 162u8, 243u8, 112u8, 147u8, 99u8, 143u8, 38u8, 169u8,
                            173u8, 163u8, 185u8, 47u8, 238u8, 231u8, 0u8, 199u8, 101u8, 107u8,
                            196u8, 28u8, 141u8, 194u8, 187u8, 90u8, 204u8, 254u8, 145u8, 16u8,
                            116u8, 156u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Account",
                        Vec::new(),
                        [
                            46u8, 94u8, 162u8, 243u8, 112u8, 147u8, 99u8, 143u8, 38u8, 169u8,
                            173u8, 163u8, 185u8, 47u8, 238u8, 231u8, 0u8, 199u8, 101u8, 107u8,
                            196u8, 28u8, 141u8, 194u8, 187u8, 90u8, 204u8, 254u8, 145u8, 16u8,
                            116u8, 156u8,
                        ],
                    )
                }
                #[doc = " The collections owned by any given account; set out this way so that collections owned by"]
                #[doc = " a single account can be enumerated."]
                pub fn class_account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "ClassAccount",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            45u8, 253u8, 180u8, 147u8, 168u8, 84u8, 131u8, 146u8, 63u8, 52u8,
                            146u8, 97u8, 157u8, 90u8, 56u8, 210u8, 26u8, 56u8, 27u8, 10u8, 38u8,
                            95u8, 71u8, 56u8, 12u8, 132u8, 55u8, 232u8, 40u8, 204u8, 116u8, 56u8,
                        ],
                    )
                }
                #[doc = " The collections owned by any given account; set out this way so that collections owned by"]
                #[doc = " a single account can be enumerated."]
                pub fn class_account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "ClassAccount",
                        Vec::new(),
                        [
                            45u8, 253u8, 180u8, 147u8, 168u8, 84u8, 131u8, 146u8, 63u8, 52u8,
                            146u8, 97u8, 157u8, 90u8, 56u8, 210u8, 26u8, 56u8, 27u8, 10u8, 38u8,
                            95u8, 71u8, 56u8, 12u8, 132u8, 55u8, 232u8, 40u8, 204u8, 116u8, 56u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                pub fn asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::ItemDetails<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Asset",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            81u8, 97u8, 105u8, 40u8, 104u8, 136u8, 19u8, 223u8, 233u8, 117u8,
                            226u8, 134u8, 76u8, 77u8, 146u8, 114u8, 45u8, 44u8, 75u8, 127u8, 224u8,
                            224u8, 41u8, 84u8, 174u8, 237u8, 117u8, 98u8, 217u8, 57u8, 144u8,
                            155u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                pub fn asset_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::ItemDetails<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Asset",
                        Vec::new(),
                        [
                            81u8, 97u8, 105u8, 40u8, 104u8, 136u8, 19u8, 223u8, 233u8, 117u8,
                            226u8, 134u8, 76u8, 77u8, 146u8, 114u8, 45u8, 44u8, 75u8, 127u8, 224u8,
                            224u8, 41u8, 84u8, 174u8, 237u8, 117u8, 98u8, 217u8, 57u8, 144u8,
                            155u8,
                        ],
                    )
                }
                #[doc = " Metadata of a collection."]
                pub fn class_metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::CollectionMetadata<
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "ClassMetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            117u8, 185u8, 45u8, 160u8, 245u8, 65u8, 45u8, 15u8, 136u8, 185u8,
                            166u8, 173u8, 167u8, 244u8, 72u8, 144u8, 111u8, 88u8, 66u8, 106u8,
                            30u8, 92u8, 27u8, 190u8, 67u8, 153u8, 28u8, 203u8, 133u8, 150u8, 208u8,
                            108u8,
                        ],
                    )
                }
                #[doc = " Metadata of a collection."]
                pub fn class_metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::CollectionMetadata<
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "ClassMetadataOf",
                        Vec::new(),
                        [
                            117u8, 185u8, 45u8, 160u8, 245u8, 65u8, 45u8, 15u8, 136u8, 185u8,
                            166u8, 173u8, 167u8, 244u8, 72u8, 144u8, 111u8, 88u8, 66u8, 106u8,
                            30u8, 92u8, 27u8, 190u8, 67u8, 153u8, 28u8, 203u8, 133u8, 150u8, 208u8,
                            108u8,
                        ],
                    )
                }
                #[doc = " Metadata of an item."]
                pub fn instance_metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::ItemMetadata<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "InstanceMetadataOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            86u8, 12u8, 245u8, 229u8, 11u8, 192u8, 183u8, 237u8, 252u8, 106u8,
                            40u8, 216u8, 69u8, 157u8, 14u8, 160u8, 239u8, 196u8, 139u8, 67u8,
                            134u8, 243u8, 209u8, 135u8, 37u8, 108u8, 167u8, 222u8, 146u8, 166u8,
                            232u8, 218u8,
                        ],
                    )
                }
                #[doc = " Metadata of an item."]
                pub fn instance_metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_uniques::types::ItemMetadata<::core::primitive::u128>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "InstanceMetadataOf",
                        Vec::new(),
                        [
                            86u8, 12u8, 245u8, 229u8, 11u8, 192u8, 183u8, 237u8, 252u8, 106u8,
                            40u8, 216u8, 69u8, 157u8, 14u8, 160u8, 239u8, 196u8, 139u8, 67u8,
                            134u8, 243u8, 209u8, 135u8, 37u8, 108u8, 167u8, 222u8, 146u8, 166u8,
                            232u8, 218u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::option::Option<::core::primitive::u32>>,
                    _2: impl ::std::borrow::Borrow<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        ::core::primitive::u128,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Attribute",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            35u8, 10u8, 95u8, 151u8, 203u8, 63u8, 150u8, 143u8, 255u8, 122u8,
                            245u8, 86u8, 2u8, 7u8, 97u8, 182u8, 86u8, 215u8, 71u8, 52u8, 211u8,
                            20u8, 21u8, 139u8, 35u8, 142u8, 175u8, 10u8, 214u8, 234u8, 23u8, 125u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        ::core::primitive::u128,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "Attribute",
                        Vec::new(),
                        [
                            35u8, 10u8, 95u8, 151u8, 203u8, 63u8, 150u8, 143u8, 255u8, 122u8,
                            245u8, 86u8, 2u8, 7u8, 97u8, 182u8, 86u8, 215u8, 71u8, 52u8, 211u8,
                            20u8, 21u8, 139u8, 35u8, 142u8, 175u8, 10u8, 214u8, 234u8, 23u8, 125u8,
                        ],
                    )
                }
                #[doc = " Price of an asset instance."]
                pub fn item_price_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        ::core::option::Option<::subxt::utils::AccountId32>,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "ItemPriceOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            67u8, 110u8, 7u8, 232u8, 91u8, 102u8, 179u8, 141u8, 97u8, 69u8, 33u8,
                            108u8, 3u8, 72u8, 184u8, 210u8, 152u8, 207u8, 187u8, 154u8, 105u8,
                            35u8, 205u8, 230u8, 76u8, 114u8, 84u8, 18u8, 154u8, 131u8, 75u8, 74u8,
                        ],
                    )
                }
                #[doc = " Price of an asset instance."]
                pub fn item_price_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        ::core::option::Option<::subxt::utils::AccountId32>,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "ItemPriceOf",
                        Vec::new(),
                        [
                            67u8, 110u8, 7u8, 232u8, 91u8, 102u8, 179u8, 141u8, 97u8, 69u8, 33u8,
                            108u8, 3u8, 72u8, 184u8, 210u8, 152u8, 207u8, 187u8, 154u8, 105u8,
                            35u8, 205u8, 230u8, 76u8, 114u8, 84u8, 18u8, 154u8, 131u8, 75u8, 74u8,
                        ],
                    )
                }
                #[doc = " Keeps track of the number of items a collection might have."]
                pub fn collection_max_supply(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "CollectionMaxSupply",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            77u8, 134u8, 216u8, 21u8, 6u8, 23u8, 4u8, 153u8, 100u8, 25u8, 44u8,
                            171u8, 206u8, 112u8, 142u8, 234u8, 26u8, 223u8, 182u8, 11u8, 23u8,
                            27u8, 109u8, 243u8, 120u8, 163u8, 243u8, 92u8, 62u8, 90u8, 113u8, 2u8,
                        ],
                    )
                }
                #[doc = " Keeps track of the number of items a collection might have."]
                pub fn collection_max_supply_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Uniques",
                        "CollectionMaxSupply",
                        Vec::new(),
                        [
                            77u8, 134u8, 216u8, 21u8, 6u8, 23u8, 4u8, 153u8, 100u8, 25u8, 44u8,
                            171u8, 206u8, 112u8, 142u8, 234u8, 26u8, 223u8, 182u8, 11u8, 23u8,
                            27u8, 109u8, 243u8, 120u8, 163u8, 243u8, 92u8, 62u8, 90u8, 113u8, 2u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The basic amount of funds that must be reserved for collection."]
                pub fn collection_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "CollectionDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved for an item."]
                pub fn item_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "ItemDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your item."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding an attribute to an item."]
                pub fn attribute_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "AttributeDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes store in metadata,"]
                #[doc = " either \"normal\" metadata or attribute metadata."]
                pub fn deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "DepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of data stored on-chain."]
                pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of an attribute key."]
                pub fn key_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "KeyLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of an attribute value."]
                pub fn value_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Uniques",
                        "ValueLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nfts {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_nfts::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_nfts::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    pub admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub config: runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCreate {
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub config: runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCreate {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Destroy {
                    pub collection: ::core::primitive::u32,
                    pub witness: runtime_types::pallet_nfts::types::DestroyWitness,
                }
                impl ::subxt::blocks::StaticExtrinsic for Destroy {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "destroy";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Mint {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub mint_to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub witness_data: ::core::option::Option<
                        runtime_types::pallet_nfts::types::MintWitness<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "mint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceMint {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub mint_to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub item_config: runtime_types::pallet_nfts::types::ItemConfig,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceMint {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_mint";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Burn {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Burn {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Transfer {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Redeposit {
                    pub collection: ::core::primitive::u32,
                    pub items: ::std::vec::Vec<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Redeposit {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "redeposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LockItemTransfer {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for LockItemTransfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "lock_item_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnlockItemTransfer {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for UnlockItemTransfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "unlock_item_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LockCollection {
                    pub collection: ::core::primitive::u32,
                    pub lock_settings: runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::CollectionSetting,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for LockCollection {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "lock_collection";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TransferOwnership {
                    pub collection: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferOwnership {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "transfer_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetTeam {
                    pub collection: ::core::primitive::u32,
                    pub issuer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    pub admin: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    pub freezer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetTeam {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_team";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCollectionOwner {
                    pub collection: ::core::primitive::u32,
                    pub owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCollectionOwner {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_collection_owner";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceCollectionConfig {
                    pub collection: ::core::primitive::u32,
                    pub config: runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceCollectionConfig {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_collection_config";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveTransfer {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub maybe_deadline: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveTransfer {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "approve_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelApproval {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelApproval {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "cancel_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearAllTransferApprovals {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearAllTransferApprovals {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_all_transfer_approvals";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct LockItemProperties {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub lock_metadata: ::core::primitive::bool,
                    pub lock_attributes: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for LockItemProperties {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "lock_item_properties";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAttribute {
                    pub collection: ::core::primitive::u32,
                    pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                    pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                        ::subxt::utils::AccountId32,
                    >,
                    pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAttribute {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetAttribute {
                    pub set_as: ::core::option::Option<::subxt::utils::AccountId32>,
                    pub collection: ::core::primitive::u32,
                    pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                    pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                        ::subxt::utils::AccountId32,
                    >,
                    pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetAttribute {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "force_set_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearAttribute {
                    pub collection: ::core::primitive::u32,
                    pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                    pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                        ::subxt::utils::AccountId32,
                    >,
                    pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearAttribute {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_attribute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ApproveItemAttributes {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveItemAttributes {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "approve_item_attributes";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelItemAttributesApproval {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub witness: runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelItemAttributesApproval {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "cancel_item_attributes_approval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearMetadata {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCollectionMetadata {
                    pub collection: ::core::primitive::u32,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCollectionMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_collection_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearCollectionMetadata {
                    pub collection: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearCollectionMetadata {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "clear_collection_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAcceptOwnership {
                    pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAcceptOwnership {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_accept_ownership";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCollectionMaxSupply {
                    pub collection: ::core::primitive::u32,
                    pub max_supply: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCollectionMaxSupply {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_collection_max_supply";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateMintSettings {
                    pub collection: ::core::primitive::u32,
                    pub mint_settings: runtime_types::pallet_nfts::types::MintSettings<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateMintSettings {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "update_mint_settings";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetPrice {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub price: ::core::option::Option<::core::primitive::u128>,
                    pub whitelisted_buyer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetPrice {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_price";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BuyItem {
                    pub collection: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                    pub bid_price: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for BuyItem {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "buy_item";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PayTips {
                    pub tips: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_nfts::types::ItemTip<
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for PayTips {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "pay_tips";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreateSwap {
                    pub offered_collection: ::core::primitive::u32,
                    pub offered_item: ::core::primitive::u32,
                    pub desired_collection: ::core::primitive::u32,
                    pub maybe_desired_item: ::core::option::Option<::core::primitive::u32>,
                    pub maybe_price: ::core::option::Option<
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                    >,
                    pub duration: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CreateSwap {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "create_swap";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelSwap {
                    pub offered_collection: ::core::primitive::u32,
                    pub offered_item: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelSwap {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "cancel_swap";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimSwap {
                    pub send_collection: ::core::primitive::u32,
                    pub send_item: ::core::primitive::u32,
                    pub receive_collection: ::core::primitive::u32,
                    pub receive_item: ::core::primitive::u32,
                    pub witness_price: ::core::option::Option<
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClaimSwap {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "claim_swap";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MintPreSigned {
                    pub mint_data: ::std::boxed::Box<
                        runtime_types::pallet_nfts::types::PreSignedMint<
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >,
                    >,
                    pub signature: runtime_types::sp_runtime::MultiSignature,
                    pub signer: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for MintPreSigned {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "mint_pre_signed";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetAttributesPreSigned {
                    pub data: runtime_types::pallet_nfts::types::PreSignedAttributes<
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub signature: runtime_types::sp_runtime::MultiSignature,
                    pub signer: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetAttributesPreSigned {
                    const PALLET: &'static str = "Nfts";
                    const CALL: &'static str = "set_attributes_pre_signed";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::create`]."]
                pub fn create(
                    &self,
                    admin: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    config: runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "create",
                        types::Create { admin, config },
                        [
                            89u8, 198u8, 55u8, 201u8, 38u8, 126u8, 166u8, 24u8, 188u8, 144u8, 30u8,
                            77u8, 95u8, 23u8, 157u8, 172u8, 179u8, 133u8, 93u8, 145u8, 247u8,
                            127u8, 255u8, 18u8, 102u8, 37u8, 4u8, 188u8, 109u8, 131u8, 225u8,
                            240u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_create`]."]
                pub fn force_create(
                    &self,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    config: runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ForceCreate> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "force_create",
                        types::ForceCreate { owner, config },
                        [
                            209u8, 235u8, 157u8, 140u8, 115u8, 10u8, 243u8, 161u8, 54u8, 194u8,
                            134u8, 41u8, 39u8, 247u8, 56u8, 170u8, 167u8, 96u8, 86u8, 129u8, 51u8,
                            23u8, 141u8, 244u8, 59u8, 98u8, 129u8, 249u8, 10u8, 153u8, 205u8,
                            146u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::destroy`]."]
                pub fn destroy(
                    &self,
                    collection: ::core::primitive::u32,
                    witness: runtime_types::pallet_nfts::types::DestroyWitness,
                ) -> ::subxt::tx::Payload<types::Destroy> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "destroy",
                        types::Destroy {
                            collection,
                            witness,
                        },
                        [
                            36u8, 145u8, 237u8, 158u8, 117u8, 69u8, 35u8, 149u8, 32u8, 84u8, 103u8,
                            14u8, 46u8, 7u8, 63u8, 170u8, 105u8, 204u8, 96u8, 197u8, 238u8, 244u8,
                            31u8, 13u8, 241u8, 255u8, 98u8, 225u8, 117u8, 191u8, 34u8, 223u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::mint`]."]
                pub fn mint(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    mint_to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    witness_data: ::core::option::Option<
                        runtime_types::pallet_nfts::types::MintWitness<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::Mint> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "mint",
                        types::Mint {
                            collection,
                            item,
                            mint_to,
                            witness_data,
                        },
                        [
                            95u8, 52u8, 30u8, 36u8, 206u8, 152u8, 181u8, 6u8, 107u8, 84u8, 72u8,
                            173u8, 72u8, 152u8, 255u8, 227u8, 57u8, 32u8, 24u8, 129u8, 247u8, 43u8,
                            103u8, 109u8, 211u8, 230u8, 211u8, 82u8, 53u8, 117u8, 204u8, 204u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_mint`]."]
                pub fn force_mint(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    mint_to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    item_config: runtime_types::pallet_nfts::types::ItemConfig,
                ) -> ::subxt::tx::Payload<types::ForceMint> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "force_mint",
                        types::ForceMint {
                            collection,
                            item,
                            mint_to,
                            item_config,
                        },
                        [
                            65u8, 13u8, 164u8, 245u8, 183u8, 253u8, 75u8, 29u8, 77u8, 236u8, 181u8,
                            65u8, 253u8, 179u8, 100u8, 97u8, 89u8, 204u8, 192u8, 141u8, 119u8,
                            155u8, 103u8, 158u8, 255u8, 214u8, 120u8, 147u8, 246u8, 6u8, 52u8, 9u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::burn`]."]
                pub fn burn(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Burn> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "burn",
                        types::Burn { collection, item },
                        [
                            254u8, 237u8, 80u8, 216u8, 174u8, 2u8, 122u8, 240u8, 60u8, 207u8,
                            205u8, 138u8, 196u8, 10u8, 84u8, 153u8, 197u8, 196u8, 240u8, 40u8,
                            184u8, 7u8, 191u8, 34u8, 67u8, 91u8, 174u8, 120u8, 249u8, 100u8, 44u8,
                            29u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer`]."]
                pub fn transfer(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    dest: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "transfer",
                        types::Transfer {
                            collection,
                            item,
                            dest,
                        },
                        [
                            28u8, 87u8, 86u8, 189u8, 215u8, 33u8, 73u8, 9u8, 203u8, 35u8, 204u8,
                            44u8, 4u8, 100u8, 133u8, 5u8, 67u8, 110u8, 89u8, 207u8, 191u8, 157u8,
                            237u8, 243u8, 137u8, 251u8, 101u8, 45u8, 82u8, 198u8, 203u8, 224u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::redeposit`]."]
                pub fn redeposit(
                    &self,
                    collection: ::core::primitive::u32,
                    items: ::std::vec::Vec<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::Redeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "redeposit",
                        types::Redeposit { collection, items },
                        [
                            140u8, 193u8, 91u8, 21u8, 240u8, 168u8, 88u8, 38u8, 129u8, 221u8,
                            202u8, 102u8, 11u8, 16u8, 255u8, 27u8, 232u8, 68u8, 24u8, 181u8, 143u8,
                            204u8, 246u8, 214u8, 153u8, 126u8, 246u8, 128u8, 196u8, 87u8, 142u8,
                            48u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::lock_item_transfer`]."]
                pub fn lock_item_transfer(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::LockItemTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "lock_item_transfer",
                        types::LockItemTransfer { collection, item },
                        [
                            193u8, 181u8, 211u8, 126u8, 109u8, 24u8, 162u8, 75u8, 199u8, 104u8,
                            172u8, 150u8, 85u8, 17u8, 248u8, 214u8, 170u8, 184u8, 118u8, 226u8,
                            185u8, 124u8, 100u8, 0u8, 204u8, 13u8, 253u8, 59u8, 255u8, 158u8, 80u8,
                            193u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unlock_item_transfer`]."]
                pub fn unlock_item_transfer(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::UnlockItemTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "unlock_item_transfer",
                        types::UnlockItemTransfer { collection, item },
                        [
                            128u8, 166u8, 247u8, 70u8, 214u8, 24u8, 163u8, 8u8, 243u8, 37u8, 200u8,
                            93u8, 19u8, 129u8, 57u8, 237u8, 138u8, 58u8, 231u8, 9u8, 231u8, 217u8,
                            59u8, 11u8, 10u8, 75u8, 87u8, 165u8, 75u8, 33u8, 16u8, 210u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::lock_collection`]."]
                pub fn lock_collection(
                    &self,
                    collection: ::core::primitive::u32,
                    lock_settings: runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::CollectionSetting,
                    >,
                ) -> ::subxt::tx::Payload<types::LockCollection> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "lock_collection",
                        types::LockCollection {
                            collection,
                            lock_settings,
                        },
                        [
                            120u8, 31u8, 227u8, 81u8, 22u8, 10u8, 194u8, 164u8, 150u8, 122u8, 5u8,
                            0u8, 171u8, 244u8, 248u8, 149u8, 48u8, 136u8, 226u8, 120u8, 245u8, 3u8,
                            26u8, 151u8, 0u8, 22u8, 64u8, 98u8, 193u8, 29u8, 143u8, 255u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::transfer_ownership`]."]
                pub fn transfer_ownership(
                    &self,
                    collection: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::TransferOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "transfer_ownership",
                        types::TransferOwnership { collection, owner },
                        [
                            8u8, 160u8, 171u8, 11u8, 58u8, 64u8, 115u8, 116u8, 231u8, 21u8, 92u8,
                            70u8, 98u8, 107u8, 6u8, 136u8, 89u8, 69u8, 215u8, 27u8, 125u8, 54u8,
                            216u8, 210u8, 242u8, 88u8, 116u8, 117u8, 58u8, 228u8, 97u8, 223u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_team`]."]
                pub fn set_team(
                    &self,
                    collection: ::core::primitive::u32,
                    issuer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    admin: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                    freezer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::SetTeam> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_team",
                        types::SetTeam {
                            collection,
                            issuer,
                            admin,
                            freezer,
                        },
                        [
                            234u8, 47u8, 152u8, 246u8, 250u8, 123u8, 73u8, 184u8, 249u8, 99u8, 0u8,
                            147u8, 253u8, 249u8, 222u8, 216u8, 120u8, 89u8, 218u8, 79u8, 249u8,
                            142u8, 78u8, 207u8, 22u8, 117u8, 39u8, 64u8, 18u8, 116u8, 90u8, 167u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_collection_owner`]."]
                pub fn force_collection_owner(
                    &self,
                    collection: ::core::primitive::u32,
                    owner: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ForceCollectionOwner> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "force_collection_owner",
                        types::ForceCollectionOwner { collection, owner },
                        [
                            248u8, 81u8, 165u8, 167u8, 203u8, 181u8, 178u8, 33u8, 110u8, 168u8,
                            23u8, 227u8, 249u8, 23u8, 20u8, 121u8, 120u8, 89u8, 247u8, 130u8, 63u8,
                            212u8, 219u8, 9u8, 13u8, 149u8, 137u8, 56u8, 138u8, 56u8, 183u8, 4u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_collection_config`]."]
                pub fn force_collection_config(
                    &self,
                    collection: ::core::primitive::u32,
                    config: runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ForceCollectionConfig> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "force_collection_config",
                        types::ForceCollectionConfig { collection, config },
                        [
                            232u8, 220u8, 205u8, 110u8, 169u8, 249u8, 171u8, 71u8, 231u8, 233u8,
                            209u8, 126u8, 39u8, 197u8, 47u8, 102u8, 22u8, 90u8, 231u8, 226u8,
                            243u8, 211u8, 46u8, 175u8, 244u8, 163u8, 28u8, 5u8, 239u8, 206u8,
                            185u8, 67u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_transfer`]."]
                pub fn approve_transfer(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    maybe_deadline: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::ApproveTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "approve_transfer",
                        types::ApproveTransfer {
                            collection,
                            item,
                            delegate,
                            maybe_deadline,
                        },
                        [
                            52u8, 130u8, 159u8, 66u8, 158u8, 56u8, 144u8, 147u8, 5u8, 97u8, 135u8,
                            195u8, 0u8, 166u8, 216u8, 63u8, 90u8, 86u8, 155u8, 45u8, 146u8, 245u8,
                            218u8, 154u8, 16u8, 243u8, 230u8, 127u8, 36u8, 232u8, 183u8, 42u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_approval`]."]
                pub fn cancel_approval(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::CancelApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "cancel_approval",
                        types::CancelApproval {
                            collection,
                            item,
                            delegate,
                        },
                        [
                            119u8, 225u8, 3u8, 135u8, 39u8, 175u8, 135u8, 94u8, 151u8, 131u8,
                            104u8, 10u8, 42u8, 97u8, 160u8, 77u8, 101u8, 115u8, 23u8, 134u8, 81u8,
                            195u8, 221u8, 121u8, 93u8, 30u8, 238u8, 32u8, 168u8, 136u8, 193u8,
                            172u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_all_transfer_approvals`]."]
                pub fn clear_all_transfer_approvals(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClearAllTransferApprovals> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "clear_all_transfer_approvals",
                        types::ClearAllTransferApprovals { collection, item },
                        [
                            158u8, 78u8, 178u8, 106u8, 7u8, 22u8, 94u8, 149u8, 98u8, 117u8, 50u8,
                            111u8, 52u8, 65u8, 176u8, 103u8, 141u8, 64u8, 29u8, 204u8, 34u8, 225u8,
                            154u8, 175u8, 149u8, 134u8, 251u8, 197u8, 202u8, 116u8, 255u8, 202u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::lock_item_properties`]."]
                pub fn lock_item_properties(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    lock_metadata: ::core::primitive::bool,
                    lock_attributes: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::LockItemProperties> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "lock_item_properties",
                        types::LockItemProperties {
                            collection,
                            item,
                            lock_metadata,
                            lock_attributes,
                        },
                        [
                            72u8, 157u8, 108u8, 167u8, 155u8, 24u8, 75u8, 217u8, 183u8, 222u8,
                            96u8, 68u8, 161u8, 99u8, 120u8, 88u8, 2u8, 205u8, 104u8, 6u8, 170u8,
                            65u8, 234u8, 239u8, 22u8, 179u8, 148u8, 92u8, 248u8, 49u8, 210u8, 21u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_attribute`]."]
                pub fn set_attribute(
                    &self,
                    collection: ::core::primitive::u32,
                    maybe_item: ::core::option::Option<::core::primitive::u32>,
                    namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                        ::subxt::utils::AccountId32,
                    >,
                    key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::SetAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_attribute",
                        types::SetAttribute {
                            collection,
                            maybe_item,
                            namespace,
                            key,
                            value,
                        },
                        [
                            40u8, 238u8, 225u8, 187u8, 59u8, 43u8, 50u8, 221u8, 157u8, 138u8,
                            252u8, 86u8, 254u8, 37u8, 97u8, 230u8, 173u8, 136u8, 247u8, 95u8,
                            212u8, 184u8, 150u8, 98u8, 228u8, 176u8, 206u8, 230u8, 49u8, 250u8,
                            95u8, 203u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_set_attribute`]."]
                pub fn force_set_attribute(
                    &self,
                    set_as: ::core::option::Option<::subxt::utils::AccountId32>,
                    collection: ::core::primitive::u32,
                    maybe_item: ::core::option::Option<::core::primitive::u32>,
                    namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                        ::subxt::utils::AccountId32,
                    >,
                    key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::ForceSetAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "force_set_attribute",
                        types::ForceSetAttribute {
                            set_as,
                            collection,
                            maybe_item,
                            namespace,
                            key,
                            value,
                        },
                        [
                            117u8, 76u8, 154u8, 92u8, 158u8, 214u8, 191u8, 101u8, 102u8, 110u8,
                            127u8, 236u8, 74u8, 175u8, 82u8, 180u8, 38u8, 128u8, 160u8, 138u8,
                            213u8, 123u8, 117u8, 173u8, 18u8, 147u8, 206u8, 106u8, 142u8, 184u8,
                            247u8, 11u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_attribute`]."]
                pub fn clear_attribute(
                    &self,
                    collection: ::core::primitive::u32,
                    maybe_item: ::core::option::Option<::core::primitive::u32>,
                    namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                        ::subxt::utils::AccountId32,
                    >,
                    key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::ClearAttribute> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "clear_attribute",
                        types::ClearAttribute {
                            collection,
                            maybe_item,
                            namespace,
                            key,
                        },
                        [
                            21u8, 144u8, 49u8, 192u8, 82u8, 132u8, 192u8, 153u8, 169u8, 178u8,
                            41u8, 86u8, 113u8, 216u8, 25u8, 157u8, 251u8, 127u8, 45u8, 114u8,
                            162u8, 189u8, 10u8, 56u8, 35u8, 64u8, 90u8, 66u8, 232u8, 29u8, 86u8,
                            146u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve_item_attributes`]."]
                pub fn approve_item_attributes(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ApproveItemAttributes> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "approve_item_attributes",
                        types::ApproveItemAttributes {
                            collection,
                            item,
                            delegate,
                        },
                        [
                            150u8, 109u8, 93u8, 177u8, 100u8, 109u8, 139u8, 187u8, 48u8, 192u8,
                            168u8, 193u8, 93u8, 71u8, 253u8, 11u8, 177u8, 43u8, 101u8, 11u8, 72u8,
                            211u8, 113u8, 229u8, 218u8, 238u8, 192u8, 224u8, 197u8, 185u8, 212u8,
                            151u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_item_attributes_approval`]."]
                pub fn cancel_item_attributes_approval(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    delegate: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    witness: runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness,
                ) -> ::subxt::tx::Payload<types::CancelItemAttributesApproval> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "cancel_item_attributes_approval",
                        types::CancelItemAttributesApproval {
                            collection,
                            item,
                            delegate,
                            witness,
                        },
                        [
                            67u8, 204u8, 157u8, 188u8, 140u8, 140u8, 189u8, 184u8, 7u8, 204u8,
                            248u8, 47u8, 132u8, 189u8, 237u8, 6u8, 85u8, 230u8, 171u8, 49u8, 171u8,
                            124u8, 34u8, 34u8, 189u8, 86u8, 122u8, 45u8, 97u8, 168u8, 139u8, 169u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_metadata",
                        types::SetMetadata {
                            collection,
                            item,
                            data,
                        },
                        [
                            196u8, 72u8, 81u8, 230u8, 235u8, 140u8, 211u8, 203u8, 131u8, 24u8,
                            82u8, 78u8, 81u8, 44u8, 191u8, 195u8, 28u8, 143u8, 239u8, 142u8, 204u8,
                            156u8, 216u8, 251u8, 157u8, 235u8, 132u8, 214u8, 48u8, 251u8, 208u8,
                            190u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_metadata`]."]
                pub fn clear_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClearMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "clear_metadata",
                        types::ClearMetadata { collection, item },
                        [
                            92u8, 8u8, 69u8, 79u8, 18u8, 247u8, 231u8, 152u8, 46u8, 165u8, 34u8,
                            184u8, 174u8, 7u8, 215u8, 112u8, 250u8, 13u8, 131u8, 42u8, 155u8,
                            218u8, 45u8, 150u8, 172u8, 86u8, 12u8, 206u8, 162u8, 45u8, 127u8,
                            166u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_collection_metadata`]."]
                pub fn set_collection_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                    data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::SetCollectionMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_collection_metadata",
                        types::SetCollectionMetadata { collection, data },
                        [
                            145u8, 145u8, 151u8, 92u8, 15u8, 79u8, 210u8, 117u8, 138u8, 25u8, 34u8,
                            8u8, 4u8, 100u8, 122u8, 231u8, 22u8, 142u8, 228u8, 182u8, 194u8, 1u8,
                            100u8, 216u8, 14u8, 6u8, 237u8, 169u8, 125u8, 101u8, 207u8, 148u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::clear_collection_metadata`]."]
                pub fn clear_collection_metadata(
                    &self,
                    collection: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClearCollectionMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "clear_collection_metadata",
                        types::ClearCollectionMetadata { collection },
                        [
                            144u8, 178u8, 204u8, 186u8, 72u8, 61u8, 132u8, 36u8, 145u8, 191u8,
                            47u8, 39u8, 39u8, 42u8, 165u8, 177u8, 168u8, 183u8, 84u8, 198u8, 1u8,
                            31u8, 126u8, 68u8, 60u8, 122u8, 153u8, 120u8, 56u8, 240u8, 16u8, 20u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_accept_ownership`]."]
                pub fn set_accept_ownership(
                    &self,
                    maybe_collection: ::core::option::Option<::core::primitive::u32>,
                ) -> ::subxt::tx::Payload<types::SetAcceptOwnership> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_accept_ownership",
                        types::SetAcceptOwnership { maybe_collection },
                        [
                            146u8, 84u8, 33u8, 108u8, 166u8, 232u8, 219u8, 134u8, 24u8, 255u8,
                            170u8, 90u8, 127u8, 72u8, 34u8, 106u8, 151u8, 125u8, 179u8, 125u8,
                            36u8, 77u8, 115u8, 121u8, 174u8, 113u8, 188u8, 77u8, 153u8, 111u8,
                            100u8, 182u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_collection_max_supply`]."]
                pub fn set_collection_max_supply(
                    &self,
                    collection: ::core::primitive::u32,
                    max_supply: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetCollectionMaxSupply> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_collection_max_supply",
                        types::SetCollectionMaxSupply {
                            collection,
                            max_supply,
                        },
                        [
                            247u8, 169u8, 181u8, 168u8, 250u8, 79u8, 180u8, 219u8, 218u8, 20u8,
                            181u8, 82u8, 206u8, 35u8, 25u8, 252u8, 30u8, 193u8, 94u8, 17u8, 186u8,
                            109u8, 145u8, 211u8, 140u8, 132u8, 85u8, 206u8, 56u8, 176u8, 56u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update_mint_settings`]."]
                pub fn update_mint_settings(
                    &self,
                    collection: ::core::primitive::u32,
                    mint_settings: runtime_types::pallet_nfts::types::MintSettings<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::UpdateMintSettings> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "update_mint_settings",
                        types::UpdateMintSettings {
                            collection,
                            mint_settings,
                        },
                        [
                            243u8, 217u8, 117u8, 210u8, 224u8, 69u8, 203u8, 21u8, 231u8, 1u8, 13u8,
                            107u8, 239u8, 252u8, 45u8, 168u8, 23u8, 134u8, 147u8, 110u8, 135u8,
                            88u8, 235u8, 184u8, 113u8, 207u8, 115u8, 74u8, 179u8, 181u8, 66u8,
                            184u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_price`]."]
                pub fn set_price(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    price: ::core::option::Option<::core::primitive::u128>,
                    whitelisted_buyer: ::core::option::Option<
                        ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::SetPrice> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_price",
                        types::SetPrice {
                            collection,
                            item,
                            price,
                            whitelisted_buyer,
                        },
                        [
                            67u8, 175u8, 4u8, 158u8, 252u8, 157u8, 133u8, 34u8, 63u8, 150u8, 102u8,
                            136u8, 111u8, 61u8, 214u8, 1u8, 5u8, 51u8, 35u8, 250u8, 244u8, 117u8,
                            136u8, 142u8, 203u8, 201u8, 120u8, 96u8, 77u8, 213u8, 115u8, 58u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::buy_item`]."]
                pub fn buy_item(
                    &self,
                    collection: ::core::primitive::u32,
                    item: ::core::primitive::u32,
                    bid_price: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::BuyItem> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "buy_item",
                        types::BuyItem {
                            collection,
                            item,
                            bid_price,
                        },
                        [
                            100u8, 147u8, 247u8, 54u8, 153u8, 78u8, 111u8, 183u8, 134u8, 133u8,
                            252u8, 58u8, 159u8, 224u8, 120u8, 7u8, 77u8, 32u8, 175u8, 37u8, 243u8,
                            164u8, 101u8, 199u8, 79u8, 169u8, 131u8, 176u8, 150u8, 111u8, 53u8,
                            233u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::pay_tips`]."]
                pub fn pay_tips(
                    &self,
                    tips: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_nfts::types::ItemTip<
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u128,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::PayTips> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "pay_tips",
                        types::PayTips { tips },
                        [
                            155u8, 176u8, 95u8, 137u8, 65u8, 93u8, 225u8, 9u8, 210u8, 3u8, 197u8,
                            37u8, 84u8, 214u8, 7u8, 74u8, 62u8, 213u8, 248u8, 116u8, 221u8, 11u8,
                            166u8, 148u8, 96u8, 25u8, 240u8, 126u8, 126u8, 117u8, 252u8, 249u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::create_swap`]."]
                pub fn create_swap(
                    &self,
                    offered_collection: ::core::primitive::u32,
                    offered_item: ::core::primitive::u32,
                    desired_collection: ::core::primitive::u32,
                    maybe_desired_item: ::core::option::Option<::core::primitive::u32>,
                    maybe_price: ::core::option::Option<
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                    >,
                    duration: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CreateSwap> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "create_swap",
                        types::CreateSwap {
                            offered_collection,
                            offered_item,
                            desired_collection,
                            maybe_desired_item,
                            maybe_price,
                            duration,
                        },
                        [
                            73u8, 94u8, 188u8, 120u8, 243u8, 173u8, 22u8, 174u8, 158u8, 183u8,
                            84u8, 188u8, 36u8, 172u8, 204u8, 189u8, 249u8, 10u8, 121u8, 231u8,
                            186u8, 29u8, 32u8, 120u8, 198u8, 143u8, 179u8, 137u8, 177u8, 128u8,
                            78u8, 89u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel_swap`]."]
                pub fn cancel_swap(
                    &self,
                    offered_collection: ::core::primitive::u32,
                    offered_item: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CancelSwap> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "cancel_swap",
                        types::CancelSwap {
                            offered_collection,
                            offered_item,
                        },
                        [
                            167u8, 116u8, 118u8, 76u8, 136u8, 245u8, 184u8, 196u8, 217u8, 84u8,
                            210u8, 138u8, 191u8, 228u8, 126u8, 194u8, 141u8, 106u8, 193u8, 167u8,
                            216u8, 43u8, 101u8, 78u8, 63u8, 128u8, 238u8, 235u8, 35u8, 121u8,
                            155u8, 204u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_swap`]."]
                pub fn claim_swap(
                    &self,
                    send_collection: ::core::primitive::u32,
                    send_item: ::core::primitive::u32,
                    receive_collection: ::core::primitive::u32,
                    receive_item: ::core::primitive::u32,
                    witness_price: ::core::option::Option<
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::ClaimSwap> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "claim_swap",
                        types::ClaimSwap {
                            send_collection,
                            send_item,
                            receive_collection,
                            receive_item,
                            witness_price,
                        },
                        [
                            167u8, 41u8, 211u8, 5u8, 39u8, 54u8, 122u8, 75u8, 40u8, 39u8, 236u8,
                            116u8, 222u8, 19u8, 238u8, 242u8, 81u8, 136u8, 70u8, 82u8, 173u8,
                            244u8, 163u8, 120u8, 51u8, 113u8, 132u8, 30u8, 84u8, 182u8, 32u8,
                            155u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::mint_pre_signed`]."]
                pub fn mint_pre_signed(
                    &self,
                    mint_data: runtime_types::pallet_nfts::types::PreSignedMint<
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    signature: runtime_types::sp_runtime::MultiSignature,
                    signer: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::MintPreSigned> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "mint_pre_signed",
                        types::MintPreSigned {
                            mint_data: ::std::boxed::Box::new(mint_data),
                            signature,
                            signer,
                        },
                        [
                            4u8, 151u8, 11u8, 183u8, 90u8, 63u8, 100u8, 116u8, 58u8, 163u8, 100u8,
                            174u8, 218u8, 181u8, 125u8, 164u8, 112u8, 139u8, 113u8, 187u8, 239u8,
                            18u8, 48u8, 55u8, 63u8, 32u8, 152u8, 147u8, 218u8, 237u8, 100u8, 186u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_attributes_pre_signed`]."]
                pub fn set_attributes_pre_signed(
                    &self,
                    data: runtime_types::pallet_nfts::types::PreSignedAttributes<
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    signature: runtime_types::sp_runtime::MultiSignature,
                    signer: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::SetAttributesPreSigned> {
                    ::subxt::tx::Payload::new_static(
                        "Nfts",
                        "set_attributes_pre_signed",
                        types::SetAttributesPreSigned {
                            data,
                            signature,
                            signer,
                        },
                        [
                            119u8, 175u8, 160u8, 191u8, 52u8, 11u8, 115u8, 224u8, 20u8, 97u8,
                            190u8, 102u8, 19u8, 203u8, 148u8, 205u8, 179u8, 94u8, 24u8, 127u8,
                            102u8, 84u8, 111u8, 239u8, 254u8, 36u8, 24u8, 51u8, 237u8, 112u8, 65u8,
                            149u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_nfts::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` was created."]
            pub struct Created {
                pub collection: ::core::primitive::u32,
                pub creator: ::subxt::utils::AccountId32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` was force-created."]
            pub struct ForceCreated {
                pub collection: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ForceCreated {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` was destroyed."]
            pub struct Destroyed {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` was issued."]
            pub struct Issued {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Issued {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` was transferred."]
            pub struct Transferred {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Transferred {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` was destroyed."]
            pub struct Burned {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Burned {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Burned";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` became non-transferable."]
            pub struct ItemTransferLocked {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ItemTransferLocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemTransferLocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` became transferable."]
            pub struct ItemTransferUnlocked {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ItemTransferUnlocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemTransferUnlocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "`item` metadata or attributes were locked."]
            pub struct ItemPropertiesLocked {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub lock_metadata: ::core::primitive::bool,
                pub lock_attributes: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for ItemPropertiesLocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemPropertiesLocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some `collection` was locked."]
            pub struct CollectionLocked {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionLocked {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionLocked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub collection: ::core::primitive::u32,
                pub new_owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for OwnerChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub collection: ::core::primitive::u32,
                pub issuer: ::core::option::Option<::subxt::utils::AccountId32>,
                pub admin: ::core::option::Option<::subxt::utils::AccountId32>,
                pub freezer: ::core::option::Option<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for TeamChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` of a `collection` has been approved by the `owner` for transfer by"]
            #[doc = "a `delegate`."]
            pub struct TransferApproved {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
                pub deadline: ::core::option::Option<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for TransferApproved {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "TransferApproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An approval for a `delegate` account to transfer the `item` of an item"]
            #[doc = "`collection` was cancelled by its `owner`."]
            pub struct ApprovalCancelled {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
                pub delegate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ApprovalCancelled {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "All approvals of an item got cancelled."]
            pub struct AllApprovalsCancelled {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub owner: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for AllApprovalsCancelled {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "AllApprovalsCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A `collection` has had its config changed by the `Force` origin."]
            pub struct CollectionConfigChanged {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionConfigChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionConfigChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for a `collection`."]
            pub struct CollectionMetadataSet {
                pub collection: ::core::primitive::u32,
                pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            impl ::subxt::events::StaticEvent for CollectionMetadataSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for a `collection`."]
            pub struct CollectionMetadataCleared {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionMetadataCleared {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New metadata has been set for an item."]
            pub struct ItemMetadataSet {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            impl ::subxt::events::StaticEvent for ItemMetadataSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemMetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata has been cleared for an item."]
            pub struct ItemMetadataCleared {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ItemMetadataCleared {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemMetadataCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The deposit for a set of `item`s within a `collection` has been updated."]
            pub struct Redeposited {
                pub collection: ::core::primitive::u32,
                pub successful_items: ::std::vec::Vec<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for Redeposited {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "Redeposited";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New attribute metadata has been set for a `collection` or `item`."]
            pub struct AttributeSet {
                pub collection: ::core::primitive::u32,
                pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                    ::subxt::utils::AccountId32,
                >,
            }
            impl ::subxt::events::StaticEvent for AttributeSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "AttributeSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Attribute metadata has been cleared for a `collection` or `item`."]
            pub struct AttributeCleared {
                pub collection: ::core::primitive::u32,
                pub maybe_item: ::core::option::Option<::core::primitive::u32>,
                pub key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                    ::subxt::utils::AccountId32,
                >,
            }
            impl ::subxt::events::StaticEvent for AttributeCleared {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "AttributeCleared";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new approval to modify item attributes was added."]
            pub struct ItemAttributesApprovalAdded {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub delegate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ItemAttributesApprovalAdded {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemAttributesApprovalAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new approval to modify item attributes was removed."]
            pub struct ItemAttributesApprovalRemoved {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub delegate: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ItemAttributesApprovalRemoved {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemAttributesApprovalRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Ownership acceptance has changed for an account."]
            pub struct OwnershipAcceptanceChanged {
                pub who: ::subxt::utils::AccountId32,
                pub maybe_collection: ::core::option::Option<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for OwnershipAcceptanceChanged {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "OwnershipAcceptanceChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Max supply has been set for a collection."]
            pub struct CollectionMaxSupplySet {
                pub collection: ::core::primitive::u32,
                pub max_supply: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionMaxSupplySet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMaxSupplySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Mint settings for a collection had changed."]
            pub struct CollectionMintSettingsUpdated {
                pub collection: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CollectionMintSettingsUpdated {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "CollectionMintSettingsUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Event gets emitted when the `NextCollectionId` gets incremented."]
            pub struct NextCollectionIdIncremented {
                pub next_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for NextCollectionIdIncremented {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "NextCollectionIdIncremented";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The price was set for the item."]
            pub struct ItemPriceSet {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub price: ::core::primitive::u128,
                pub whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for ItemPriceSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemPriceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The price for the item was removed."]
            pub struct ItemPriceRemoved {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ItemPriceRemoved {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemPriceRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An item was bought."]
            pub struct ItemBought {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub price: ::core::primitive::u128,
                pub seller: ::subxt::utils::AccountId32,
                pub buyer: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for ItemBought {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "ItemBought";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A tip was sent."]
            pub struct TipSent {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub sender: ::subxt::utils::AccountId32,
                pub receiver: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for TipSent {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "TipSent";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An `item` swap intent was created."]
            pub struct SwapCreated {
                pub offered_collection: ::core::primitive::u32,
                pub offered_item: ::core::primitive::u32,
                pub desired_collection: ::core::primitive::u32,
                pub desired_item: ::core::option::Option<::core::primitive::u32>,
                pub price: ::core::option::Option<
                    runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
                >,
                pub deadline: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for SwapCreated {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "SwapCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The swap was cancelled."]
            pub struct SwapCancelled {
                pub offered_collection: ::core::primitive::u32,
                pub offered_item: ::core::primitive::u32,
                pub desired_collection: ::core::primitive::u32,
                pub desired_item: ::core::option::Option<::core::primitive::u32>,
                pub price: ::core::option::Option<
                    runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
                >,
                pub deadline: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for SwapCancelled {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "SwapCancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The swap has been claimed."]
            pub struct SwapClaimed {
                pub sent_collection: ::core::primitive::u32,
                pub sent_item: ::core::primitive::u32,
                pub sent_item_owner: ::subxt::utils::AccountId32,
                pub received_collection: ::core::primitive::u32,
                pub received_item: ::core::primitive::u32,
                pub received_item_owner: ::subxt::utils::AccountId32,
                pub price: ::core::option::Option<
                    runtime_types::pallet_nfts::types::PriceWithDirection<::core::primitive::u128>,
                >,
                pub deadline: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for SwapClaimed {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "SwapClaimed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New attributes have been set for an `item` of the `collection`."]
            pub struct PreSignedAttributesSet {
                pub collection: ::core::primitive::u32,
                pub item: ::core::primitive::u32,
                pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                    ::subxt::utils::AccountId32,
                >,
            }
            impl ::subxt::events::StaticEvent for PreSignedAttributesSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "PreSignedAttributesSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`"]
            #[doc = "within that `collection`."]
            pub struct PalletAttributeSet {
                pub collection: ::core::primitive::u32,
                pub item: ::core::option::Option<::core::primitive::u32>,
                pub attribute:
                    runtime_types::pallet_nfts::types::PalletAttributes<::core::primitive::u32>,
                pub value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            impl ::subxt::events::StaticEvent for PalletAttributeSet {
                const PALLET: &'static str = "Nfts";
                const EVENT: &'static str = "PalletAttributeSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Details of a collection."]
                pub fn collection(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::CollectionDetails<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Collection",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            37u8, 138u8, 13u8, 3u8, 51u8, 13u8, 66u8, 20u8, 93u8, 144u8, 65u8,
                            180u8, 130u8, 228u8, 68u8, 190u8, 58u8, 115u8, 82u8, 167u8, 246u8,
                            77u8, 37u8, 178u8, 63u8, 39u8, 133u8, 32u8, 195u8, 187u8, 222u8, 237u8,
                        ],
                    )
                }
                #[doc = " Details of a collection."]
                pub fn collection_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::CollectionDetails<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Collection",
                        Vec::new(),
                        [
                            37u8, 138u8, 13u8, 3u8, 51u8, 13u8, 66u8, 20u8, 93u8, 144u8, 65u8,
                            180u8, 130u8, 228u8, 68u8, 190u8, 58u8, 115u8, 82u8, 167u8, 246u8,
                            77u8, 37u8, 178u8, 63u8, 39u8, 133u8, 32u8, 195u8, 187u8, 222u8, 237u8,
                        ],
                    )
                }
                #[doc = " The collection, if any, of which an account is willing to take ownership."]
                pub fn ownership_acceptance(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "OwnershipAcceptance",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            237u8, 207u8, 154u8, 240u8, 36u8, 85u8, 41u8, 121u8, 183u8, 128u8,
                            70u8, 97u8, 243u8, 44u8, 218u8, 70u8, 18u8, 112u8, 228u8, 231u8, 163u8,
                            191u8, 100u8, 141u8, 82u8, 151u8, 19u8, 249u8, 121u8, 166u8, 73u8,
                            88u8,
                        ],
                    )
                }
                #[doc = " The collection, if any, of which an account is willing to take ownership."]
                pub fn ownership_acceptance_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "OwnershipAcceptance",
                        Vec::new(),
                        [
                            237u8, 207u8, 154u8, 240u8, 36u8, 85u8, 41u8, 121u8, 183u8, 128u8,
                            70u8, 97u8, 243u8, 44u8, 218u8, 70u8, 18u8, 112u8, 228u8, 231u8, 163u8,
                            191u8, 100u8, 141u8, 82u8, 151u8, 19u8, 249u8, 121u8, 166u8, 73u8,
                            88u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _2: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Account",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                        ],
                        [
                            46u8, 94u8, 162u8, 243u8, 112u8, 147u8, 99u8, 143u8, 38u8, 169u8,
                            173u8, 163u8, 185u8, 47u8, 238u8, 231u8, 0u8, 199u8, 101u8, 107u8,
                            196u8, 28u8, 141u8, 194u8, 187u8, 90u8, 204u8, 254u8, 145u8, 16u8,
                            116u8, 156u8,
                        ],
                    )
                }
                #[doc = " The items held by any given account; set out this way so that items owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Account",
                        Vec::new(),
                        [
                            46u8, 94u8, 162u8, 243u8, 112u8, 147u8, 99u8, 143u8, 38u8, 169u8,
                            173u8, 163u8, 185u8, 47u8, 238u8, 231u8, 0u8, 199u8, 101u8, 107u8,
                            196u8, 28u8, 141u8, 194u8, 187u8, 90u8, 204u8, 254u8, 145u8, 16u8,
                            116u8, 156u8,
                        ],
                    )
                }
                #[doc = " The collections owned by any given account; set out this way so that collections owned by"]
                #[doc = " a single account can be enumerated."]
                pub fn collection_account(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionAccount",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            166u8, 11u8, 16u8, 99u8, 38u8, 50u8, 172u8, 44u8, 155u8, 246u8, 179u8,
                            110u8, 140u8, 107u8, 126u8, 44u8, 70u8, 92u8, 44u8, 144u8, 65u8, 82u8,
                            147u8, 141u8, 222u8, 57u8, 214u8, 29u8, 37u8, 251u8, 184u8, 201u8,
                        ],
                    )
                }
                #[doc = " The collections owned by any given account; set out this way so that collections owned by"]
                #[doc = " a single account can be enumerated."]
                pub fn collection_account_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionAccount",
                        Vec::new(),
                        [
                            166u8, 11u8, 16u8, 99u8, 38u8, 50u8, 172u8, 44u8, 155u8, 246u8, 179u8,
                            110u8, 140u8, 107u8, 126u8, 44u8, 70u8, 92u8, 44u8, 144u8, 65u8, 82u8,
                            147u8, 141u8, 222u8, 57u8, 214u8, 29u8, 37u8, 251u8, 184u8, 201u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                #[doc = " Stores collection roles as per account."]
                pub fn collection_role_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::CollectionRole,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionRoleOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            196u8, 138u8, 237u8, 38u8, 69u8, 18u8, 121u8, 43u8, 125u8, 157u8,
                            229u8, 190u8, 234u8, 147u8, 45u8, 160u8, 8u8, 139u8, 206u8, 15u8, 81u8,
                            241u8, 84u8, 134u8, 133u8, 105u8, 223u8, 214u8, 85u8, 143u8, 83u8,
                            180u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                #[doc = " Stores collection roles as per account."]
                pub fn collection_role_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::CollectionRole,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionRoleOf",
                        Vec::new(),
                        [
                            196u8, 138u8, 237u8, 38u8, 69u8, 18u8, 121u8, 43u8, 125u8, 157u8,
                            229u8, 190u8, 234u8, 147u8, 45u8, 160u8, 8u8, 139u8, 206u8, 15u8, 81u8,
                            241u8, 84u8, 134u8, 133u8, 105u8, 223u8, 214u8, 85u8, 143u8, 83u8,
                            180u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                pub fn item(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::ItemDetails<
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_nfts::types::ItemDeposit<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                        runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                            ::subxt::utils::AccountId32,
                            ::core::option::Option<::core::primitive::u32>,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Item",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            220u8, 18u8, 121u8, 181u8, 152u8, 14u8, 55u8, 169u8, 10u8, 214u8, 27u8,
                            65u8, 81u8, 148u8, 37u8, 20u8, 232u8, 194u8, 99u8, 220u8, 128u8, 15u8,
                            105u8, 121u8, 82u8, 227u8, 21u8, 166u8, 169u8, 53u8, 149u8, 142u8,
                        ],
                    )
                }
                #[doc = " The items in existence and their ownership details."]
                pub fn item_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::ItemDetails<
                        ::subxt::utils::AccountId32,
                        runtime_types::pallet_nfts::types::ItemDeposit<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                        runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                            ::subxt::utils::AccountId32,
                            ::core::option::Option<::core::primitive::u32>,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Item",
                        Vec::new(),
                        [
                            220u8, 18u8, 121u8, 181u8, 152u8, 14u8, 55u8, 169u8, 10u8, 214u8, 27u8,
                            65u8, 81u8, 148u8, 37u8, 20u8, 232u8, 194u8, 99u8, 220u8, 128u8, 15u8,
                            105u8, 121u8, 82u8, 227u8, 21u8, 166u8, 169u8, 53u8, 149u8, 142u8,
                        ],
                    )
                }
                #[doc = " Metadata of a collection."]
                pub fn collection_metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::CollectionMetadata<::core::primitive::u128>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionMetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            149u8, 145u8, 6u8, 30u8, 59u8, 142u8, 234u8, 85u8, 15u8, 182u8, 235u8,
                            250u8, 113u8, 115u8, 210u8, 159u8, 27u8, 118u8, 156u8, 82u8, 33u8,
                            72u8, 42u8, 207u8, 155u8, 55u8, 150u8, 110u8, 80u8, 62u8, 172u8, 136u8,
                        ],
                    )
                }
                #[doc = " Metadata of a collection."]
                pub fn collection_metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::CollectionMetadata<::core::primitive::u128>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionMetadataOf",
                        Vec::new(),
                        [
                            149u8, 145u8, 6u8, 30u8, 59u8, 142u8, 234u8, 85u8, 15u8, 182u8, 235u8,
                            250u8, 113u8, 115u8, 210u8, 159u8, 27u8, 118u8, 156u8, 82u8, 33u8,
                            72u8, 42u8, 207u8, 155u8, 55u8, 150u8, 110u8, 80u8, 62u8, 172u8, 136u8,
                        ],
                    )
                }
                #[doc = " Metadata of an item."]
                pub fn item_metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::ItemMetadata<
                        runtime_types::pallet_nfts::types::ItemMetadataDeposit<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemMetadataOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            200u8, 116u8, 127u8, 128u8, 135u8, 211u8, 219u8, 131u8, 163u8, 54u8,
                            65u8, 113u8, 75u8, 49u8, 183u8, 88u8, 30u8, 53u8, 3u8, 154u8, 111u8,
                            187u8, 230u8, 150u8, 100u8, 237u8, 123u8, 214u8, 207u8, 150u8, 70u8,
                            49u8,
                        ],
                    )
                }
                #[doc = " Metadata of an item."]
                pub fn item_metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::ItemMetadata<
                        runtime_types::pallet_nfts::types::ItemMetadataDeposit<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemMetadataOf",
                        Vec::new(),
                        [
                            200u8, 116u8, 127u8, 128u8, 135u8, 211u8, 219u8, 131u8, 163u8, 54u8,
                            65u8, 113u8, 75u8, 49u8, 183u8, 88u8, 30u8, 53u8, 3u8, 154u8, 111u8,
                            187u8, 230u8, 150u8, 100u8, 237u8, 123u8, 214u8, 207u8, 150u8, 70u8,
                            49u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::option::Option<::core::primitive::u32>>,
                    _2: impl ::std::borrow::Borrow<
                        runtime_types::pallet_nfts::types::AttributeNamespace<
                            ::subxt::utils::AccountId32,
                        >,
                    >,
                    _3: impl ::std::borrow::Borrow<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        runtime_types::pallet_nfts::types::AttributeDeposit<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Attribute",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_2.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_3.borrow()),
                        ],
                        [
                            167u8, 203u8, 123u8, 190u8, 215u8, 64u8, 227u8, 97u8, 134u8, 141u8,
                            217u8, 46u8, 241u8, 206u8, 84u8, 19u8, 46u8, 92u8, 152u8, 218u8, 159u8,
                            33u8, 109u8, 2u8, 172u8, 187u8, 216u8, 177u8, 80u8, 53u8, 156u8, 17u8,
                        ],
                    )
                }
                #[doc = " Attributes of a collection."]
                pub fn attribute_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        runtime_types::pallet_nfts::types::AttributeDeposit<
                            ::core::primitive::u128,
                            ::subxt::utils::AccountId32,
                        >,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "Attribute",
                        Vec::new(),
                        [
                            167u8, 203u8, 123u8, 190u8, 215u8, 64u8, 227u8, 97u8, 134u8, 141u8,
                            217u8, 46u8, 241u8, 206u8, 84u8, 19u8, 46u8, 92u8, 152u8, 218u8, 159u8,
                            33u8, 109u8, 2u8, 172u8, 187u8, 216u8, 177u8, 80u8, 53u8, 156u8, 17u8,
                        ],
                    )
                }
                #[doc = " A price of an item."]
                pub fn item_price_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        ::core::option::Option<::subxt::utils::AccountId32>,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemPriceOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            67u8, 110u8, 7u8, 232u8, 91u8, 102u8, 179u8, 141u8, 97u8, 69u8, 33u8,
                            108u8, 3u8, 72u8, 184u8, 210u8, 152u8, 207u8, 187u8, 154u8, 105u8,
                            35u8, 205u8, 230u8, 76u8, 114u8, 84u8, 18u8, 154u8, 131u8, 75u8, 74u8,
                        ],
                    )
                }
                #[doc = " A price of an item."]
                pub fn item_price_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        ::core::primitive::u128,
                        ::core::option::Option<::subxt::utils::AccountId32>,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemPriceOf",
                        Vec::new(),
                        [
                            67u8, 110u8, 7u8, 232u8, 91u8, 102u8, 179u8, 141u8, 97u8, 69u8, 33u8,
                            108u8, 3u8, 72u8, 184u8, 210u8, 152u8, 207u8, 187u8, 154u8, 105u8,
                            35u8, 205u8, 230u8, 76u8, 114u8, 84u8, 18u8, 154u8, 131u8, 75u8, 74u8,
                        ],
                    )
                }
                #[doc = " Item attribute approvals."]
                pub fn item_attributes_approvals_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemAttributesApprovalsOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            119u8, 235u8, 198u8, 111u8, 97u8, 37u8, 52u8, 172u8, 61u8, 202u8,
                            180u8, 134u8, 139u8, 101u8, 145u8, 112u8, 115u8, 172u8, 3u8, 92u8,
                            246u8, 14u8, 143u8, 223u8, 200u8, 235u8, 209u8, 191u8, 246u8, 147u8,
                            183u8, 200u8,
                        ],
                    )
                }
                #[doc = " Item attribute approvals."]
                pub fn item_attributes_approvals_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
                        ::subxt::utils::AccountId32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemAttributesApprovalsOf",
                        Vec::new(),
                        [
                            119u8, 235u8, 198u8, 111u8, 97u8, 37u8, 52u8, 172u8, 61u8, 202u8,
                            180u8, 134u8, 139u8, 101u8, 145u8, 112u8, 115u8, 172u8, 3u8, 92u8,
                            246u8, 14u8, 143u8, 223u8, 200u8, 235u8, 209u8, 191u8, 246u8, 147u8,
                            183u8, 200u8,
                        ],
                    )
                }
                #[doc = " Stores the `CollectionId` that is going to be used for the next collection."]
                #[doc = " This gets incremented whenever a new collection is created."]
                pub fn next_collection_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "NextCollectionId",
                        vec![],
                        [
                            250u8, 253u8, 234u8, 130u8, 48u8, 23u8, 131u8, 7u8, 56u8, 242u8, 100u8,
                            158u8, 238u8, 130u8, 164u8, 55u8, 231u8, 114u8, 227u8, 168u8, 8u8,
                            166u8, 157u8, 216u8, 245u8, 132u8, 225u8, 60u8, 205u8, 2u8, 60u8,
                            243u8,
                        ],
                    )
                }
                #[doc = " Handles all the pending swaps."]
                pub fn pending_swap_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::PendingSwap<
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "PendingSwapOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            176u8, 135u8, 241u8, 46u8, 12u8, 178u8, 94u8, 204u8, 21u8, 56u8, 112u8,
                            152u8, 238u8, 220u8, 244u8, 248u8, 197u8, 27u8, 81u8, 161u8, 104u8,
                            146u8, 161u8, 173u8, 216u8, 207u8, 69u8, 207u8, 187u8, 147u8, 189u8,
                            193u8,
                        ],
                    )
                }
                #[doc = " Handles all the pending swaps."]
                pub fn pending_swap_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::PendingSwap<
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        runtime_types::pallet_nfts::types::PriceWithDirection<
                            ::core::primitive::u128,
                        >,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "PendingSwapOf",
                        Vec::new(),
                        [
                            176u8, 135u8, 241u8, 46u8, 12u8, 178u8, 94u8, 204u8, 21u8, 56u8, 112u8,
                            152u8, 238u8, 220u8, 244u8, 248u8, 197u8, 27u8, 81u8, 161u8, 104u8,
                            146u8, 161u8, 173u8, 216u8, 207u8, 69u8, 207u8, 187u8, 147u8, 189u8,
                            193u8,
                        ],
                    )
                }
                #[doc = " Config of a collection."]
                pub fn collection_config_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionConfigOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            62u8, 143u8, 229u8, 254u8, 221u8, 236u8, 200u8, 154u8, 45u8, 54u8,
                            122u8, 65u8, 9u8, 188u8, 58u8, 214u8, 200u8, 81u8, 162u8, 141u8, 23u8,
                            211u8, 60u8, 252u8, 84u8, 28u8, 39u8, 131u8, 1u8, 202u8, 161u8, 43u8,
                        ],
                    )
                }
                #[doc = " Config of a collection."]
                pub fn collection_config_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::CollectionConfig<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "CollectionConfigOf",
                        Vec::new(),
                        [
                            62u8, 143u8, 229u8, 254u8, 221u8, 236u8, 200u8, 154u8, 45u8, 54u8,
                            122u8, 65u8, 9u8, 188u8, 58u8, 214u8, 200u8, 81u8, 162u8, 141u8, 23u8,
                            211u8, 60u8, 252u8, 84u8, 28u8, 39u8, 131u8, 1u8, 202u8, 161u8, 43u8,
                        ],
                    )
                }
                #[doc = " Config of an item."]
                pub fn item_config_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::ItemConfig,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemConfigOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            107u8, 72u8, 250u8, 9u8, 129u8, 84u8, 46u8, 156u8, 137u8, 209u8, 77u8,
                            22u8, 141u8, 139u8, 225u8, 88u8, 146u8, 163u8, 17u8, 18u8, 196u8,
                            119u8, 228u8, 64u8, 254u8, 246u8, 118u8, 11u8, 125u8, 86u8, 227u8,
                            201u8,
                        ],
                    )
                }
                #[doc = " Config of an item."]
                pub fn item_config_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nfts::types::ItemConfig,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Nfts",
                        "ItemConfigOf",
                        Vec::new(),
                        [
                            107u8, 72u8, 250u8, 9u8, 129u8, 84u8, 46u8, 156u8, 137u8, 209u8, 77u8,
                            22u8, 141u8, 139u8, 225u8, 88u8, 146u8, 163u8, 17u8, 18u8, 196u8,
                            119u8, 228u8, 64u8, 254u8, 246u8, 118u8, 11u8, 125u8, 86u8, 227u8,
                            201u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The basic amount of funds that must be reserved for collection."]
                pub fn collection_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "CollectionDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved for an item."]
                pub fn item_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "ItemDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your item."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "MetadataDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The basic amount of funds that must be reserved when adding an attribute to an item."]
                pub fn attribute_deposit_base(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "AttributeDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The additional funds that must be reserved for the number of bytes store in metadata,"]
                #[doc = " either \"normal\" metadata or attribute metadata."]
                pub fn deposit_per_byte(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "DepositPerByte",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum length of data stored on-chain."]
                pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of an attribute key."]
                pub fn key_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "KeyLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of an attribute value."]
                pub fn value_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "ValueLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum approvals an item could have."]
                pub fn approvals_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "ApprovalsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum attributes approvals an item could have."]
                pub fn item_attributes_approvals_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "ItemAttributesApprovalsLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The max number of tips a user could send."]
                pub fn max_tips(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "MaxTips",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The max duration in blocks for deadlines."]
                pub fn max_deadline_duration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "MaxDeadlineDuration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The max number of attributes a user could set per call."]
                pub fn max_attributes_per_call(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "MaxAttributesPerCall",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Disables some of pallet's features."]
                pub fn features(
                    &self,
                ) -> ::subxt::constants::Address<
                    runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::PalletFeature,
                    >,
                > {
                    ::subxt::constants::Address::new_static(
                        "Nfts",
                        "Features",
                        [
                            184u8, 78u8, 161u8, 6u8, 214u8, 205u8, 82u8, 205u8, 126u8, 46u8, 7u8,
                            198u8, 186u8, 10u8, 66u8, 116u8, 191u8, 223u8, 17u8, 246u8, 196u8,
                            190u8, 222u8, 226u8, 62u8, 35u8, 191u8, 127u8, 60u8, 171u8, 85u8,
                            201u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nft_fractionalization {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_nft_fractionalization::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_nft_fractionalization::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Fractionalize {
                    pub nft_collection_id: ::core::primitive::u32,
                    pub nft_id: ::core::primitive::u32,
                    pub asset_id: ::core::primitive::u32,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub fractions: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Fractionalize {
                    const PALLET: &'static str = "NftFractionalization";
                    const CALL: &'static str = "fractionalize";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unify {
                    pub nft_collection_id: ::core::primitive::u32,
                    pub nft_id: ::core::primitive::u32,
                    pub asset_id: ::core::primitive::u32,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Unify {
                    const PALLET: &'static str = "NftFractionalization";
                    const CALL: &'static str = "unify";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::fractionalize`]."]
                pub fn fractionalize(
                    &self,
                    nft_collection_id: ::core::primitive::u32,
                    nft_id: ::core::primitive::u32,
                    asset_id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    fractions: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Fractionalize> {
                    ::subxt::tx::Payload::new_static(
                        "NftFractionalization",
                        "fractionalize",
                        types::Fractionalize {
                            nft_collection_id,
                            nft_id,
                            asset_id,
                            beneficiary,
                            fractions,
                        },
                        [
                            253u8, 125u8, 124u8, 28u8, 90u8, 176u8, 15u8, 204u8, 129u8, 93u8,
                            115u8, 159u8, 16u8, 211u8, 76u8, 26u8, 232u8, 67u8, 180u8, 145u8,
                            177u8, 155u8, 118u8, 1u8, 117u8, 161u8, 195u8, 72u8, 222u8, 224u8,
                            250u8, 4u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unify`]."]
                pub fn unify(
                    &self,
                    nft_collection_id: ::core::primitive::u32,
                    nft_id: ::core::primitive::u32,
                    asset_id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Unify> {
                    ::subxt::tx::Payload::new_static(
                        "NftFractionalization",
                        "unify",
                        types::Unify {
                            nft_collection_id,
                            nft_id,
                            asset_id,
                            beneficiary,
                        },
                        [
                            99u8, 117u8, 0u8, 60u8, 114u8, 18u8, 102u8, 132u8, 190u8, 91u8, 226u8,
                            3u8, 107u8, 7u8, 159u8, 41u8, 253u8, 132u8, 15u8, 243u8, 173u8, 250u8,
                            174u8, 101u8, 42u8, 35u8, 58u8, 214u8, 114u8, 48u8, 119u8, 189u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_nft_fractionalization::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An NFT was successfully fractionalized."]
            pub struct NftFractionalized {
                pub nft_collection: ::core::primitive::u32,
                pub nft: ::core::primitive::u32,
                pub fractions: ::core::primitive::u128,
                pub asset: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for NftFractionalized {
                const PALLET: &'static str = "NftFractionalization";
                const EVENT: &'static str = "NftFractionalized";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An NFT was successfully returned back."]
            pub struct NftUnified {
                pub nft_collection: ::core::primitive::u32,
                pub nft: ::core::primitive::u32,
                pub asset: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for NftUnified {
                const PALLET: &'static str = "NftFractionalization";
                const EVENT: &'static str = "NftUnified";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Keeps track of the corresponding NFT ID, asset ID and amount minted."]
                pub fn nft_to_asset(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nft_fractionalization::types::Details<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NftFractionalization",
                        "NftToAsset",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            133u8, 194u8, 161u8, 186u8, 76u8, 241u8, 62u8, 131u8, 203u8, 154u8,
                            34u8, 218u8, 74u8, 220u8, 60u8, 75u8, 34u8, 5u8, 14u8, 107u8, 6u8,
                            170u8, 240u8, 155u8, 208u8, 155u8, 160u8, 51u8, 138u8, 45u8, 236u8,
                            130u8,
                        ],
                    )
                }
                #[doc = " Keeps track of the corresponding NFT ID, asset ID and amount minted."]
                pub fn nft_to_asset_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nft_fractionalization::types::Details<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NftFractionalization",
                        "NftToAsset",
                        Vec::new(),
                        [
                            133u8, 194u8, 161u8, 186u8, 76u8, 241u8, 62u8, 131u8, 203u8, 154u8,
                            34u8, 218u8, 74u8, 220u8, 60u8, 75u8, 34u8, 5u8, 14u8, 107u8, 6u8,
                            170u8, 240u8, 155u8, 208u8, 155u8, 160u8, 51u8, 138u8, 45u8, 236u8,
                            130u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The deposit paid by the user locking an NFT. The deposit is returned to the original NFT"]
                #[doc = " owner when the asset is unified and the NFT is unlocked."]
                pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "NftFractionalization",
                        "Deposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The pallet's id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "NftFractionalization",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The newly created asset's symbol."]
                pub fn new_asset_symbol(
                    &self,
                ) -> ::subxt::constants::Address<
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                > {
                    ::subxt::constants::Address::new_static(
                        "NftFractionalization",
                        "NewAssetSymbol",
                        [
                            111u8, 193u8, 190u8, 101u8, 134u8, 90u8, 189u8, 162u8, 149u8, 131u8,
                            26u8, 156u8, 242u8, 7u8, 95u8, 140u8, 189u8, 46u8, 231u8, 178u8, 140u8,
                            33u8, 222u8, 55u8, 229u8, 12u8, 32u8, 142u8, 69u8, 195u8, 205u8, 193u8,
                        ],
                    )
                }
                #[doc = " The newly created asset's name."]
                pub fn new_asset_name(
                    &self,
                ) -> ::subxt::constants::Address<
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                > {
                    ::subxt::constants::Address::new_static(
                        "NftFractionalization",
                        "NewAssetName",
                        [
                            111u8, 193u8, 190u8, 101u8, 134u8, 90u8, 189u8, 162u8, 149u8, 131u8,
                            26u8, 156u8, 242u8, 7u8, 95u8, 140u8, 189u8, 46u8, 231u8, 178u8, 140u8,
                            33u8, 222u8, 55u8, 229u8, 12u8, 32u8, 142u8, 69u8, 195u8, 205u8, 193u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a name or symbol stored on-chain."]
                pub fn string_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "NftFractionalization",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod salary {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_salary::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_salary::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Init;
                impl ::subxt::blocks::StaticExtrinsic for Init {
                    const PALLET: &'static str = "Salary";
                    const CALL: &'static str = "init";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bump;
                impl ::subxt::blocks::StaticExtrinsic for Bump {
                    const PALLET: &'static str = "Salary";
                    const CALL: &'static str = "bump";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Induct;
                impl ::subxt::blocks::StaticExtrinsic for Induct {
                    const PALLET: &'static str = "Salary";
                    const CALL: &'static str = "induct";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Register;
                impl ::subxt::blocks::StaticExtrinsic for Register {
                    const PALLET: &'static str = "Salary";
                    const CALL: &'static str = "register";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Payout;
                impl ::subxt::blocks::StaticExtrinsic for Payout {
                    const PALLET: &'static str = "Salary";
                    const CALL: &'static str = "payout";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PayoutOther {
                    pub beneficiary: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for PayoutOther {
                    const PALLET: &'static str = "Salary";
                    const CALL: &'static str = "payout_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CheckPayment;
                impl ::subxt::blocks::StaticExtrinsic for CheckPayment {
                    const PALLET: &'static str = "Salary";
                    const CALL: &'static str = "check_payment";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::init`]."]
                pub fn init(&self) -> ::subxt::tx::Payload<types::Init> {
                    ::subxt::tx::Payload::new_static(
                        "Salary",
                        "init",
                        types::Init {},
                        [
                            178u8, 19u8, 190u8, 38u8, 187u8, 214u8, 7u8, 110u8, 32u8, 175u8, 183u8,
                            59u8, 15u8, 136u8, 49u8, 148u8, 115u8, 98u8, 131u8, 74u8, 79u8, 176u8,
                            150u8, 159u8, 72u8, 85u8, 112u8, 6u8, 66u8, 27u8, 119u8, 50u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::bump`]."]
                pub fn bump(&self) -> ::subxt::tx::Payload<types::Bump> {
                    ::subxt::tx::Payload::new_static(
                        "Salary",
                        "bump",
                        types::Bump {},
                        [
                            87u8, 241u8, 180u8, 60u8, 84u8, 12u8, 89u8, 80u8, 117u8, 203u8, 173u8,
                            123u8, 124u8, 202u8, 10u8, 28u8, 174u8, 156u8, 49u8, 122u8, 215u8,
                            207u8, 59u8, 49u8, 202u8, 71u8, 234u8, 238u8, 90u8, 183u8, 162u8,
                            153u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::induct`]."]
                pub fn induct(&self) -> ::subxt::tx::Payload<types::Induct> {
                    ::subxt::tx::Payload::new_static(
                        "Salary",
                        "induct",
                        types::Induct {},
                        [
                            240u8, 91u8, 95u8, 123u8, 20u8, 44u8, 84u8, 152u8, 112u8, 227u8, 83u8,
                            45u8, 214u8, 88u8, 150u8, 142u8, 247u8, 226u8, 221u8, 76u8, 98u8,
                            198u8, 237u8, 135u8, 54u8, 219u8, 92u8, 59u8, 38u8, 157u8, 212u8, 22u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::register`]."]
                pub fn register(&self) -> ::subxt::tx::Payload<types::Register> {
                    ::subxt::tx::Payload::new_static(
                        "Salary",
                        "register",
                        types::Register {},
                        [
                            233u8, 133u8, 237u8, 242u8, 213u8, 162u8, 28u8, 235u8, 126u8, 165u8,
                            131u8, 187u8, 58u8, 254u8, 28u8, 151u8, 115u8, 142u8, 244u8, 189u8,
                            38u8, 44u8, 185u8, 199u8, 85u8, 143u8, 1u8, 26u8, 104u8, 100u8, 242u8,
                            52u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::payout`]."]
                pub fn payout(&self) -> ::subxt::tx::Payload<types::Payout> {
                    ::subxt::tx::Payload::new_static(
                        "Salary",
                        "payout",
                        types::Payout {},
                        [
                            214u8, 12u8, 233u8, 89u8, 186u8, 0u8, 61u8, 206u8, 251u8, 1u8, 55u8,
                            0u8, 126u8, 105u8, 55u8, 109u8, 101u8, 104u8, 46u8, 98u8, 62u8, 228u8,
                            64u8, 195u8, 61u8, 24u8, 48u8, 148u8, 146u8, 108u8, 67u8, 52u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::payout_other`]."]
                pub fn payout_other(
                    &self,
                    beneficiary: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::PayoutOther> {
                    ::subxt::tx::Payload::new_static(
                        "Salary",
                        "payout_other",
                        types::PayoutOther { beneficiary },
                        [
                            228u8, 61u8, 73u8, 73u8, 151u8, 233u8, 15u8, 8u8, 110u8, 36u8, 106u8,
                            36u8, 155u8, 137u8, 206u8, 191u8, 87u8, 215u8, 175u8, 56u8, 188u8,
                            53u8, 209u8, 228u8, 76u8, 207u8, 137u8, 7u8, 169u8, 201u8, 223u8,
                            102u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::check_payment`]."]
                pub fn check_payment(&self) -> ::subxt::tx::Payload<types::CheckPayment> {
                    ::subxt::tx::Payload::new_static(
                        "Salary",
                        "check_payment",
                        types::CheckPayment {},
                        [
                            76u8, 205u8, 204u8, 111u8, 136u8, 78u8, 147u8, 86u8, 56u8, 109u8, 56u8,
                            143u8, 120u8, 9u8, 42u8, 206u8, 66u8, 62u8, 171u8, 112u8, 203u8, 69u8,
                            95u8, 57u8, 55u8, 31u8, 234u8, 23u8, 76u8, 114u8, 3u8, 59u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_salary::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member is inducted into the payroll."]
            pub struct Inducted {
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Inducted {
                const PALLET: &'static str = "Salary";
                const EVENT: &'static str = "Inducted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member registered for a payout."]
            pub struct Registered {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Registered {
                const PALLET: &'static str = "Salary";
                const EVENT: &'static str = "Registered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A payment happened."]
            pub struct Paid {
                pub who: ::subxt::utils::AccountId32,
                pub beneficiary: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
                pub id: (),
            }
            impl ::subxt::events::StaticEvent for Paid {
                const PALLET: &'static str = "Salary";
                const EVENT: &'static str = "Paid";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The next cycle begins."]
            pub struct CycleStarted {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for CycleStarted {
                const PALLET: &'static str = "Salary";
                const EVENT: &'static str = "CycleStarted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The overall status of the system."]
                pub fn status(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_salary::StatusType<
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Salary",
                        "Status",
                        vec![],
                        [
                            11u8, 252u8, 106u8, 215u8, 16u8, 142u8, 146u8, 197u8, 29u8, 57u8, 88u8,
                            39u8, 169u8, 88u8, 134u8, 124u8, 215u8, 173u8, 185u8, 85u8, 184u8,
                            99u8, 200u8, 214u8, 17u8, 230u8, 139u8, 249u8, 222u8, 34u8, 81u8, 21u8,
                        ],
                    )
                }
                #[doc = " The status of a claimant."]
                pub fn claimant(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_salary::ClaimantStatus<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        (),
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Salary",
                        "Claimant",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            14u8, 207u8, 33u8, 159u8, 89u8, 93u8, 143u8, 86u8, 10u8, 58u8, 241u8,
                            41u8, 207u8, 182u8, 166u8, 110u8, 41u8, 32u8, 3u8, 195u8, 50u8, 198u8,
                            62u8, 114u8, 53u8, 82u8, 41u8, 0u8, 0u8, 120u8, 150u8, 30u8,
                        ],
                    )
                }
                #[doc = " The status of a claimant."]
                pub fn claimant_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_salary::ClaimantStatus<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        (),
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Salary",
                        "Claimant",
                        Vec::new(),
                        [
                            14u8, 207u8, 33u8, 159u8, 89u8, 93u8, 143u8, 86u8, 10u8, 58u8, 241u8,
                            41u8, 207u8, 182u8, 166u8, 110u8, 41u8, 32u8, 3u8, 195u8, 50u8, 198u8,
                            62u8, 114u8, 53u8, 82u8, 41u8, 0u8, 0u8, 120u8, 150u8, 30u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The number of blocks within a cycle which accounts have to register their intent to"]
                #[doc = " claim."]
                #[doc = ""]
                #[doc = " The number of blocks between sequential payout cycles is the sum of this and"]
                #[doc = " `PayoutPeriod`."]
                pub fn registration_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Salary",
                        "RegistrationPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The number of blocks within a cycle which accounts have to claim the payout."]
                #[doc = ""]
                #[doc = " The number of blocks between sequential payout cycles is the sum of this and"]
                #[doc = " `RegistrationPeriod`."]
                pub fn payout_period(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Salary",
                        "PayoutPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The total budget per cycle."]
                #[doc = ""]
                #[doc = " This may change over the course of a cycle without any problem."]
                pub fn budget(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Salary",
                        "Budget",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod core_fellowship {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_core_fellowship::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_core_fellowship::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bump {
                    pub who: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Bump {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "bump";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetParams {
                    pub params: ::std::boxed::Box<
                        runtime_types::pallet_core_fellowship::ParamsType<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetParams {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "set_params";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetActive {
                    pub is_active: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetActive {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "set_active";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Approve {
                    pub who: ::subxt::utils::AccountId32,
                    pub at_rank: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for Approve {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "approve";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Induct {
                    pub who: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Induct {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "induct";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Promote {
                    pub who: ::subxt::utils::AccountId32,
                    pub to_rank: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for Promote {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "promote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Offboard {
                    pub who: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Offboard {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "offboard";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SubmitEvidence {
                    pub wish: runtime_types::pallet_core_fellowship::Wish,
                    pub evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SubmitEvidence {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "submit_evidence";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Import;
                impl ::subxt::blocks::StaticExtrinsic for Import {
                    const PALLET: &'static str = "CoreFellowship";
                    const CALL: &'static str = "import";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::bump`]."]
                pub fn bump(
                    &self,
                    who: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::Bump> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "bump",
                        types::Bump { who },
                        [
                            180u8, 65u8, 148u8, 135u8, 240u8, 193u8, 90u8, 51u8, 204u8, 31u8, 43u8,
                            112u8, 183u8, 87u8, 205u8, 180u8, 199u8, 75u8, 115u8, 178u8, 133u8,
                            71u8, 36u8, 223u8, 38u8, 65u8, 118u8, 53u8, 174u8, 46u8, 200u8, 47u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_params`]."]
                pub fn set_params(
                    &self,
                    params: runtime_types::pallet_core_fellowship::ParamsType<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetParams> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "set_params",
                        types::SetParams {
                            params: ::std::boxed::Box::new(params),
                        },
                        [
                            246u8, 14u8, 252u8, 44u8, 40u8, 236u8, 220u8, 112u8, 193u8, 185u8, 8u8,
                            110u8, 43u8, 29u8, 186u8, 251u8, 81u8, 201u8, 172u8, 170u8, 111u8,
                            87u8, 98u8, 124u8, 195u8, 16u8, 92u8, 185u8, 39u8, 239u8, 118u8, 83u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_active`]."]
                pub fn set_active(
                    &self,
                    is_active: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::SetActive> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "set_active",
                        types::SetActive { is_active },
                        [
                            11u8, 140u8, 134u8, 169u8, 7u8, 7u8, 173u8, 26u8, 215u8, 126u8, 16u8,
                            115u8, 181u8, 201u8, 67u8, 167u8, 46u8, 235u8, 211u8, 18u8, 28u8, 32u8,
                            124u8, 18u8, 165u8, 200u8, 71u8, 101u8, 182u8, 249u8, 232u8, 23u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::approve`]."]
                pub fn approve(
                    &self,
                    who: ::subxt::utils::AccountId32,
                    at_rank: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::Approve> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "approve",
                        types::Approve { who, at_rank },
                        [
                            48u8, 239u8, 38u8, 96u8, 94u8, 199u8, 81u8, 160u8, 140u8, 194u8, 203u8,
                            16u8, 79u8, 221u8, 248u8, 215u8, 34u8, 165u8, 0u8, 126u8, 204u8, 21u8,
                            21u8, 249u8, 2u8, 134u8, 203u8, 208u8, 74u8, 120u8, 253u8, 162u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::induct`]."]
                pub fn induct(
                    &self,
                    who: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::Induct> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "induct",
                        types::Induct { who },
                        [
                            171u8, 247u8, 122u8, 56u8, 236u8, 137u8, 39u8, 91u8, 66u8, 152u8, 97u8,
                            90u8, 3u8, 106u8, 79u8, 33u8, 92u8, 94u8, 44u8, 41u8, 52u8, 0u8, 23u8,
                            187u8, 13u8, 20u8, 191u8, 3u8, 196u8, 247u8, 32u8, 168u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::promote`]."]
                pub fn promote(
                    &self,
                    who: ::subxt::utils::AccountId32,
                    to_rank: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::Promote> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "promote",
                        types::Promote { who, to_rank },
                        [
                            68u8, 208u8, 124u8, 74u8, 20u8, 202u8, 40u8, 44u8, 95u8, 74u8, 199u8,
                            2u8, 155u8, 43u8, 146u8, 228u8, 22u8, 199u8, 97u8, 57u8, 79u8, 93u8,
                            103u8, 187u8, 186u8, 4u8, 185u8, 151u8, 22u8, 35u8, 51u8, 80u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::offboard`]."]
                pub fn offboard(
                    &self,
                    who: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::Offboard> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "offboard",
                        types::Offboard { who },
                        [
                            68u8, 199u8, 61u8, 211u8, 153u8, 168u8, 135u8, 106u8, 184u8, 100u8,
                            125u8, 196u8, 9u8, 30u8, 156u8, 152u8, 21u8, 157u8, 100u8, 170u8, 35u8,
                            58u8, 47u8, 155u8, 130u8, 183u8, 145u8, 229u8, 202u8, 67u8, 130u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::submit_evidence`]."]
                pub fn submit_evidence(
                    &self,
                    wish: runtime_types::pallet_core_fellowship::Wish,
                    evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                ) -> ::subxt::tx::Payload<types::SubmitEvidence> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "submit_evidence",
                        types::SubmitEvidence { wish, evidence },
                        [
                            197u8, 53u8, 78u8, 217u8, 229u8, 37u8, 96u8, 141u8, 242u8, 204u8, 70u8,
                            183u8, 244u8, 7u8, 169u8, 54u8, 186u8, 6u8, 193u8, 163u8, 135u8, 94u8,
                            239u8, 239u8, 174u8, 120u8, 153u8, 250u8, 15u8, 121u8, 95u8, 181u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::import`]."]
                pub fn import(&self) -> ::subxt::tx::Payload<types::Import> {
                    ::subxt::tx::Payload::new_static(
                        "CoreFellowship",
                        "import",
                        types::Import {},
                        [
                            3u8, 214u8, 92u8, 209u8, 28u8, 97u8, 244u8, 198u8, 54u8, 26u8, 106u8,
                            211u8, 40u8, 217u8, 208u8, 128u8, 182u8, 32u8, 139u8, 48u8, 12u8, 50u8,
                            167u8, 23u8, 237u8, 15u8, 230u8, 255u8, 17u8, 88u8, 88u8, 25u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_core_fellowship::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Parameters for the pallet have changed."]
            pub struct ParamsChanged {
                pub params: runtime_types::pallet_core_fellowship::ParamsType<
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >,
            }
            impl ::subxt::events::StaticEvent for ParamsChanged {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "ParamsChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Member activity flag has been set."]
            pub struct ActiveChanged {
                pub who: ::subxt::utils::AccountId32,
                pub is_active: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for ActiveChanged {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "ActiveChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Member has begun being tracked in this pallet."]
            pub struct Inducted {
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Inducted {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "Inducted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Member has been removed from being tracked in this pallet (i.e. because rank is now"]
            #[doc = "zero)."]
            pub struct Offboarded {
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Offboarded {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "Offboarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Member has been promoted to the given rank."]
            pub struct Promoted {
                pub who: ::subxt::utils::AccountId32,
                pub to_rank: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for Promoted {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "Promoted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Member has been demoted to the given (non-zero) rank."]
            pub struct Demoted {
                pub who: ::subxt::utils::AccountId32,
                pub to_rank: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for Demoted {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "Demoted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Member has been proven at their current rank, postponing auto-demotion."]
            pub struct Proven {
                pub who: ::subxt::utils::AccountId32,
                pub at_rank: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for Proven {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "Proven";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Member has stated evidence of their efforts their request for rank."]
            pub struct Requested {
                pub who: ::subxt::utils::AccountId32,
                pub wish: runtime_types::pallet_core_fellowship::Wish,
            }
            impl ::subxt::events::StaticEvent for Requested {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "Requested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some submitted evidence was judged and removed. There may or may not have been a change"]
            #[doc = "to the rank, but in any case, `last_proof` is reset."]
            pub struct EvidenceJudged {
                pub who: ::subxt::utils::AccountId32,
                pub wish: runtime_types::pallet_core_fellowship::Wish,
                pub evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub old_rank: ::core::primitive::u16,
                pub new_rank: ::core::option::Option<::core::primitive::u16>,
            }
            impl ::subxt::events::StaticEvent for EvidenceJudged {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "EvidenceJudged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Pre-ranked account has been inducted at their current rank."]
            pub struct Imported {
                pub who: ::subxt::utils::AccountId32,
                pub rank: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for Imported {
                const PALLET: &'static str = "CoreFellowship";
                const EVENT: &'static str = "Imported";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The overall status of the system."]
                pub fn params(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_core_fellowship::ParamsType<
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CoreFellowship",
                        "Params",
                        vec![],
                        [
                            55u8, 2u8, 137u8, 212u8, 136u8, 28u8, 15u8, 21u8, 120u8, 154u8, 142u8,
                            64u8, 113u8, 131u8, 179u8, 116u8, 140u8, 58u8, 5u8, 130u8, 56u8, 108u8,
                            108u8, 71u8, 201u8, 223u8, 232u8, 81u8, 207u8, 150u8, 99u8, 77u8,
                        ],
                    )
                }
                #[doc = " The status of a claimant."]
                pub fn member(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_core_fellowship::MemberStatus<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CoreFellowship",
                        "Member",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            139u8, 112u8, 50u8, 192u8, 248u8, 78u8, 33u8, 197u8, 210u8, 118u8,
                            243u8, 114u8, 69u8, 118u8, 97u8, 88u8, 138u8, 115u8, 235u8, 12u8,
                            140u8, 230u8, 60u8, 240u8, 107u8, 214u8, 113u8, 65u8, 159u8, 185u8,
                            43u8, 112u8,
                        ],
                    )
                }
                #[doc = " The status of a claimant."]
                pub fn member_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_core_fellowship::MemberStatus<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CoreFellowship",
                        "Member",
                        Vec::new(),
                        [
                            139u8, 112u8, 50u8, 192u8, 248u8, 78u8, 33u8, 197u8, 210u8, 118u8,
                            243u8, 114u8, 69u8, 118u8, 97u8, 88u8, 138u8, 115u8, 235u8, 12u8,
                            140u8, 230u8, 60u8, 240u8, 107u8, 214u8, 113u8, 65u8, 159u8, 185u8,
                            43u8, 112u8,
                        ],
                    )
                }
                #[doc = " Some evidence together with the desired outcome for which it was presented."]
                pub fn member_evidence(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::pallet_core_fellowship::Wish,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CoreFellowship",
                        "MemberEvidence",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            169u8, 33u8, 90u8, 145u8, 54u8, 68u8, 190u8, 85u8, 123u8, 190u8, 214u8,
                            222u8, 221u8, 133u8, 184u8, 186u8, 120u8, 38u8, 128u8, 196u8, 34u8,
                            175u8, 68u8, 219u8, 195u8, 235u8, 188u8, 191u8, 185u8, 220u8, 89u8,
                            52u8,
                        ],
                    )
                }
                #[doc = " Some evidence together with the desired outcome for which it was presented."]
                pub fn member_evidence_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (
                        runtime_types::pallet_core_fellowship::Wish,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "CoreFellowship",
                        "MemberEvidence",
                        Vec::new(),
                        [
                            169u8, 33u8, 90u8, 145u8, 54u8, 68u8, 190u8, 85u8, 123u8, 190u8, 214u8,
                            222u8, 221u8, 133u8, 184u8, 186u8, 120u8, 38u8, 128u8, 196u8, 34u8,
                            175u8, 68u8, 219u8, 195u8, 235u8, 188u8, 191u8, 185u8, 220u8, 89u8,
                            52u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum size in bytes submitted evidence is allowed to be."]
                pub fn evidence_size(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "CoreFellowship",
                        "EvidenceSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_storage {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_transaction_storage::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_transaction_storage::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Store {
                    pub data: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Store {
                    const PALLET: &'static str = "TransactionStorage";
                    const CALL: &'static str = "store";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Renew {
                    pub block: ::core::primitive::u32,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Renew {
                    const PALLET: &'static str = "TransactionStorage";
                    const CALL: &'static str = "renew";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CheckProof {
                    pub proof: runtime_types::sp_transaction_storage_proof::TransactionStorageProof,
                }
                impl ::subxt::blocks::StaticExtrinsic for CheckProof {
                    const PALLET: &'static str = "TransactionStorage";
                    const CALL: &'static str = "check_proof";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::store`]."]
                pub fn store(
                    &self,
                    data: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::Store> {
                    ::subxt::tx::Payload::new_static(
                        "TransactionStorage",
                        "store",
                        types::Store { data },
                        [
                            206u8, 250u8, 219u8, 199u8, 43u8, 149u8, 100u8, 135u8, 136u8, 157u8,
                            4u8, 205u8, 16u8, 254u8, 37u8, 205u8, 252u8, 243u8, 11u8, 142u8, 199u8,
                            101u8, 129u8, 22u8, 198u8, 219u8, 81u8, 184u8, 108u8, 80u8, 240u8,
                            185u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::renew`]."]
                pub fn renew(
                    &self,
                    block: ::core::primitive::u32,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Renew> {
                    ::subxt::tx::Payload::new_static(
                        "TransactionStorage",
                        "renew",
                        types::Renew { block, index },
                        [
                            4u8, 113u8, 32u8, 225u8, 110u8, 211u8, 234u8, 212u8, 162u8, 215u8,
                            187u8, 37u8, 41u8, 161u8, 157u8, 9u8, 252u8, 224u8, 80u8, 4u8, 23u8,
                            50u8, 220u8, 132u8, 244u8, 173u8, 67u8, 130u8, 106u8, 19u8, 228u8,
                            168u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::check_proof`]."]
                pub fn check_proof(
                    &self,
                    proof: runtime_types::sp_transaction_storage_proof::TransactionStorageProof,
                ) -> ::subxt::tx::Payload<types::CheckProof> {
                    ::subxt::tx::Payload::new_static(
                        "TransactionStorage",
                        "check_proof",
                        types::CheckProof { proof },
                        [
                            82u8, 216u8, 133u8, 154u8, 223u8, 96u8, 156u8, 87u8, 236u8, 66u8, 2u8,
                            83u8, 70u8, 8u8, 106u8, 38u8, 191u8, 29u8, 77u8, 39u8, 67u8, 19u8,
                            209u8, 158u8, 104u8, 118u8, 138u8, 12u8, 90u8, 94u8, 212u8, 214u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_transaction_storage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Stored data under specified index."]
            pub struct Stored {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Stored {
                const PALLET: &'static str = "TransactionStorage";
                const EVENT: &'static str = "Stored";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Renewed data under specified index."]
            pub struct Renewed {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Renewed {
                const PALLET: &'static str = "TransactionStorage";
                const EVENT: &'static str = "Renewed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Storage proof was successfully checked."]
            pub struct ProofChecked;
            impl ::subxt::events::StaticEvent for ProofChecked {
                const PALLET: &'static str = "TransactionStorage";
                const EVENT: &'static str = "ProofChecked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Collection of transaction metadata by block number."]
                pub fn transactions(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_transaction_storage::TransactionInfo,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "Transactions",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            103u8, 62u8, 177u8, 30u8, 81u8, 161u8, 140u8, 221u8, 20u8, 219u8,
                            243u8, 70u8, 35u8, 215u8, 19u8, 10u8, 84u8, 216u8, 1u8, 34u8, 160u8,
                            133u8, 250u8, 129u8, 118u8, 57u8, 72u8, 234u8, 13u8, 29u8, 164u8,
                            123u8,
                        ],
                    )
                }
                #[doc = " Collection of transaction metadata by block number."]
                pub fn transactions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_transaction_storage::TransactionInfo,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "Transactions",
                        Vec::new(),
                        [
                            103u8, 62u8, 177u8, 30u8, 81u8, 161u8, 140u8, 221u8, 20u8, 219u8,
                            243u8, 70u8, 35u8, 215u8, 19u8, 10u8, 84u8, 216u8, 1u8, 34u8, 160u8,
                            133u8, 250u8, 129u8, 118u8, 57u8, 72u8, 234u8, 13u8, 29u8, 164u8,
                            123u8,
                        ],
                    )
                }
                #[doc = " Count indexed chunks for each block."]
                pub fn chunk_count(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "ChunkCount",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            104u8, 177u8, 18u8, 94u8, 26u8, 234u8, 75u8, 135u8, 72u8, 69u8, 217u8,
                            242u8, 233u8, 20u8, 177u8, 31u8, 7u8, 217u8, 249u8, 142u8, 68u8, 123u8,
                            59u8, 217u8, 183u8, 120u8, 203u8, 205u8, 14u8, 160u8, 67u8, 215u8,
                        ],
                    )
                }
                #[doc = " Count indexed chunks for each block."]
                pub fn chunk_count_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "ChunkCount",
                        Vec::new(),
                        [
                            104u8, 177u8, 18u8, 94u8, 26u8, 234u8, 75u8, 135u8, 72u8, 69u8, 217u8,
                            242u8, 233u8, 20u8, 177u8, 31u8, 7u8, 217u8, 249u8, 142u8, 68u8, 123u8,
                            59u8, 217u8, 183u8, 120u8, 203u8, 205u8, 14u8, 160u8, 67u8, 215u8,
                        ],
                    )
                }
                #[doc = " Storage fee per byte."]
                pub fn byte_fee(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "ByteFee",
                        vec![],
                        [
                            209u8, 94u8, 139u8, 181u8, 148u8, 211u8, 47u8, 97u8, 52u8, 145u8,
                            119u8, 8u8, 147u8, 35u8, 77u8, 84u8, 199u8, 194u8, 156u8, 124u8, 11u8,
                            88u8, 29u8, 60u8, 252u8, 0u8, 160u8, 120u8, 54u8, 140u8, 42u8, 117u8,
                        ],
                    )
                }
                #[doc = " Storage fee per transaction."]
                pub fn entry_fee(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "EntryFee",
                        vec![],
                        [
                            239u8, 84u8, 144u8, 150u8, 82u8, 48u8, 225u8, 43u8, 194u8, 91u8, 59u8,
                            7u8, 10u8, 24u8, 31u8, 225u8, 37u8, 238u8, 208u8, 239u8, 240u8, 217u8,
                            175u8, 235u8, 130u8, 228u8, 137u8, 191u8, 68u8, 36u8, 214u8, 44u8,
                        ],
                    )
                }
                #[doc = " Storage period for data in blocks. Should match `sp_storage_proof::DEFAULT_STORAGE_PERIOD`"]
                #[doc = " for block authoring."]
                pub fn storage_period(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "StoragePeriod",
                        vec![],
                        [
                            216u8, 25u8, 211u8, 29u8, 44u8, 8u8, 203u8, 188u8, 175u8, 234u8, 124u8,
                            27u8, 111u8, 72u8, 192u8, 231u8, 138u8, 193u8, 172u8, 164u8, 247u8,
                            150u8, 75u8, 166u8, 124u8, 41u8, 166u8, 115u8, 93u8, 177u8, 13u8,
                            166u8,
                        ],
                    )
                }
                pub fn block_transactions(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_transaction_storage::TransactionInfo,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "BlockTransactions",
                        vec![],
                        [
                            228u8, 171u8, 50u8, 85u8, 88u8, 67u8, 123u8, 108u8, 217u8, 217u8,
                            212u8, 163u8, 22u8, 146u8, 50u8, 213u8, 161u8, 144u8, 199u8, 13u8,
                            214u8, 245u8, 3u8, 159u8, 53u8, 203u8, 4u8, 165u8, 21u8, 112u8, 112u8,
                            44u8,
                        ],
                    )
                }
                #[doc = " Was the proof checked in this block?"]
                pub fn proof_checked(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::bool,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionStorage",
                        "ProofChecked",
                        vec![],
                        [
                            129u8, 114u8, 179u8, 216u8, 245u8, 71u8, 184u8, 77u8, 206u8, 103u8,
                            123u8, 2u8, 235u8, 142u8, 184u8, 99u8, 228u8, 106u8, 170u8, 72u8,
                            119u8, 105u8, 109u8, 111u8, 193u8, 117u8, 230u8, 204u8, 34u8, 83u8,
                            229u8, 14u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod voter_list {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_bags_list::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bags_list::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Rebag {
                    pub dislocated: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Rebag {
                    const PALLET: &'static str = "VoterList";
                    const CALL: &'static str = "rebag";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PutInFrontOf {
                    pub lighter: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for PutInFrontOf {
                    const PALLET: &'static str = "VoterList";
                    const CALL: &'static str = "put_in_front_of";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::rebag`]."]
                pub fn rebag(
                    &self,
                    dislocated: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Rebag> {
                    ::subxt::tx::Payload::new_static(
                        "VoterList",
                        "rebag",
                        types::Rebag { dislocated },
                        [
                            136u8, 83u8, 36u8, 186u8, 29u8, 197u8, 194u8, 38u8, 185u8, 103u8,
                            132u8, 73u8, 180u8, 246u8, 141u8, 58u8, 14u8, 74u8, 77u8, 127u8, 235u8,
                            179u8, 99u8, 149u8, 243u8, 171u8, 40u8, 97u8, 134u8, 179u8, 2u8, 117u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::put_in_front_of`]."]
                pub fn put_in_front_of(
                    &self,
                    lighter: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::PutInFrontOf> {
                    ::subxt::tx::Payload::new_static(
                        "VoterList",
                        "put_in_front_of",
                        types::PutInFrontOf { lighter },
                        [
                            61u8, 66u8, 150u8, 46u8, 249u8, 168u8, 25u8, 138u8, 201u8, 233u8,
                            191u8, 216u8, 170u8, 197u8, 3u8, 123u8, 116u8, 140u8, 49u8, 226u8,
                            65u8, 222u8, 235u8, 27u8, 123u8, 195u8, 169u8, 247u8, 50u8, 125u8,
                            245u8, 111u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bags_list::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Moved an account from one bag to another."]
            pub struct Rebagged {
                pub who: ::subxt::utils::AccountId32,
                pub from: ::core::primitive::u64,
                pub to: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for Rebagged {
                const PALLET: &'static str = "VoterList";
                const EVENT: &'static str = "Rebagged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Updated the score of some account to the given amount."]
            pub struct ScoreUpdated {
                pub who: ::subxt::utils::AccountId32,
                pub new_score: ::core::primitive::u64,
            }
            impl ::subxt::events::StaticEvent for ScoreUpdated {
                const PALLET: &'static str = "VoterList";
                const EVENT: &'static str = "ScoreUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " A single node, within some bag."]
                #[doc = ""]
                #[doc = " Nodes store links forward and back within their respective bags."]
                pub fn list_nodes(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bags_list::list::Node,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "VoterList",
                        "ListNodes",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            252u8, 218u8, 186u8, 230u8, 86u8, 177u8, 112u8, 218u8, 9u8, 62u8,
                            217u8, 5u8, 39u8, 70u8, 15u8, 104u8, 157u8, 19u8, 175u8, 136u8, 71u8,
                            237u8, 254u8, 254u8, 119u8, 107u8, 84u8, 10u8, 104u8, 142u8, 135u8,
                            35u8,
                        ],
                    )
                }
                #[doc = " A single node, within some bag."]
                #[doc = ""]
                #[doc = " Nodes store links forward and back within their respective bags."]
                pub fn list_nodes_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bags_list::list::Node,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "VoterList",
                        "ListNodes",
                        Vec::new(),
                        [
                            252u8, 218u8, 186u8, 230u8, 86u8, 177u8, 112u8, 218u8, 9u8, 62u8,
                            217u8, 5u8, 39u8, 70u8, 15u8, 104u8, 157u8, 19u8, 175u8, 136u8, 71u8,
                            237u8, 254u8, 254u8, 119u8, 107u8, 84u8, 10u8, 104u8, 142u8, 135u8,
                            35u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_list_nodes(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "VoterList",
                        "CounterForListNodes",
                        vec![],
                        [
                            126u8, 150u8, 201u8, 81u8, 155u8, 79u8, 50u8, 48u8, 120u8, 170u8, 3u8,
                            104u8, 112u8, 254u8, 106u8, 46u8, 108u8, 126u8, 158u8, 245u8, 95u8,
                            88u8, 236u8, 89u8, 79u8, 172u8, 13u8, 146u8, 202u8, 151u8, 122u8,
                            132u8,
                        ],
                    )
                }
                #[doc = " A bag stored in storage."]
                #[doc = ""]
                #[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]
                pub fn list_bags(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u64>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bags_list::list::Bag,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "VoterList",
                        "ListBags",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            157u8, 147u8, 94u8, 26u8, 37u8, 89u8, 114u8, 210u8, 158u8, 36u8, 155u8,
                            0u8, 137u8, 78u8, 65u8, 165u8, 226u8, 192u8, 65u8, 13u8, 244u8, 159u8,
                            245u8, 15u8, 210u8, 101u8, 61u8, 111u8, 217u8, 225u8, 197u8, 158u8,
                        ],
                    )
                }
                #[doc = " A bag stored in storage."]
                #[doc = ""]
                #[doc = " Stores a `Bag` struct, which stores head and tail pointers to itself."]
                pub fn list_bags_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_bags_list::list::Bag,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "VoterList",
                        "ListBags",
                        Vec::new(),
                        [
                            157u8, 147u8, 94u8, 26u8, 37u8, 89u8, 114u8, 210u8, 158u8, 36u8, 155u8,
                            0u8, 137u8, 78u8, 65u8, 165u8, 226u8, 192u8, 65u8, 13u8, 244u8, 159u8,
                            245u8, 15u8, 210u8, 101u8, 61u8, 111u8, 217u8, 225u8, 197u8, 158u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The list of thresholds separating the various bags."]
                #[doc = ""]
                #[doc = " Ids are separated into unsorted bags according to their score. This specifies the"]
                #[doc = " thresholds separating the bags. An id's bag is the largest bag for which the id's score"]
                #[doc = " is less than or equal to its upper threshold."]
                #[doc = ""]
                #[doc = " When ids are iterated, higher bags are iterated completely before lower bags. This means"]
                #[doc = " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower"]
                #[doc = " score, but peer ids within a particular bag are sorted in insertion order."]
                #[doc = ""]
                #[doc = " # Expressing the constant"]
                #[doc = ""]
                #[doc = " This constant must be sorted in strictly increasing order. Duplicate items are not"]
                #[doc = " permitted."]
                #[doc = ""]
                #[doc = " There is an implied upper limit of `Score::MAX`; that value does not need to be"]
                #[doc = " specified within the bag. For any two threshold lists, if one ends with"]
                #[doc = " `Score::MAX`, the other one does not, and they are otherwise equal, the two"]
                #[doc = " lists will behave identically."]
                #[doc = ""]
                #[doc = " # Calculation"]
                #[doc = ""]
                #[doc = " It is recommended to generate the set of thresholds in a geometric series, such that"]
                #[doc = " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *"]
                #[doc = " constant_ratio).max(threshold[k] + 1)` for all `k`."]
                #[doc = ""]
                #[doc = " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation."]
                #[doc = ""]
                #[doc = " # Examples"]
                #[doc = ""]
                #[doc = " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and"]
                #[doc = "   iteration is strictly in insertion order."]
                #[doc = " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to"]
                #[doc = "   the procedure given above, then the constant ratio is equal to 2."]
                #[doc = " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to"]
                #[doc = "   the procedure given above, then the constant ratio is approximately equal to 1.248."]
                #[doc = " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall"]
                #[doc = "   into bag 0, an id with score 2 will fall into bag 1, etc."]
                #[doc = ""]
                #[doc = " # Migration"]
                #[doc = ""]
                #[doc = " In the event that this list ever changes, a copy of the old bags list must be retained."]
                #[doc = " With that `List::migrate` can be called, which will perform the appropriate migration."]
                pub fn bag_thresholds(
                    &self,
                ) -> ::subxt::constants::Address<::std::vec::Vec<::core::primitive::u64>>
                {
                    ::subxt::constants::Address::new_static(
                        "VoterList",
                        "BagThresholds",
                        [
                            215u8, 118u8, 183u8, 172u8, 4u8, 42u8, 248u8, 108u8, 4u8, 110u8, 43u8,
                            165u8, 228u8, 7u8, 36u8, 30u8, 135u8, 184u8, 56u8, 201u8, 107u8, 68u8,
                            25u8, 164u8, 134u8, 32u8, 82u8, 107u8, 200u8, 219u8, 212u8, 198u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod state_trie_migration {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_state_trie_migration::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_state_trie_migration::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ControlAutoMigration {
                    pub maybe_config: ::core::option::Option<
                        runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ControlAutoMigration {
                    const PALLET: &'static str = "StateTrieMigration";
                    const CALL: &'static str = "control_auto_migration";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ContinueMigrate {
                    pub limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    pub real_size_upper: ::core::primitive::u32,
                    pub witness_task:
                        runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
                }
                impl ::subxt::blocks::StaticExtrinsic for ContinueMigrate {
                    const PALLET: &'static str = "StateTrieMigration";
                    const CALL: &'static str = "continue_migrate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MigrateCustomTop {
                    pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    pub witness_size: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for MigrateCustomTop {
                    const PALLET: &'static str = "StateTrieMigration";
                    const CALL: &'static str = "migrate_custom_top";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MigrateCustomChild {
                    pub root: ::std::vec::Vec<::core::primitive::u8>,
                    pub child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    pub total_size: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for MigrateCustomChild {
                    const PALLET: &'static str = "StateTrieMigration";
                    const CALL: &'static str = "migrate_custom_child";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetSignedMaxLimits {
                    pub limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetSignedMaxLimits {
                    const PALLET: &'static str = "StateTrieMigration";
                    const CALL: &'static str = "set_signed_max_limits";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ForceSetProgress {
                    pub progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                    pub progress_child:
                        runtime_types::pallet_state_trie_migration::pallet::Progress,
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceSetProgress {
                    const PALLET: &'static str = "StateTrieMigration";
                    const CALL: &'static str = "force_set_progress";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::control_auto_migration`]."]
                pub fn control_auto_migration(
                    &self,
                    maybe_config: ::core::option::Option<
                        runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    >,
                ) -> ::subxt::tx::Payload<types::ControlAutoMigration> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "control_auto_migration",
                        types::ControlAutoMigration { maybe_config },
                        [
                            22u8, 173u8, 100u8, 166u8, 210u8, 251u8, 189u8, 180u8, 5u8, 43u8,
                            227u8, 167u8, 203u8, 54u8, 19u8, 59u8, 178u8, 132u8, 61u8, 103u8, 21u8,
                            226u8, 9u8, 230u8, 73u8, 239u8, 249u8, 127u8, 227u8, 181u8, 115u8,
                            145u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::continue_migrate`]."]
                pub fn continue_migrate(
                    &self,
                    limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    real_size_upper: ::core::primitive::u32,
                    witness_task: runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
                ) -> ::subxt::tx::Payload<types::ContinueMigrate> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "continue_migrate",
                        types::ContinueMigrate {
                            limits,
                            real_size_upper,
                            witness_task,
                        },
                        [
                            23u8, 237u8, 204u8, 212u8, 16u8, 238u8, 29u8, 206u8, 248u8, 206u8,
                            156u8, 119u8, 171u8, 23u8, 194u8, 212u8, 88u8, 224u8, 113u8, 217u8,
                            94u8, 129u8, 16u8, 73u8, 140u8, 236u8, 87u8, 128u8, 66u8, 151u8, 201u8,
                            38u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::migrate_custom_top`]."]
                pub fn migrate_custom_top(
                    &self,
                    keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    witness_size: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::MigrateCustomTop> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "migrate_custom_top",
                        types::MigrateCustomTop { keys, witness_size },
                        [
                            167u8, 185u8, 103u8, 14u8, 52u8, 177u8, 104u8, 139u8, 95u8, 195u8, 1u8,
                            30u8, 111u8, 205u8, 10u8, 53u8, 116u8, 31u8, 104u8, 135u8, 34u8, 80u8,
                            214u8, 3u8, 80u8, 101u8, 21u8, 3u8, 244u8, 62u8, 115u8, 50u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::migrate_custom_child`]."]
                pub fn migrate_custom_child(
                    &self,
                    root: ::std::vec::Vec<::core::primitive::u8>,
                    child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    total_size: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::MigrateCustomChild> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "migrate_custom_child",
                        types::MigrateCustomChild {
                            root,
                            child_keys,
                            total_size,
                        },
                        [
                            98u8, 159u8, 237u8, 143u8, 119u8, 232u8, 189u8, 167u8, 101u8, 174u8,
                            0u8, 32u8, 180u8, 132u8, 27u8, 98u8, 54u8, 77u8, 249u8, 232u8, 160u8,
                            242u8, 73u8, 24u8, 68u8, 151u8, 206u8, 204u8, 188u8, 106u8, 168u8,
                            106u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_signed_max_limits`]."]
                pub fn set_signed_max_limits(
                    &self,
                    limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                ) -> ::subxt::tx::Payload<types::SetSignedMaxLimits> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "set_signed_max_limits",
                        types::SetSignedMaxLimits { limits },
                        [
                            139u8, 80u8, 219u8, 200u8, 231u8, 12u8, 241u8, 132u8, 154u8, 106u8,
                            21u8, 64u8, 151u8, 125u8, 81u8, 174u8, 31u8, 97u8, 209u8, 194u8, 132u8,
                            87u8, 165u8, 29u8, 252u8, 81u8, 8u8, 96u8, 155u8, 140u8, 73u8, 65u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::force_set_progress`]."]
                pub fn force_set_progress(
                    &self,
                    progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                    progress_child: runtime_types::pallet_state_trie_migration::pallet::Progress,
                ) -> ::subxt::tx::Payload<types::ForceSetProgress> {
                    ::subxt::tx::Payload::new_static(
                        "StateTrieMigration",
                        "force_set_progress",
                        types::ForceSetProgress {
                            progress_top,
                            progress_child,
                        },
                        [
                            46u8, 13u8, 175u8, 78u8, 248u8, 186u8, 200u8, 134u8, 29u8, 81u8, 211u8,
                            27u8, 94u8, 180u8, 185u8, 224u8, 254u8, 84u8, 186u8, 151u8, 199u8,
                            126u8, 14u8, 33u8, 123u8, 63u8, 128u8, 159u8, 94u8, 48u8, 213u8, 98u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Inner events of this pallet."]
        pub type Event = runtime_types::pallet_state_trie_migration::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Given number of `(top, child)` keys were migrated respectively, with the given"]
            #[doc = "`compute`."]
            pub struct Migrated {
                pub top: ::core::primitive::u32,
                pub child: ::core::primitive::u32,
                pub compute: runtime_types::pallet_state_trie_migration::pallet::MigrationCompute,
            }
            impl ::subxt::events::StaticEvent for Migrated {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "Migrated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some account got slashed by the given amount."]
            pub struct Slashed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The auto migration task finished."]
            pub struct AutoMigrationFinished;
            impl ::subxt::events::StaticEvent for AutoMigrationFinished {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "AutoMigrationFinished";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Migration got halted due to an error or miss-configuration."]
            pub struct Halted {
                pub error: runtime_types::pallet_state_trie_migration::pallet::Error,
            }
            impl ::subxt::events::StaticEvent for Halted {
                const PALLET: &'static str = "StateTrieMigration";
                const EVENT: &'static str = "Halted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Migration progress."]
                #[doc = ""]
                #[doc = " This stores the snapshot of the last migrated keys. It can be set into motion and move"]
                #[doc = " forward by any of the means provided by this pallet."]
                pub fn migration_process(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "StateTrieMigration",
                        "MigrationProcess",
                        vec![],
                        [
                            192u8, 225u8, 149u8, 230u8, 22u8, 226u8, 52u8, 34u8, 68u8, 8u8, 53u8,
                            210u8, 62u8, 136u8, 34u8, 190u8, 86u8, 186u8, 185u8, 77u8, 147u8,
                            110u8, 202u8, 191u8, 166u8, 219u8, 176u8, 205u8, 148u8, 34u8, 196u8,
                            65u8,
                        ],
                    )
                }
                #[doc = " The limits that are imposed on automatic migrations."]
                #[doc = ""]
                #[doc = " If set to None, then no automatic migration happens."]
                pub fn auto_limits(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::option::Option<
                        runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "StateTrieMigration",
                        "AutoLimits",
                        vec![],
                        [
                            88u8, 131u8, 45u8, 101u8, 53u8, 188u8, 46u8, 126u8, 190u8, 188u8,
                            104u8, 180u8, 40u8, 157u8, 10u8, 147u8, 219u8, 2u8, 231u8, 127u8,
                            100u8, 43u8, 6u8, 225u8, 20u8, 71u8, 77u8, 216u8, 212u8, 213u8, 226u8,
                            175u8,
                        ],
                    )
                }
                #[doc = " The maximum limits that the signed migration could use."]
                #[doc = ""]
                #[doc = " If not set, no signed submission is allowed."]
                pub fn signed_migration_max_limits(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "StateTrieMigration",
                        "SignedMigrationMaxLimits",
                        vec![],
                        [
                            85u8, 225u8, 28u8, 218u8, 103u8, 223u8, 67u8, 73u8, 153u8, 147u8, 76u8,
                            226u8, 167u8, 21u8, 233u8, 117u8, 96u8, 87u8, 222u8, 159u8, 193u8,
                            17u8, 35u8, 185u8, 189u8, 253u8, 32u8, 74u8, 187u8, 95u8, 86u8, 38u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximal number of bytes that a key can have."]
                #[doc = ""]
                #[doc = " FRAME itself does not limit the key length."]
                #[doc = " The concrete value must therefore depend on your storage usage."]
                #[doc = " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of"]
                #[doc = " keys which are then hashed and concatenated, resulting in arbitrarily long keys."]
                #[doc = ""]
                #[doc = " Use the *state migration RPC* to retrieve the length of the longest key in your"]
                #[doc = " storage: <https://github.com/paritytech/substrate/issues/11642>"]
                #[doc = ""]
                #[doc = " The migration will halt with a `Halted` event if this value is too small."]
                #[doc = " Since there is no real penalty from over-estimating, it is advised to use a large"]
                #[doc = " value. The default is 512 byte."]
                #[doc = ""]
                #[doc = " Some key lengths for reference:"]
                #[doc = " - [`frame_support::storage::StorageValue`]: 32 byte"]
                #[doc = " - [`frame_support::storage::StorageMap`]: 64 byte"]
                #[doc = " - [`frame_support::storage::StorageDoubleMap`]: 96 byte"]
                #[doc = ""]
                #[doc = " For more info see"]
                #[doc = " <https://www.shawntabrizi.com/substrate/querying-substrate-storage-via-rpc/>"]
                pub fn max_key_len(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "StateTrieMigration",
                        "MaxKeyLen",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod child_bounties {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_child_bounties::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_child_bounties::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddChildBounty {
                    #[codec(compact)]
                    pub parent_bounty_id: ::core::primitive::u32,
                    #[codec(compact)]
                    pub value: ::core::primitive::u128,
                    pub description: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddChildBounty {
                    const PALLET: &'static str = "ChildBounties";
                    const CALL: &'static str = "add_child_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ProposeCurator {
                    #[codec(compact)]
                    pub parent_bounty_id: ::core::primitive::u32,
                    #[codec(compact)]
                    pub child_bounty_id: ::core::primitive::u32,
                    pub curator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub fee: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for ProposeCurator {
                    const PALLET: &'static str = "ChildBounties";
                    const CALL: &'static str = "propose_curator";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AcceptCurator {
                    #[codec(compact)]
                    pub parent_bounty_id: ::core::primitive::u32,
                    #[codec(compact)]
                    pub child_bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for AcceptCurator {
                    const PALLET: &'static str = "ChildBounties";
                    const CALL: &'static str = "accept_curator";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnassignCurator {
                    #[codec(compact)]
                    pub parent_bounty_id: ::core::primitive::u32,
                    #[codec(compact)]
                    pub child_bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for UnassignCurator {
                    const PALLET: &'static str = "ChildBounties";
                    const CALL: &'static str = "unassign_curator";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AwardChildBounty {
                    #[codec(compact)]
                    pub parent_bounty_id: ::core::primitive::u32,
                    #[codec(compact)]
                    pub child_bounty_id: ::core::primitive::u32,
                    pub beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for AwardChildBounty {
                    const PALLET: &'static str = "ChildBounties";
                    const CALL: &'static str = "award_child_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimChildBounty {
                    #[codec(compact)]
                    pub parent_bounty_id: ::core::primitive::u32,
                    #[codec(compact)]
                    pub child_bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClaimChildBounty {
                    const PALLET: &'static str = "ChildBounties";
                    const CALL: &'static str = "claim_child_bounty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CloseChildBounty {
                    #[codec(compact)]
                    pub parent_bounty_id: ::core::primitive::u32,
                    #[codec(compact)]
                    pub child_bounty_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CloseChildBounty {
                    const PALLET: &'static str = "ChildBounties";
                    const CALL: &'static str = "close_child_bounty";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::add_child_bounty`]."]
                pub fn add_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    value: ::core::primitive::u128,
                    description: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::AddChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "add_child_bounty",
                        types::AddChildBounty {
                            parent_bounty_id,
                            value,
                            description,
                        },
                        [
                            249u8, 159u8, 185u8, 144u8, 114u8, 142u8, 104u8, 215u8, 136u8, 52u8,
                            255u8, 125u8, 54u8, 243u8, 220u8, 171u8, 254u8, 49u8, 105u8, 134u8,
                            137u8, 221u8, 100u8, 111u8, 72u8, 38u8, 184u8, 122u8, 72u8, 204u8,
                            182u8, 123u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::propose_curator`]."]
                pub fn propose_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                    curator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    fee: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::ProposeCurator> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "propose_curator",
                        types::ProposeCurator {
                            parent_bounty_id,
                            child_bounty_id,
                            curator,
                            fee,
                        },
                        [
                            28u8, 8u8, 63u8, 41u8, 70u8, 178u8, 143u8, 178u8, 25u8, 250u8, 7u8,
                            245u8, 87u8, 115u8, 67u8, 84u8, 160u8, 142u8, 117u8, 234u8, 37u8, 74u8,
                            172u8, 15u8, 193u8, 190u8, 71u8, 84u8, 172u8, 198u8, 9u8, 39u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::accept_curator`]."]
                pub fn accept_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::AcceptCurator> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "accept_curator",
                        types::AcceptCurator {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            167u8, 196u8, 221u8, 73u8, 86u8, 83u8, 173u8, 219u8, 241u8, 116u8,
                            28u8, 109u8, 21u8, 209u8, 62u8, 131u8, 182u8, 252u8, 54u8, 114u8, 9u8,
                            51u8, 225u8, 37u8, 4u8, 127u8, 110u8, 80u8, 172u8, 97u8, 11u8, 78u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unassign_curator`]."]
                pub fn unassign_curator(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::UnassignCurator> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "unassign_curator",
                        types::UnassignCurator {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            217u8, 24u8, 147u8, 239u8, 116u8, 226u8, 244u8, 189u8, 62u8, 141u8,
                            173u8, 70u8, 213u8, 147u8, 68u8, 51u8, 200u8, 66u8, 200u8, 174u8,
                            243u8, 49u8, 54u8, 219u8, 243u8, 255u8, 250u8, 215u8, 216u8, 248u8,
                            32u8, 90u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::award_child_bounty`]."]
                pub fn award_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                    beneficiary: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::AwardChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "award_child_bounty",
                        types::AwardChildBounty {
                            parent_bounty_id,
                            child_bounty_id,
                            beneficiary,
                        },
                        [
                            144u8, 230u8, 45u8, 20u8, 75u8, 100u8, 138u8, 219u8, 127u8, 5u8, 49u8,
                            161u8, 111u8, 148u8, 114u8, 239u8, 226u8, 154u8, 168u8, 106u8, 13u8,
                            50u8, 3u8, 88u8, 53u8, 28u8, 158u8, 184u8, 191u8, 80u8, 155u8, 19u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_child_bounty`]."]
                pub fn claim_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClaimChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "claim_child_bounty",
                        types::ClaimChildBounty {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            72u8, 55u8, 100u8, 52u8, 218u8, 49u8, 63u8, 107u8, 45u8, 43u8, 34u8,
                            6u8, 48u8, 56u8, 240u8, 3u8, 96u8, 128u8, 202u8, 30u8, 233u8, 116u8,
                            86u8, 141u8, 36u8, 184u8, 217u8, 48u8, 20u8, 54u8, 45u8, 65u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close_child_bounty`]."]
                pub fn close_child_bounty(
                    &self,
                    parent_bounty_id: ::core::primitive::u32,
                    child_bounty_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CloseChildBounty> {
                    ::subxt::tx::Payload::new_static(
                        "ChildBounties",
                        "close_child_bounty",
                        types::CloseChildBounty {
                            parent_bounty_id,
                            child_bounty_id,
                        },
                        [
                            127u8, 210u8, 46u8, 3u8, 33u8, 232u8, 159u8, 245u8, 249u8, 217u8, 51u8,
                            254u8, 167u8, 10u8, 30u8, 195u8, 30u8, 0u8, 204u8, 251u8, 113u8, 1u8,
                            104u8, 215u8, 88u8, 10u8, 200u8, 144u8, 62u8, 93u8, 223u8, 106u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_child_bounties::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A child-bounty is added."]
            pub struct Added {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Added {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Added";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A child-bounty is awarded to a beneficiary."]
            pub struct Awarded {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Awarded {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A child-bounty is claimed by beneficiary."]
            pub struct Claimed {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
                pub beneficiary: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for Claimed {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Claimed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A child-bounty is cancelled."]
            pub struct Canceled {
                pub index: ::core::primitive::u32,
                pub child_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "ChildBounties";
                const EVENT: &'static str = "Canceled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of total child bounties."]
                pub fn child_bounty_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBountyCount",
                        vec![],
                        [
                            206u8, 1u8, 40u8, 132u8, 51u8, 139u8, 234u8, 20u8, 89u8, 86u8, 247u8,
                            107u8, 169u8, 252u8, 5u8, 180u8, 218u8, 24u8, 232u8, 94u8, 82u8, 135u8,
                            24u8, 16u8, 134u8, 23u8, 201u8, 86u8, 12u8, 19u8, 199u8, 0u8,
                        ],
                    )
                }
                #[doc = " Number of child bounties per parent bounty."]
                #[doc = " Map of parent bounty index to number of child bounties."]
                pub fn parent_child_bounties(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ParentChildBounties",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            12u8, 238u8, 185u8, 135u8, 158u8, 191u8, 208u8, 104u8, 37u8, 235u8,
                            101u8, 15u8, 89u8, 20u8, 191u8, 191u8, 78u8, 206u8, 9u8, 19u8, 169u8,
                            17u8, 13u8, 213u8, 238u8, 220u8, 189u8, 100u8, 194u8, 62u8, 85u8,
                            150u8,
                        ],
                    )
                }
                #[doc = " Number of child bounties per parent bounty."]
                #[doc = " Map of parent bounty index to number of child bounties."]
                pub fn parent_child_bounties_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ParentChildBounties",
                        Vec::new(),
                        [
                            12u8, 238u8, 185u8, 135u8, 158u8, 191u8, 208u8, 104u8, 37u8, 235u8,
                            101u8, 15u8, 89u8, 20u8, 191u8, 191u8, 78u8, 206u8, 9u8, 19u8, 169u8,
                            17u8, 13u8, 213u8, 238u8, 220u8, 189u8, 100u8, 194u8, 62u8, 85u8,
                            150u8,
                        ],
                    )
                }
                #[doc = " Child bounties that have been added."]
                pub fn child_bounties(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_child_bounties::ChildBounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBounties",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            236u8, 41u8, 10u8, 227u8, 176u8, 177u8, 196u8, 79u8, 112u8, 117u8,
                            171u8, 175u8, 84u8, 180u8, 69u8, 146u8, 252u8, 228u8, 32u8, 113u8,
                            226u8, 136u8, 175u8, 129u8, 1u8, 161u8, 145u8, 60u8, 142u8, 25u8,
                            162u8, 42u8,
                        ],
                    )
                }
                #[doc = " Child bounties that have been added."]
                pub fn child_bounties_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_child_bounties::ChildBounty<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBounties",
                        Vec::new(),
                        [
                            236u8, 41u8, 10u8, 227u8, 176u8, 177u8, 196u8, 79u8, 112u8, 117u8,
                            171u8, 175u8, 84u8, 180u8, 69u8, 146u8, 252u8, 228u8, 32u8, 113u8,
                            226u8, 136u8, 175u8, 129u8, 1u8, 161u8, 145u8, 60u8, 142u8, 25u8,
                            162u8, 42u8,
                        ],
                    )
                }
                #[doc = " The description of each child-bounty."]
                pub fn child_bounty_descriptions(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBountyDescriptions",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            192u8, 0u8, 220u8, 156u8, 109u8, 65u8, 113u8, 102u8, 119u8, 0u8, 109u8,
                            141u8, 211u8, 128u8, 237u8, 61u8, 28u8, 56u8, 206u8, 93u8, 183u8, 74u8,
                            192u8, 220u8, 76u8, 175u8, 85u8, 105u8, 179u8, 11u8, 164u8, 100u8,
                        ],
                    )
                }
                #[doc = " The description of each child-bounty."]
                pub fn child_bounty_descriptions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildBountyDescriptions",
                        Vec::new(),
                        [
                            192u8, 0u8, 220u8, 156u8, 109u8, 65u8, 113u8, 102u8, 119u8, 0u8, 109u8,
                            141u8, 211u8, 128u8, 237u8, 61u8, 28u8, 56u8, 206u8, 93u8, 183u8, 74u8,
                            192u8, 220u8, 76u8, 175u8, 85u8, 105u8, 179u8, 11u8, 164u8, 100u8,
                        ],
                    )
                }
                #[doc = " The cumulative child-bounty curator fee for each parent bounty."]
                pub fn children_curator_fees(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildrenCuratorFees",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            32u8, 16u8, 190u8, 193u8, 6u8, 80u8, 163u8, 16u8, 85u8, 111u8, 39u8,
                            141u8, 209u8, 70u8, 213u8, 167u8, 22u8, 12u8, 93u8, 17u8, 104u8, 94u8,
                            129u8, 37u8, 179u8, 41u8, 156u8, 117u8, 39u8, 202u8, 227u8, 235u8,
                        ],
                    )
                }
                #[doc = " The cumulative child-bounty curator fee for each parent bounty."]
                pub fn children_curator_fees_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ChildBounties",
                        "ChildrenCuratorFees",
                        Vec::new(),
                        [
                            32u8, 16u8, 190u8, 193u8, 6u8, 80u8, 163u8, 16u8, 85u8, 111u8, 39u8,
                            141u8, 209u8, 70u8, 213u8, 167u8, 22u8, 12u8, 93u8, 17u8, 104u8, 94u8,
                            129u8, 37u8, 179u8, 41u8, 156u8, 117u8, 39u8, 202u8, 227u8, 235u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximum number of child bounties that can be added to a parent bounty."]
                pub fn max_active_child_bounty_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ChildBounties",
                        "MaxActiveChildBountyCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum value for a child-bounty."]
                pub fn child_bounty_value_minimum(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "ChildBounties",
                        "ChildBountyValueMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod referenda {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_referenda::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_referenda::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Submit {
                    pub proposal_origin:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::OriginCaller>,
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                    pub enactment_moment:
                        runtime_types::frame_support::traits::schedule::DispatchTime<
                            ::core::primitive::u32,
                        >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Submit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "submit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PlaceDecisionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for PlaceDecisionDeposit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "place_decision_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundDecisionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundDecisionDeposit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "refund_decision_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Cancel {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Cancel {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Kill {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Kill {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "kill";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NudgeReferendum {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for NudgeReferendum {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "nudge_referendum";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OneFewerDeciding {
                    pub track: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for OneFewerDeciding {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "one_fewer_deciding";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundSubmissionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundSubmissionDeposit {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "refund_submission_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub index: ::core::primitive::u32,
                    pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "Referenda";
                    const CALL: &'static str = "set_metadata";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::submit`]."]
                pub fn submit(
                    &self,
                    proposal_origin: runtime_types::kitchensink_runtime::OriginCaller,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                    enactment_moment: runtime_types::frame_support::traits::schedule::DispatchTime<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Submit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "submit",
                        types::Submit {
                            proposal_origin: ::std::boxed::Box::new(proposal_origin),
                            proposal,
                            enactment_moment,
                        },
                        [
                            4u8, 7u8, 224u8, 129u8, 243u8, 222u8, 252u8, 241u8, 206u8, 118u8, 84u8,
                            87u8, 66u8, 245u8, 116u8, 195u8, 75u8, 37u8, 107u8, 88u8, 136u8, 165u8,
                            185u8, 184u8, 77u8, 164u8, 92u8, 49u8, 116u8, 12u8, 225u8, 252u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::place_decision_deposit`]."]
                pub fn place_decision_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::PlaceDecisionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "place_decision_deposit",
                        types::PlaceDecisionDeposit { index },
                        [
                            247u8, 158u8, 55u8, 191u8, 188u8, 200u8, 3u8, 47u8, 20u8, 175u8, 86u8,
                            203u8, 52u8, 253u8, 91u8, 131u8, 21u8, 213u8, 56u8, 68u8, 40u8, 84u8,
                            184u8, 30u8, 9u8, 193u8, 63u8, 182u8, 178u8, 241u8, 247u8, 220u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund_decision_deposit`]."]
                pub fn refund_decision_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RefundDecisionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "refund_decision_deposit",
                        types::RefundDecisionDeposit { index },
                        [
                            159u8, 19u8, 35u8, 216u8, 114u8, 105u8, 18u8, 42u8, 148u8, 151u8,
                            136u8, 92u8, 117u8, 30u8, 29u8, 41u8, 238u8, 58u8, 195u8, 91u8, 115u8,
                            135u8, 96u8, 99u8, 154u8, 233u8, 8u8, 249u8, 145u8, 165u8, 77u8, 164u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel`]."]
                pub fn cancel(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Cancel> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "cancel",
                        types::Cancel { index },
                        [
                            55u8, 206u8, 119u8, 156u8, 238u8, 165u8, 193u8, 73u8, 242u8, 13u8,
                            212u8, 75u8, 136u8, 156u8, 151u8, 14u8, 35u8, 41u8, 156u8, 107u8, 60u8,
                            190u8, 39u8, 216u8, 8u8, 74u8, 213u8, 130u8, 160u8, 131u8, 237u8,
                            122u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill`]."]
                pub fn kill(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Kill> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "kill",
                        types::Kill { index },
                        [
                            50u8, 89u8, 57u8, 0u8, 87u8, 129u8, 113u8, 140u8, 179u8, 178u8, 126u8,
                            198u8, 92u8, 92u8, 189u8, 64u8, 123u8, 232u8, 57u8, 227u8, 223u8,
                            219u8, 73u8, 217u8, 179u8, 44u8, 210u8, 125u8, 180u8, 10u8, 143u8,
                            48u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::nudge_referendum`]."]
                pub fn nudge_referendum(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::NudgeReferendum> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "nudge_referendum",
                        types::NudgeReferendum { index },
                        [
                            75u8, 99u8, 172u8, 30u8, 170u8, 150u8, 211u8, 229u8, 249u8, 128u8,
                            194u8, 246u8, 100u8, 142u8, 193u8, 184u8, 232u8, 81u8, 29u8, 17u8,
                            99u8, 91u8, 236u8, 85u8, 230u8, 226u8, 57u8, 115u8, 45u8, 170u8, 54u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::one_fewer_deciding`]."]
                pub fn one_fewer_deciding(
                    &self,
                    track: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::OneFewerDeciding> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "one_fewer_deciding",
                        types::OneFewerDeciding { track },
                        [
                            15u8, 84u8, 79u8, 231u8, 21u8, 239u8, 244u8, 143u8, 183u8, 215u8,
                            181u8, 25u8, 225u8, 195u8, 95u8, 171u8, 17u8, 156u8, 182u8, 128u8,
                            111u8, 40u8, 151u8, 102u8, 196u8, 55u8, 36u8, 212u8, 89u8, 190u8,
                            131u8, 167u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund_submission_deposit`]."]
                pub fn refund_submission_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RefundSubmissionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "refund_submission_deposit",
                        types::RefundSubmissionDeposit { index },
                        [
                            20u8, 217u8, 115u8, 6u8, 1u8, 60u8, 54u8, 136u8, 35u8, 41u8, 38u8,
                            23u8, 85u8, 100u8, 141u8, 126u8, 30u8, 160u8, 61u8, 46u8, 134u8, 98u8,
                            82u8, 38u8, 211u8, 124u8, 208u8, 222u8, 210u8, 10u8, 155u8, 122u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    index: ::core::primitive::u32,
                    maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "Referenda",
                        "set_metadata",
                        types::SetMetadata { index, maybe_hash },
                        [
                            207u8, 29u8, 146u8, 233u8, 219u8, 205u8, 88u8, 118u8, 106u8, 61u8,
                            124u8, 101u8, 2u8, 41u8, 169u8, 70u8, 114u8, 189u8, 162u8, 118u8, 1u8,
                            108u8, 234u8, 98u8, 245u8, 245u8, 183u8, 126u8, 89u8, 13u8, 112u8,
                            88u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_referenda::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been submitted."]
            pub struct Submitted {
                pub index: ::core::primitive::u32,
                pub track: ::core::primitive::u16,
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::kitchensink_runtime::RuntimeCall,
                >,
            }
            impl ::subxt::events::StaticEvent for Submitted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Submitted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The decision deposit has been placed."]
            pub struct DecisionDepositPlaced {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DecisionDepositPlaced {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DecisionDepositPlaced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The decision deposit has been refunded."]
            pub struct DecisionDepositRefunded {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DecisionDepositRefunded {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DecisionDepositRefunded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A deposit has been slashaed."]
            pub struct DepositSlashed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DepositSlashed {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DepositSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has moved into the deciding phase."]
            pub struct DecisionStarted {
                pub index: ::core::primitive::u32,
                pub track: ::core::primitive::u16,
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::kitchensink_runtime::RuntimeCall,
                >,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for DecisionStarted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "DecisionStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfirmStarted {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ConfirmStarted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "ConfirmStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfirmAborted {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ConfirmAborted {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "ConfirmAborted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has ended its confirmation phase and is ready for approval."]
            pub struct Confirmed {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Confirmed {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Confirmed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been approved and its proposal has been scheduled."]
            pub struct Approved {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct Rejected {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been timed out without being decided."]
            pub struct TimedOut {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for TimedOut {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "TimedOut";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been killed."]
            pub struct Killed {
                pub index: ::core::primitive::u32,
                pub tally:
                    runtime_types::pallet_conviction_voting::types::Tally<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for Killed {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "Killed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The submission deposit has been refunded."]
            pub struct SubmissionDepositRefunded {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubmissionDepositRefunded {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "SubmissionDepositRefunded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a referendum has been set."]
            pub struct MetadataSet {
                pub index: ::core::primitive::u32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a referendum has been cleared."]
            pub struct MetadataCleared {
                pub index: ::core::primitive::u32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "Referenda";
                const EVENT: &'static str = "MetadataCleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The next free referendum index, aka the number of referenda started so far."]
                pub fn referendum_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "ReferendumCount",
                        vec![],
                        [
                            64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
                            139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
                            198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
                            67u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                pub fn referendum_info_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_referenda::types::ReferendumInfo<
                        ::core::primitive::u16,
                        runtime_types::kitchensink_runtime::OriginCaller,
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                        runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                        ::subxt::utils::AccountId32,
                        (::core::primitive::u32, ::core::primitive::u32),
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "ReferendumInfoFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            246u8, 197u8, 155u8, 163u8, 215u8, 78u8, 119u8, 120u8, 125u8, 162u8,
                            197u8, 254u8, 227u8, 61u8, 214u8, 47u8, 135u8, 166u8, 141u8, 55u8,
                            250u8, 210u8, 173u8, 47u8, 149u8, 97u8, 132u8, 202u8, 111u8, 231u8,
                            51u8, 12u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                pub fn referendum_info_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_referenda::types::ReferendumInfo<
                        ::core::primitive::u16,
                        runtime_types::kitchensink_runtime::OriginCaller,
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                        runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                        ::subxt::utils::AccountId32,
                        (::core::primitive::u32, ::core::primitive::u32),
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "ReferendumInfoFor",
                        Vec::new(),
                        [
                            246u8, 197u8, 155u8, 163u8, 215u8, 78u8, 119u8, 120u8, 125u8, 162u8,
                            197u8, 254u8, 227u8, 61u8, 214u8, 47u8, 135u8, 166u8, 141u8, 55u8,
                            250u8, 210u8, 173u8, 47u8, 149u8, 97u8, 132u8, 202u8, 111u8, 231u8,
                            51u8, 12u8,
                        ],
                    )
                }
                #[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
                #[doc = " conviction-weighted approvals."]
                #[doc = ""]
                #[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
                pub fn track_queue(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "TrackQueue",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
                            20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
                            183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
                        ],
                    )
                }
                #[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
                #[doc = " conviction-weighted approvals."]
                #[doc = ""]
                #[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
                pub fn track_queue_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    )>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "TrackQueue",
                        Vec::new(),
                        [
                            125u8, 59u8, 111u8, 68u8, 27u8, 236u8, 82u8, 55u8, 83u8, 159u8, 105u8,
                            20u8, 241u8, 118u8, 58u8, 141u8, 103u8, 60u8, 246u8, 49u8, 121u8,
                            183u8, 7u8, 203u8, 225u8, 67u8, 132u8, 79u8, 150u8, 107u8, 71u8, 89u8,
                        ],
                    )
                }
                #[doc = " The number of referenda being decided currently."]
                pub fn deciding_count(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "DecidingCount",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
                            146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
                            103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The number of referenda being decided currently."]
                pub fn deciding_count_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "DecidingCount",
                        Vec::new(),
                        [
                            203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
                            146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
                            103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The metadata is a general information concerning the referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "MetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
                            124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
                            45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
                            110u8,
                        ],
                    )
                }
                #[doc = " The metadata is a general information concerning the referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Referenda",
                        "MetadataOf",
                        Vec::new(),
                        [
                            159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
                            124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
                            45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
                            110u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn submission_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "SubmissionDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum size of the referendum queue for a single track."]
                pub fn max_queued(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "MaxQueued",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The number of blocks after submission that a referendum must begin being decided by."]
                #[doc = " Once this passes, then anyone may cancel the referendum."]
                pub fn undeciding_timeout(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "UndecidingTimeout",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Quantization level for the referendum wakeup scheduler. A higher number will result in"]
                #[doc = " fewer storage reads/writes needed for smaller voters, but also result in delays to the"]
                #[doc = " automatic referendum status changes. Explicit servicing instructions are unaffected."]
                pub fn alarm_interval(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "AlarmInterval",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Information concerning the different referendum tracks."]
                pub fn tracks(
                    &self,
                ) -> ::subxt::constants::Address<
                    ::std::vec::Vec<(
                        ::core::primitive::u16,
                        runtime_types::pallet_referenda::types::TrackInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    )>,
                > {
                    ::subxt::constants::Address::new_static(
                        "Referenda",
                        "Tracks",
                        [
                            230u8, 179u8, 170u8, 9u8, 42u8, 168u8, 158u8, 174u8, 177u8, 159u8,
                            93u8, 152u8, 63u8, 111u8, 23u8, 80u8, 133u8, 232u8, 101u8, 2u8, 206u8,
                            230u8, 248u8, 62u8, 145u8, 15u8, 147u8, 251u8, 196u8, 182u8, 95u8,
                            33u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod remark {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_remark::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_remark::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Store {
                    pub remark: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Store {
                    const PALLET: &'static str = "Remark";
                    const CALL: &'static str = "store";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::store`]."]
                pub fn store(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::Store> {
                    ::subxt::tx::Payload::new_static(
                        "Remark",
                        "store",
                        types::Store { remark },
                        [
                            121u8, 0u8, 70u8, 216u8, 46u8, 175u8, 78u8, 250u8, 139u8, 13u8, 194u8,
                            30u8, 201u8, 91u8, 140u8, 73u8, 238u8, 156u8, 172u8, 61u8, 12u8, 186u8,
                            25u8, 72u8, 202u8, 108u8, 187u8, 7u8, 237u8, 178u8, 20u8, 152u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_remark::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Stored data off chain."]
            pub struct Stored {
                pub sender: ::subxt::utils::AccountId32,
                pub content_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Stored {
                const PALLET: &'static str = "Remark";
                const EVENT: &'static str = "Stored";
            }
        }
    }
    pub mod root_testing {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_root_testing::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FillBlock {
                    pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                }
                impl ::subxt::blocks::StaticExtrinsic for FillBlock {
                    const PALLET: &'static str = "RootTesting";
                    const CALL: &'static str = "fill_block";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::fill_block`]."]
                pub fn fill_block(
                    &self,
                    ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> ::subxt::tx::Payload<types::FillBlock> {
                    ::subxt::tx::Payload::new_static(
                        "RootTesting",
                        "fill_block",
                        types::FillBlock { ratio },
                        [
                            164u8, 37u8, 43u8, 91u8, 125u8, 34u8, 208u8, 126u8, 67u8, 94u8, 184u8,
                            240u8, 68u8, 208u8, 41u8, 206u8, 172u8, 95u8, 111u8, 115u8, 9u8, 250u8,
                            163u8, 66u8, 240u8, 0u8, 237u8, 140u8, 87u8, 57u8, 162u8, 117u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod conviction_voting {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_conviction_voting::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_conviction_voting::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    #[codec(compact)]
                    pub poll_index: ::core::primitive::u32,
                    pub vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegate {
                    pub class: ::core::primitive::u16,
                    pub to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                    pub balance: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Delegate {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "delegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Undelegate {
                    pub class: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for Undelegate {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "undelegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unlock {
                    pub class: ::core::primitive::u16,
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Unlock {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "unlock";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveVote {
                    pub class: ::core::option::Option<::core::primitive::u16>,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveVote {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "remove_vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveOtherVote {
                    pub target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub class: ::core::primitive::u16,
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveOtherVote {
                    const PALLET: &'static str = "ConvictionVoting";
                    const CALL: &'static str = "remove_other_vote";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    poll_index: ::core::primitive::u32,
                    vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "vote",
                        types::Vote { poll_index, vote },
                        [
                            83u8, 161u8, 37u8, 200u8, 183u8, 70u8, 26u8, 196u8, 131u8, 173u8,
                            165u8, 3u8, 77u8, 144u8, 17u8, 78u8, 115u8, 118u8, 209u8, 112u8, 250u8,
                            48u8, 75u8, 0u8, 1u8, 57u8, 34u8, 137u8, 136u8, 98u8, 120u8, 224u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::delegate`]."]
                pub fn delegate(
                    &self,
                    class: ::core::primitive::u16,
                    to: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                    balance: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Delegate> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "delegate",
                        types::Delegate {
                            class,
                            to,
                            conviction,
                            balance,
                        },
                        [
                            206u8, 200u8, 167u8, 85u8, 109u8, 202u8, 111u8, 164u8, 80u8, 114u8,
                            62u8, 151u8, 38u8, 70u8, 238u8, 228u8, 12u8, 39u8, 147u8, 206u8, 165u8,
                            186u8, 66u8, 140u8, 11u8, 33u8, 167u8, 203u8, 240u8, 214u8, 82u8,
                            125u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::undelegate`]."]
                pub fn undelegate(
                    &self,
                    class: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::Undelegate> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "undelegate",
                        types::Undelegate { class },
                        [
                            140u8, 232u8, 6u8, 53u8, 228u8, 8u8, 131u8, 144u8, 65u8, 66u8, 245u8,
                            247u8, 147u8, 135u8, 198u8, 57u8, 82u8, 212u8, 89u8, 46u8, 236u8,
                            168u8, 200u8, 220u8, 93u8, 168u8, 101u8, 29u8, 110u8, 76u8, 67u8,
                            181u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unlock`]."]
                pub fn unlock(
                    &self,
                    class: ::core::primitive::u16,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Unlock> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "unlock",
                        types::Unlock { class, target },
                        [
                            160u8, 161u8, 61u8, 238u8, 6u8, 42u8, 161u8, 38u8, 28u8, 72u8, 89u8,
                            47u8, 56u8, 207u8, 199u8, 118u8, 166u8, 7u8, 172u8, 125u8, 219u8, 1u8,
                            58u8, 254u8, 146u8, 98u8, 113u8, 218u8, 26u8, 147u8, 145u8, 48u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_vote`]."]
                pub fn remove_vote(
                    &self,
                    class: ::core::option::Option<::core::primitive::u16>,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveVote> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "remove_vote",
                        types::RemoveVote { class, index },
                        [
                            255u8, 108u8, 211u8, 146u8, 168u8, 231u8, 207u8, 44u8, 76u8, 24u8,
                            235u8, 60u8, 23u8, 79u8, 192u8, 192u8, 46u8, 40u8, 134u8, 27u8, 125u8,
                            114u8, 125u8, 247u8, 85u8, 102u8, 76u8, 159u8, 34u8, 167u8, 152u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_other_vote`]."]
                pub fn remove_other_vote(
                    &self,
                    target: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    class: ::core::primitive::u16,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RemoveOtherVote> {
                    ::subxt::tx::Payload::new_static(
                        "ConvictionVoting",
                        "remove_other_vote",
                        types::RemoveOtherVote {
                            target,
                            class,
                            index,
                        },
                        [
                            45u8, 49u8, 93u8, 208u8, 222u8, 232u8, 27u8, 90u8, 253u8, 59u8, 197u8,
                            17u8, 176u8, 14u8, 141u8, 173u8, 37u8, 206u8, 125u8, 17u8, 38u8, 242u8,
                            190u8, 193u8, 239u8, 182u8, 9u8, 5u8, 170u8, 109u8, 93u8, 105u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_conviction_voting::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
            pub struct Delegated(
                pub ::subxt::utils::AccountId32,
                pub ::subxt::utils::AccountId32,
            );
            impl ::subxt::events::StaticEvent for Delegated {
                const PALLET: &'static str = "ConvictionVoting";
                const EVENT: &'static str = "Delegated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An \\[account\\] has cancelled a previous delegation operation."]
            pub struct Undelegated(pub ::subxt::utils::AccountId32);
            impl ::subxt::events::StaticEvent for Undelegated {
                const PALLET: &'static str = "ConvictionVoting";
                const EVENT: &'static str = "Undelegated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
                #[doc = " number of votes that we have recorded."]
                pub fn voting_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_conviction_voting::vote::Voting<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "VotingFor",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            84u8, 208u8, 38u8, 249u8, 230u8, 78u8, 135u8, 30u8, 99u8, 20u8, 152u8,
                            104u8, 61u8, 29u8, 146u8, 195u8, 67u8, 83u8, 246u8, 251u8, 47u8, 147u8,
                            83u8, 154u8, 36u8, 63u8, 34u8, 209u8, 134u8, 71u8, 210u8, 250u8,
                        ],
                    )
                }
                #[doc = " All voting for a particular voter in a particular voting class. We store the balance for the"]
                #[doc = " number of votes that we have recorded."]
                pub fn voting_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_conviction_voting::vote::Voting<
                        ::core::primitive::u128,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "VotingFor",
                        Vec::new(),
                        [
                            84u8, 208u8, 38u8, 249u8, 230u8, 78u8, 135u8, 30u8, 99u8, 20u8, 152u8,
                            104u8, 61u8, 29u8, 146u8, 195u8, 67u8, 83u8, 246u8, 251u8, 47u8, 147u8,
                            83u8, 154u8, 36u8, 63u8, 34u8, 209u8, 134u8, 71u8, 210u8, 250u8,
                        ],
                    )
                }
                #[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
                #[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
                #[doc = " this list."]
                pub fn class_locks_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u16,
                        ::core::primitive::u128,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "ClassLocksFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            74u8, 74u8, 8u8, 82u8, 215u8, 61u8, 13u8, 9u8, 44u8, 222u8, 33u8,
                            245u8, 195u8, 124u8, 6u8, 174u8, 65u8, 245u8, 71u8, 42u8, 47u8, 46u8,
                            164u8, 231u8, 11u8, 245u8, 115u8, 207u8, 209u8, 137u8, 90u8, 6u8,
                        ],
                    )
                }
                #[doc = " The voting classes which have a non-zero lock requirement and the lock amounts which they"]
                #[doc = " require. The actual amount locked on behalf of this pallet should always be the maximum of"]
                #[doc = " this list."]
                pub fn class_locks_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u16,
                        ::core::primitive::u128,
                    )>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "ConvictionVoting",
                        "ClassLocksFor",
                        Vec::new(),
                        [
                            74u8, 74u8, 8u8, 82u8, 215u8, 61u8, 13u8, 9u8, 44u8, 222u8, 33u8,
                            245u8, 195u8, 124u8, 6u8, 174u8, 65u8, 245u8, 71u8, 42u8, 47u8, 46u8,
                            164u8, 231u8, 11u8, 245u8, 115u8, 207u8, 209u8, 137u8, 90u8, 6u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum number of concurrent votes an account may have."]
                #[doc = ""]
                #[doc = " Also used to compute weight, an overly large value can lead to extrinsics with large"]
                #[doc = " weight estimation: see `delegate` for instance."]
                pub fn max_votes(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ConvictionVoting",
                        "MaxVotes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The minimum period of vote locking."]
                #[doc = ""]
                #[doc = " It should be no shorter than enactment period to ensure that in the case of an approval,"]
                #[doc = " those successful voters are locked into the consequences that their votes entail."]
                pub fn vote_locking_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "ConvictionVoting",
                        "VoteLockingPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod whitelist {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_whitelist::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_whitelist::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WhitelistCall {
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for WhitelistCall {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "whitelist_call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveWhitelistedCall {
                    pub call_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveWhitelistedCall {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "remove_whitelisted_call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchWhitelistedCall {
                    pub call_hash: ::subxt::utils::H256,
                    pub call_encoded_len: ::core::primitive::u32,
                    pub call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchWhitelistedCall {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "dispatch_whitelisted_call";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchWhitelistedCallWithPreimage {
                    pub call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchWhitelistedCallWithPreimage {
                    const PALLET: &'static str = "Whitelist";
                    const CALL: &'static str = "dispatch_whitelisted_call_with_preimage";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::whitelist_call`]."]
                pub fn whitelist_call(
                    &self,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::WhitelistCall> {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "whitelist_call",
                        types::WhitelistCall { call_hash },
                        [
                            121u8, 165u8, 49u8, 37u8, 127u8, 38u8, 126u8, 213u8, 115u8, 148u8,
                            122u8, 211u8, 24u8, 91u8, 147u8, 27u8, 87u8, 210u8, 84u8, 104u8, 229u8,
                            155u8, 133u8, 30u8, 34u8, 249u8, 107u8, 110u8, 31u8, 191u8, 128u8,
                            28u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_whitelisted_call`]."]
                pub fn remove_whitelisted_call(
                    &self,
                    call_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::RemoveWhitelistedCall> {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "remove_whitelisted_call",
                        types::RemoveWhitelistedCall { call_hash },
                        [
                            30u8, 47u8, 13u8, 231u8, 165u8, 219u8, 246u8, 210u8, 11u8, 38u8, 219u8,
                            218u8, 151u8, 226u8, 101u8, 175u8, 0u8, 239u8, 35u8, 46u8, 156u8,
                            104u8, 145u8, 173u8, 105u8, 100u8, 21u8, 189u8, 123u8, 227u8, 196u8,
                            40u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::dispatch_whitelisted_call`]."]
                pub fn dispatch_whitelisted_call(
                    &self,
                    call_hash: ::subxt::utils::H256,
                    call_encoded_len: ::core::primitive::u32,
                    call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::DispatchWhitelistedCall> {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "dispatch_whitelisted_call",
                        types::DispatchWhitelistedCall {
                            call_hash,
                            call_encoded_len,
                            call_weight_witness,
                        },
                        [
                            10u8, 3u8, 194u8, 156u8, 211u8, 102u8, 188u8, 53u8, 232u8, 129u8,
                            199u8, 113u8, 190u8, 88u8, 202u8, 126u8, 210u8, 144u8, 185u8, 169u8,
                            233u8, 114u8, 237u8, 99u8, 244u8, 41u8, 35u8, 198u8, 93u8, 234u8,
                            200u8, 20u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."]
                pub fn dispatch_whitelisted_call_with_preimage(
                    &self,
                    call: runtime_types::kitchensink_runtime::RuntimeCall,
                ) -> ::subxt::tx::Payload<types::DispatchWhitelistedCallWithPreimage>
                {
                    ::subxt::tx::Payload::new_static(
                        "Whitelist",
                        "dispatch_whitelisted_call_with_preimage",
                        types::DispatchWhitelistedCallWithPreimage {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            127u8, 147u8, 180u8, 100u8, 203u8, 203u8, 62u8, 195u8, 201u8, 68u8,
                            3u8, 245u8, 12u8, 30u8, 63u8, 46u8, 96u8, 116u8, 63u8, 223u8, 87u8,
                            212u8, 153u8, 142u8, 31u8, 112u8, 106u8, 131u8, 52u8, 166u8, 230u8,
                            188u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_whitelist::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CallWhitelisted {
                pub call_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for CallWhitelisted {
                const PALLET: &'static str = "Whitelist";
                const EVENT: &'static str = "CallWhitelisted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WhitelistedCallRemoved {
                pub call_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for WhitelistedCallRemoved {
                const PALLET: &'static str = "Whitelist";
                const EVENT: &'static str = "WhitelistedCallRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WhitelistedCallDispatched {
                pub call_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<
                    runtime_types::frame_support::dispatch::PostDispatchInfo,
                    runtime_types::sp_runtime::DispatchErrorWithPostInfo<
                        runtime_types::frame_support::dispatch::PostDispatchInfo,
                    >,
                >,
            }
            impl ::subxt::events::StaticEvent for WhitelistedCallDispatched {
                const PALLET: &'static str = "Whitelist";
                const EVENT: &'static str = "WhitelistedCallDispatched";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn whitelisted_call(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Whitelist",
                        "WhitelistedCall",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
                            87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
                            167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
                        ],
                    )
                }
                pub fn whitelisted_call_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    (),
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Whitelist",
                        "WhitelistedCall",
                        Vec::new(),
                        [
                            82u8, 208u8, 214u8, 72u8, 225u8, 35u8, 51u8, 212u8, 25u8, 138u8, 30u8,
                            87u8, 54u8, 232u8, 72u8, 132u8, 4u8, 9u8, 28u8, 143u8, 251u8, 106u8,
                            167u8, 218u8, 130u8, 185u8, 253u8, 185u8, 113u8, 154u8, 202u8, 66u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod alliance_motion {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_collective::pallet::Error3;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_collective::pallet::Call3;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMembers {
                    pub new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    pub old_count: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "AllianceMotion";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Execute {
                    pub proposal:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "AllianceMotion";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "AllianceMotion";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "AllianceMotion";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisapproveProposal {
                    pub proposal_hash: ::subxt::utils::H256,
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "AllianceMotion";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "AllianceMotion";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::set_members`]."]
                pub fn set_members(
                    &self,
                    new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    prime: ::core::option::Option<::subxt::utils::AccountId32>,
                    old_count: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "AllianceMotion",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            141u8, 113u8, 137u8, 46u8, 75u8, 22u8, 143u8, 204u8, 50u8, 24u8, 137u8,
                            25u8, 226u8, 166u8, 121u8, 161u8, 54u8, 144u8, 12u8, 145u8, 157u8,
                            153u8, 47u8, 144u8, 94u8, 34u8, 217u8, 115u8, 125u8, 152u8, 110u8,
                            28u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::execute`]."]
                pub fn execute(
                    &self,
                    proposal: runtime_types::kitchensink_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "AllianceMotion",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            94u8, 13u8, 108u8, 185u8, 65u8, 92u8, 34u8, 235u8, 159u8, 28u8, 102u8,
                            243u8, 68u8, 73u8, 253u8, 150u8, 173u8, 179u8, 189u8, 177u8, 137u8,
                            175u8, 100u8, 124u8, 18u8, 137u8, 146u8, 55u8, 16u8, 135u8, 197u8,
                            49u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::propose`]."]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::kitchensink_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "AllianceMotion",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            161u8, 6u8, 22u8, 64u8, 25u8, 139u8, 127u8, 194u8, 57u8, 203u8, 95u8,
                            134u8, 53u8, 214u8, 113u8, 194u8, 149u8, 5u8, 221u8, 198u8, 32u8, 90u8,
                            249u8, 40u8, 96u8, 123u8, 178u8, 43u8, 80u8, 9u8, 32u8, 71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "AllianceMotion",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::disapprove_proposal`]."]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "AllianceMotion",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close`]."]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "AllianceMotion",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            189u8, 149u8, 125u8, 63u8, 39u8, 201u8, 247u8, 4u8, 220u8, 74u8, 78u8,
                            14u8, 113u8, 163u8, 1u8, 159u8, 81u8, 248u8, 141u8, 111u8, 34u8, 243u8,
                            67u8, 70u8, 60u8, 92u8, 47u8, 70u8, 66u8, 246u8, 236u8, 153u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_collective::pallet::Event3;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_index: ::core::primitive::u32,
                pub proposal_hash: ::subxt::utils::H256,
                pub threshold: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "AllianceMotion";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: ::subxt::utils::AccountId32,
                pub proposal_hash: ::subxt::utils::H256,
                pub voted: ::core::primitive::bool,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "AllianceMotion";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "AllianceMotion";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "AllianceMotion";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "AllianceMotion";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: ::subxt::utils::H256,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "AllianceMotion";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: ::subxt::utils::H256,
                pub yes: ::core::primitive::u32,
                pub no: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "AllianceMotion";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::H256,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::RuntimeCall,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            215u8, 93u8, 134u8, 156u8, 174u8, 44u8, 42u8, 149u8, 212u8, 30u8, 9u8,
                            38u8, 19u8, 125u8, 94u8, 85u8, 247u8, 38u8, 124u8, 229u8, 210u8, 75u8,
                            2u8, 241u8, 252u8, 242u8, 186u8, 190u8, 41u8, 224u8, 62u8, 113u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::kitchensink_runtime::RuntimeCall,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "ProposalOf",
                        Vec::new(),
                        [
                            215u8, 93u8, 134u8, 156u8, 174u8, 44u8, 42u8, 149u8, 212u8, 30u8, 9u8,
                            38u8, 19u8, 125u8, 94u8, 85u8, 247u8, 38u8, 124u8, 229u8, 210u8, 75u8,
                            2u8, 241u8, 252u8, 242u8, 186u8, 190u8, 41u8, 224u8, 62u8, 113u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::H256>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            56u8, 192u8, 111u8, 180u8, 253u8, 5u8, 232u8, 126u8, 177u8, 48u8,
                            135u8, 39u8, 89u8, 71u8, 62u8, 239u8, 216u8, 17u8, 64u8, 82u8, 130u8,
                            236u8, 96u8, 89u8, 167u8, 2u8, 118u8, 113u8, 63u8, 176u8, 124u8, 73u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "Voting",
                        Vec::new(),
                        [
                            56u8, 192u8, 111u8, 180u8, 253u8, 5u8, 232u8, 126u8, 177u8, 48u8,
                            135u8, 39u8, 89u8, 71u8, 62u8, 239u8, 216u8, 17u8, 64u8, 82u8, 130u8,
                            236u8, 96u8, 89u8, 167u8, 2u8, 118u8, 113u8, 63u8, 176u8, 124u8, 73u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::subxt::utils::AccountId32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "Members",
                        vec![],
                        [
                            16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
                            81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
                            90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AllianceMotion",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "AllianceMotion",
                        "MaxProposalWeight",
                        [
                            222u8, 183u8, 203u8, 169u8, 31u8, 134u8, 28u8, 12u8, 47u8, 140u8, 71u8,
                            74u8, 61u8, 55u8, 71u8, 236u8, 215u8, 83u8, 28u8, 70u8, 45u8, 128u8,
                            184u8, 57u8, 101u8, 83u8, 42u8, 165u8, 34u8, 155u8, 64u8, 145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod alliance {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_alliance::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_alliance::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: ::core::primitive::u32,
                    pub proposal:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub proposal: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub approve: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InitMembers {
                    pub fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    pub allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for InitMembers {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "init_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Disband {
                    pub witness: runtime_types::pallet_alliance::types::DisbandWitness,
                }
                impl ::subxt::blocks::StaticExtrinsic for Disband {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "disband";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetRule {
                    pub rule: runtime_types::pallet_alliance::types::Cid,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetRule {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "set_rule";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Announce {
                    pub announcement: runtime_types::pallet_alliance::types::Cid,
                }
                impl ::subxt::blocks::StaticExtrinsic for Announce {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "announce";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveAnnouncement {
                    pub announcement: runtime_types::pallet_alliance::types::Cid,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveAnnouncement {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "remove_announcement";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct JoinAlliance;
                impl ::subxt::blocks::StaticExtrinsic for JoinAlliance {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "join_alliance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NominateAlly {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for NominateAlly {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "nominate_ally";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ElevateAlly {
                    pub ally: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for ElevateAlly {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "elevate_ally";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct GiveRetirementNotice;
                impl ::subxt::blocks::StaticExtrinsic for GiveRetirementNotice {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "give_retirement_notice";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Retire;
                impl ::subxt::blocks::StaticExtrinsic for Retire {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "retire";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KickMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for KickMember {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "kick_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddUnscrupulousItems {
                    pub items: ::std::vec::Vec<
                        runtime_types::pallet_alliance::UnscrupulousItem<
                            ::subxt::utils::AccountId32,
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddUnscrupulousItems {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "add_unscrupulous_items";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveUnscrupulousItems {
                    pub items: ::std::vec::Vec<
                        runtime_types::pallet_alliance::UnscrupulousItem<
                            ::subxt::utils::AccountId32,
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveUnscrupulousItems {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "remove_unscrupulous_items";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Close {
                    pub proposal_hash: ::subxt::utils::H256,
                    #[codec(compact)]
                    pub index: ::core::primitive::u32,
                    pub proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    #[codec(compact)]
                    pub length_bound: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "close";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AbdicateFellowStatus;
                impl ::subxt::blocks::StaticExtrinsic for AbdicateFellowStatus {
                    const PALLET: &'static str = "Alliance";
                    const CALL: &'static str = "abdicate_fellow_status";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::propose`]."]
                pub fn propose(
                    &self,
                    threshold: ::core::primitive::u32,
                    proposal: runtime_types::kitchensink_runtime::RuntimeCall,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            161u8, 6u8, 22u8, 64u8, 25u8, 139u8, 127u8, 194u8, 57u8, 203u8, 95u8,
                            134u8, 53u8, 214u8, 113u8, 194u8, 149u8, 5u8, 221u8, 198u8, 32u8, 90u8,
                            249u8, 40u8, 96u8, 123u8, 178u8, 43u8, 80u8, 9u8, 32u8, 71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    proposal: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    approve: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::init_members`]."]
                pub fn init_members(
                    &self,
                    fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<types::InitMembers> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "init_members",
                        types::InitMembers { fellows, allies },
                        [
                            99u8, 242u8, 195u8, 92u8, 106u8, 126u8, 70u8, 124u8, 219u8, 85u8, 38u8,
                            119u8, 107u8, 51u8, 202u8, 119u8, 8u8, 70u8, 88u8, 209u8, 68u8, 244u8,
                            180u8, 16u8, 191u8, 147u8, 225u8, 101u8, 41u8, 113u8, 218u8, 87u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::disband`]."]
                pub fn disband(
                    &self,
                    witness: runtime_types::pallet_alliance::types::DisbandWitness,
                ) -> ::subxt::tx::Payload<types::Disband> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "disband",
                        types::Disband { witness },
                        [
                            70u8, 208u8, 14u8, 192u8, 2u8, 49u8, 213u8, 157u8, 139u8, 64u8, 149u8,
                            22u8, 167u8, 136u8, 125u8, 110u8, 4u8, 236u8, 25u8, 53u8, 106u8, 126u8,
                            72u8, 127u8, 192u8, 220u8, 27u8, 111u8, 9u8, 165u8, 0u8, 204u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_rule`]."]
                pub fn set_rule(
                    &self,
                    rule: runtime_types::pallet_alliance::types::Cid,
                ) -> ::subxt::tx::Payload<types::SetRule> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "set_rule",
                        types::SetRule { rule },
                        [
                            68u8, 93u8, 4u8, 117u8, 214u8, 143u8, 91u8, 121u8, 71u8, 55u8, 86u8,
                            246u8, 39u8, 125u8, 103u8, 61u8, 144u8, 125u8, 73u8, 115u8, 253u8,
                            142u8, 158u8, 127u8, 187u8, 67u8, 209u8, 158u8, 75u8, 232u8, 168u8,
                            88u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::announce`]."]
                pub fn announce(
                    &self,
                    announcement: runtime_types::pallet_alliance::types::Cid,
                ) -> ::subxt::tx::Payload<types::Announce> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "announce",
                        types::Announce { announcement },
                        [
                            120u8, 115u8, 19u8, 151u8, 84u8, 75u8, 196u8, 114u8, 6u8, 147u8, 226u8,
                            161u8, 8u8, 226u8, 179u8, 217u8, 80u8, 93u8, 46u8, 42u8, 54u8, 198u8,
                            128u8, 160u8, 6u8, 139u8, 47u8, 59u8, 70u8, 152u8, 241u8, 107u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_announcement`]."]
                pub fn remove_announcement(
                    &self,
                    announcement: runtime_types::pallet_alliance::types::Cid,
                ) -> ::subxt::tx::Payload<types::RemoveAnnouncement> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "remove_announcement",
                        types::RemoveAnnouncement { announcement },
                        [
                            176u8, 4u8, 64u8, 205u8, 98u8, 230u8, 192u8, 75u8, 231u8, 58u8, 145u8,
                            111u8, 231u8, 233u8, 234u8, 94u8, 136u8, 179u8, 26u8, 236u8, 202u8,
                            94u8, 35u8, 63u8, 105u8, 148u8, 116u8, 246u8, 6u8, 208u8, 137u8, 211u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::join_alliance`]."]
                pub fn join_alliance(&self) -> ::subxt::tx::Payload<types::JoinAlliance> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "join_alliance",
                        types::JoinAlliance {},
                        [
                            36u8, 214u8, 57u8, 110u8, 139u8, 196u8, 1u8, 240u8, 103u8, 108u8,
                            165u8, 131u8, 35u8, 91u8, 232u8, 175u8, 196u8, 218u8, 145u8, 211u8,
                            201u8, 179u8, 162u8, 223u8, 212u8, 141u8, 35u8, 75u8, 154u8, 160u8,
                            93u8, 28u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::nominate_ally`]."]
                pub fn nominate_ally(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::NominateAlly> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "nominate_ally",
                        types::NominateAlly { who },
                        [
                            209u8, 182u8, 30u8, 145u8, 252u8, 36u8, 50u8, 65u8, 10u8, 240u8, 112u8,
                            253u8, 135u8, 196u8, 77u8, 134u8, 104u8, 38u8, 45u8, 155u8, 106u8,
                            195u8, 199u8, 133u8, 131u8, 212u8, 157u8, 8u8, 176u8, 194u8, 148u8,
                            9u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::elevate_ally`]."]
                pub fn elevate_ally(
                    &self,
                    ally: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::ElevateAlly> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "elevate_ally",
                        types::ElevateAlly { ally },
                        [
                            133u8, 115u8, 205u8, 57u8, 237u8, 196u8, 113u8, 14u8, 220u8, 144u8,
                            179u8, 176u8, 78u8, 28u8, 63u8, 245u8, 176u8, 185u8, 0u8, 234u8, 51u8,
                            228u8, 142u8, 168u8, 72u8, 140u8, 15u8, 251u8, 71u8, 131u8, 75u8, 99u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::give_retirement_notice`]."]
                pub fn give_retirement_notice(
                    &self,
                ) -> ::subxt::tx::Payload<types::GiveRetirementNotice> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "give_retirement_notice",
                        types::GiveRetirementNotice {},
                        [
                            64u8, 88u8, 231u8, 20u8, 74u8, 126u8, 6u8, 140u8, 18u8, 170u8, 156u8,
                            231u8, 214u8, 97u8, 196u8, 137u8, 137u8, 171u8, 255u8, 149u8, 105u8,
                            35u8, 88u8, 226u8, 179u8, 177u8, 217u8, 19u8, 194u8, 129u8, 158u8,
                            29u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::retire`]."]
                pub fn retire(&self) -> ::subxt::tx::Payload<types::Retire> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "retire",
                        types::Retire {},
                        [
                            178u8, 214u8, 7u8, 209u8, 147u8, 125u8, 63u8, 41u8, 152u8, 157u8, 45u8,
                            113u8, 185u8, 45u8, 157u8, 76u8, 62u8, 106u8, 103u8, 7u8, 128u8, 44u8,
                            71u8, 224u8, 108u8, 224u8, 146u8, 226u8, 87u8, 146u8, 169u8, 194u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kick_member`]."]
                pub fn kick_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::KickMember> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "kick_member",
                        types::KickMember { who },
                        [
                            171u8, 155u8, 243u8, 77u8, 115u8, 91u8, 184u8, 69u8, 50u8, 93u8, 163u8,
                            85u8, 109u8, 57u8, 106u8, 26u8, 108u8, 80u8, 174u8, 162u8, 56u8, 98u8,
                            7u8, 205u8, 96u8, 102u8, 61u8, 77u8, 42u8, 21u8, 113u8, 186u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::add_unscrupulous_items`]."]
                pub fn add_unscrupulous_items(
                    &self,
                    items: ::std::vec::Vec<
                        runtime_types::pallet_alliance::UnscrupulousItem<
                            ::subxt::utils::AccountId32,
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::AddUnscrupulousItems> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "add_unscrupulous_items",
                        types::AddUnscrupulousItems { items },
                        [
                            86u8, 25u8, 16u8, 226u8, 120u8, 0u8, 2u8, 171u8, 160u8, 37u8, 119u8,
                            110u8, 70u8, 14u8, 4u8, 117u8, 253u8, 93u8, 27u8, 201u8, 9u8, 246u8,
                            185u8, 96u8, 3u8, 68u8, 57u8, 202u8, 88u8, 217u8, 98u8, 238u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_unscrupulous_items`]."]
                pub fn remove_unscrupulous_items(
                    &self,
                    items: ::std::vec::Vec<
                        runtime_types::pallet_alliance::UnscrupulousItem<
                            ::subxt::utils::AccountId32,
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    >,
                ) -> ::subxt::tx::Payload<types::RemoveUnscrupulousItems> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "remove_unscrupulous_items",
                        types::RemoveUnscrupulousItems { items },
                        [
                            201u8, 173u8, 43u8, 226u8, 195u8, 244u8, 87u8, 156u8, 131u8, 90u8,
                            151u8, 203u8, 177u8, 13u8, 157u8, 39u8, 178u8, 187u8, 110u8, 195u8,
                            222u8, 18u8, 44u8, 134u8, 69u8, 126u8, 210u8, 140u8, 228u8, 226u8,
                            239u8, 250u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::close`]."]
                pub fn close(
                    &self,
                    proposal_hash: ::subxt::utils::H256,
                    index: ::core::primitive::u32,
                    proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                    length_bound: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            189u8, 149u8, 125u8, 63u8, 39u8, 201u8, 247u8, 4u8, 220u8, 74u8, 78u8,
                            14u8, 113u8, 163u8, 1u8, 159u8, 81u8, 248u8, 141u8, 111u8, 34u8, 243u8,
                            67u8, 70u8, 60u8, 92u8, 47u8, 70u8, 66u8, 246u8, 236u8, 153u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::abdicate_fellow_status`]."]
                pub fn abdicate_fellow_status(
                    &self,
                ) -> ::subxt::tx::Payload<types::AbdicateFellowStatus> {
                    ::subxt::tx::Payload::new_static(
                        "Alliance",
                        "abdicate_fellow_status",
                        types::AbdicateFellowStatus {},
                        [
                            222u8, 111u8, 165u8, 181u8, 174u8, 58u8, 113u8, 24u8, 125u8, 96u8,
                            72u8, 242u8, 191u8, 226u8, 107u8, 176u8, 191u8, 177u8, 89u8, 223u8,
                            84u8, 185u8, 208u8, 215u8, 145u8, 216u8, 186u8, 235u8, 225u8, 78u8,
                            128u8, 214u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_alliance::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new rule has been set."]
            pub struct NewRuleSet {
                pub rule: runtime_types::pallet_alliance::types::Cid,
            }
            impl ::subxt::events::StaticEvent for NewRuleSet {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "NewRuleSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new announcement has been proposed."]
            pub struct Announced {
                pub announcement: runtime_types::pallet_alliance::types::Cid,
            }
            impl ::subxt::events::StaticEvent for Announced {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "Announced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An on-chain announcement has been removed."]
            pub struct AnnouncementRemoved {
                pub announcement: runtime_types::pallet_alliance::types::Cid,
            }
            impl ::subxt::events::StaticEvent for AnnouncementRemoved {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "AnnouncementRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some accounts have been initialized as members (fellows/allies)."]
            pub struct MembersInitialized {
                pub fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
                pub allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for MembersInitialized {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "MembersInitialized";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account has been added as an Ally and reserved its deposit."]
            pub struct NewAllyJoined {
                pub ally: ::subxt::utils::AccountId32,
                pub nominator: ::core::option::Option<::subxt::utils::AccountId32>,
                pub reserved: ::core::option::Option<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for NewAllyJoined {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "NewAllyJoined";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An ally has been elevated to Fellow."]
            pub struct AllyElevated {
                pub ally: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for AllyElevated {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "AllyElevated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member gave retirement notice and their retirement period started."]
            pub struct MemberRetirementPeriodStarted {
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberRetirementPeriodStarted {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "MemberRetirementPeriodStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has retired with its deposit unreserved."]
            pub struct MemberRetired {
                pub member: ::subxt::utils::AccountId32,
                pub unreserved: ::core::option::Option<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for MemberRetired {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "MemberRetired";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has been kicked out with its deposit slashed."]
            pub struct MemberKicked {
                pub member: ::subxt::utils::AccountId32,
                pub slashed: ::core::option::Option<::core::primitive::u128>,
            }
            impl ::subxt::events::StaticEvent for MemberKicked {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "MemberKicked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Accounts or websites have been added into the list of unscrupulous items."]
            pub struct UnscrupulousItemAdded {
                pub items: ::std::vec::Vec<
                    runtime_types::pallet_alliance::UnscrupulousItem<
                        ::subxt::utils::AccountId32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                >,
            }
            impl ::subxt::events::StaticEvent for UnscrupulousItemAdded {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "UnscrupulousItemAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Accounts or websites have been removed from the list of unscrupulous items."]
            pub struct UnscrupulousItemRemoved {
                pub items: ::std::vec::Vec<
                    runtime_types::pallet_alliance::UnscrupulousItem<
                        ::subxt::utils::AccountId32,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                >,
            }
            impl ::subxt::events::StaticEvent for UnscrupulousItemRemoved {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "UnscrupulousItemRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Alliance disbanded. Includes number deleted members and unreserved deposits."]
            pub struct AllianceDisbanded {
                pub fellow_members: ::core::primitive::u32,
                pub ally_members: ::core::primitive::u32,
                pub unreserved: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for AllianceDisbanded {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "AllianceDisbanded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A Fellow abdicated their voting rights. They are now an Ally."]
            pub struct FellowAbdicated {
                pub fellow: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for FellowAbdicated {
                const PALLET: &'static str = "Alliance";
                const EVENT: &'static str = "FellowAbdicated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The IPFS CID of the alliance rule."]
                #[doc = " Fellows can propose a new rule with a super-majority."]
                pub fn rule(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_alliance::types::Cid,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "Rule",
                        vec![],
                        [
                            194u8, 209u8, 89u8, 123u8, 34u8, 154u8, 250u8, 229u8, 31u8, 167u8,
                            29u8, 184u8, 3u8, 59u8, 154u8, 196u8, 82u8, 94u8, 119u8, 11u8, 169u8,
                            168u8, 37u8, 107u8, 240u8, 91u8, 254u8, 36u8, 192u8, 226u8, 78u8, 46u8,
                        ],
                    )
                }
                #[doc = " The current IPFS CIDs of any announcements."]
                pub fn announcements(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_alliance::types::Cid,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "Announcements",
                        vec![],
                        [
                            194u8, 118u8, 111u8, 202u8, 217u8, 106u8, 131u8, 155u8, 129u8, 15u8,
                            48u8, 64u8, 113u8, 194u8, 128u8, 72u8, 194u8, 103u8, 179u8, 124u8,
                            86u8, 42u8, 25u8, 115u8, 211u8, 208u8, 9u8, 23u8, 15u8, 141u8, 73u8,
                            129u8,
                        ],
                    )
                }
                #[doc = " Maps members to their candidacy deposit."]
                pub fn deposit_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "DepositOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            60u8, 18u8, 84u8, 244u8, 92u8, 183u8, 95u8, 105u8, 127u8, 249u8, 175u8,
                            206u8, 128u8, 154u8, 170u8, 202u8, 17u8, 176u8, 133u8, 169u8, 118u8,
                            28u8, 36u8, 252u8, 86u8, 22u8, 150u8, 158u8, 186u8, 161u8, 183u8, 54u8,
                        ],
                    )
                }
                #[doc = " Maps members to their candidacy deposit."]
                pub fn deposit_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "DepositOf",
                        Vec::new(),
                        [
                            60u8, 18u8, 84u8, 244u8, 92u8, 183u8, 95u8, 105u8, 127u8, 249u8, 175u8,
                            206u8, 128u8, 154u8, 170u8, 202u8, 17u8, 176u8, 133u8, 169u8, 118u8,
                            28u8, 36u8, 252u8, 86u8, 22u8, 150u8, 158u8, 186u8, 161u8, 183u8, 54u8,
                        ],
                    )
                }
                #[doc = " Maps member type to members of each type."]
                pub fn members(
                    &self,
                    _0: impl ::std::borrow::Borrow<runtime_types::pallet_alliance::MemberRole>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "Members",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            65u8, 195u8, 17u8, 5u8, 123u8, 52u8, 72u8, 42u8, 38u8, 151u8, 197u8,
                            26u8, 99u8, 9u8, 242u8, 248u8, 101u8, 52u8, 41u8, 52u8, 194u8, 212u8,
                            255u8, 162u8, 99u8, 58u8, 6u8, 187u8, 76u8, 199u8, 185u8, 190u8,
                        ],
                    )
                }
                #[doc = " Maps member type to members of each type."]
                pub fn members_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::AccountId32,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "Members",
                        Vec::new(),
                        [
                            65u8, 195u8, 17u8, 5u8, 123u8, 52u8, 72u8, 42u8, 38u8, 151u8, 197u8,
                            26u8, 99u8, 9u8, 242u8, 248u8, 101u8, 52u8, 41u8, 52u8, 194u8, 212u8,
                            255u8, 162u8, 99u8, 58u8, 6u8, 187u8, 76u8, 199u8, 185u8, 190u8,
                        ],
                    )
                }
                #[doc = " A set of members who gave a retirement notice. They can retire after the end of retirement"]
                #[doc = " period stored as a future block number."]
                pub fn retiring_members(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "RetiringMembers",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            227u8, 240u8, 94u8, 17u8, 90u8, 2u8, 4u8, 68u8, 194u8, 255u8, 208u8,
                            153u8, 48u8, 6u8, 193u8, 55u8, 138u8, 82u8, 58u8, 20u8, 248u8, 29u8,
                            222u8, 194u8, 110u8, 244u8, 142u8, 252u8, 88u8, 63u8, 244u8, 122u8,
                        ],
                    )
                }
                #[doc = " A set of members who gave a retirement notice. They can retire after the end of retirement"]
                #[doc = " period stored as a future block number."]
                pub fn retiring_members_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "RetiringMembers",
                        Vec::new(),
                        [
                            227u8, 240u8, 94u8, 17u8, 90u8, 2u8, 4u8, 68u8, 194u8, 255u8, 208u8,
                            153u8, 48u8, 6u8, 193u8, 55u8, 138u8, 82u8, 58u8, 20u8, 248u8, 29u8,
                            222u8, 194u8, 110u8, 244u8, 142u8, 252u8, 88u8, 63u8, 244u8, 122u8,
                        ],
                    )
                }
                #[doc = " The current list of accounts deemed unscrupulous. These accounts non grata cannot submit"]
                #[doc = " candidacy."]
                pub fn unscrupulous_accounts(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::AccountId32,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "UnscrupulousAccounts",
                        vec![],
                        [
                            101u8, 158u8, 129u8, 171u8, 11u8, 54u8, 198u8, 237u8, 34u8, 62u8, 83u8,
                            132u8, 153u8, 218u8, 192u8, 13u8, 52u8, 112u8, 136u8, 124u8, 149u8,
                            48u8, 44u8, 229u8, 147u8, 178u8, 134u8, 3u8, 132u8, 102u8, 97u8, 12u8,
                        ],
                    )
                }
                #[doc = " The current list of websites deemed unscrupulous."]
                pub fn unscrupulous_websites(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Alliance",
                        "UnscrupulousWebsites",
                        vec![],
                        [
                            7u8, 2u8, 159u8, 212u8, 74u8, 175u8, 0u8, 151u8, 215u8, 173u8, 52u8,
                            111u8, 212u8, 252u8, 68u8, 13u8, 190u8, 22u8, 50u8, 154u8, 29u8, 73u8,
                            49u8, 126u8, 191u8, 56u8, 110u8, 92u8, 238u8, 118u8, 102u8, 87u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum number of the unscrupulous items supported by the pallet."]
                pub fn max_unscrupulous_items(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Alliance",
                        "MaxUnscrupulousItems",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a website URL."]
                pub fn max_website_url_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Alliance",
                        "MaxWebsiteUrlLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The deposit required for submitting candidacy."]
                pub fn ally_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Alliance",
                        "AllyDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of announcements."]
                pub fn max_announcements_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Alliance",
                        "MaxAnnouncementsCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of members per member role."]
                pub fn max_members_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Alliance",
                        "MaxMembersCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod nomination_pools {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_nomination_pools::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_nomination_pools::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Join {
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                    pub pool_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Join {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "join";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BondExtra {
                    pub extra:
                        runtime_types::pallet_nomination_pools::BondExtra<::core::primitive::u128>,
                }
                impl ::subxt::blocks::StaticExtrinsic for BondExtra {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "bond_extra";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimPayout;
                impl ::subxt::blocks::StaticExtrinsic for ClaimPayout {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "claim_payout";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Unbond {
                    pub member_account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    #[codec(compact)]
                    pub unbonding_points: ::core::primitive::u128,
                }
                impl ::subxt::blocks::StaticExtrinsic for Unbond {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "unbond";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PoolWithdrawUnbonded {
                    pub pool_id: ::core::primitive::u32,
                    pub num_slashing_spans: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for PoolWithdrawUnbonded {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "pool_withdraw_unbonded";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WithdrawUnbonded {
                    pub member_account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub num_slashing_spans: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for WithdrawUnbonded {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "withdraw_unbonded";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Create {
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                    pub root: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub nominator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub bouncer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreateWithPoolId {
                    #[codec(compact)]
                    pub amount: ::core::primitive::u128,
                    pub root: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub nominator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub bouncer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub pool_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CreateWithPoolId {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "create_with_pool_id";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Nominate {
                    pub pool_id: ::core::primitive::u32,
                    pub validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
                }
                impl ::subxt::blocks::StaticExtrinsic for Nominate {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "nominate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetState {
                    pub pool_id: ::core::primitive::u32,
                    pub state: runtime_types::pallet_nomination_pools::PoolState,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetState {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "set_state";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub pool_id: ::core::primitive::u32,
                    pub metadata: ::std::vec::Vec<::core::primitive::u8>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "set_metadata";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetConfigs {
                    pub min_join_bond:
                        runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u128>,
                    pub min_create_bond:
                        runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u128>,
                    pub max_pools:
                        runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
                    pub max_members:
                        runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
                    pub max_members_per_pool:
                        runtime_types::pallet_nomination_pools::ConfigOp<::core::primitive::u32>,
                    pub global_max_commission: runtime_types::pallet_nomination_pools::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetConfigs {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "set_configs";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UpdateRoles {
                    pub pool_id: ::core::primitive::u32,
                    pub new_root: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::utils::AccountId32,
                    >,
                    pub new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::utils::AccountId32,
                    >,
                    pub new_bouncer: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::utils::AccountId32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for UpdateRoles {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "update_roles";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Chill {
                    pub pool_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Chill {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "chill";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BondExtraOther {
                    pub member: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub extra:
                        runtime_types::pallet_nomination_pools::BondExtra<::core::primitive::u128>,
                }
                impl ::subxt::blocks::StaticExtrinsic for BondExtraOther {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "bond_extra_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetClaimPermission {
                    pub permission: runtime_types::pallet_nomination_pools::ClaimPermission,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetClaimPermission {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "set_claim_permission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimPayoutOther {
                    pub other: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClaimPayoutOther {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "claim_payout_other";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCommission {
                    pub pool_id: ::core::primitive::u32,
                    pub new_commission: ::core::option::Option<(
                        runtime_types::sp_arithmetic::per_things::Perbill,
                        ::subxt::utils::AccountId32,
                    )>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCommission {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "set_commission";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCommissionMax {
                    pub pool_id: ::core::primitive::u32,
                    pub max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCommissionMax {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "set_commission_max";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCommissionChangeRate {
                    pub pool_id: ::core::primitive::u32,
                    pub change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCommissionChangeRate {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "set_commission_change_rate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClaimCommission {
                    pub pool_id: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ClaimCommission {
                    const PALLET: &'static str = "NominationPools";
                    const CALL: &'static str = "claim_commission";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::join`]."]
                pub fn join(
                    &self,
                    amount: ::core::primitive::u128,
                    pool_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Join> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "join",
                        types::Join { amount, pool_id },
                        [
                            9u8, 24u8, 209u8, 117u8, 242u8, 76u8, 192u8, 40u8, 196u8, 136u8, 158u8,
                            182u8, 117u8, 140u8, 164u8, 64u8, 184u8, 160u8, 146u8, 143u8, 173u8,
                            180u8, 6u8, 242u8, 203u8, 130u8, 41u8, 176u8, 158u8, 96u8, 94u8, 175u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::bond_extra`]."]
                pub fn bond_extra(
                    &self,
                    extra: runtime_types::pallet_nomination_pools::BondExtra<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<types::BondExtra> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "bond_extra",
                        types::BondExtra { extra },
                        [
                            149u8, 176u8, 102u8, 52u8, 76u8, 227u8, 61u8, 60u8, 109u8, 187u8, 40u8,
                            176u8, 163u8, 37u8, 10u8, 228u8, 164u8, 77u8, 155u8, 155u8, 14u8,
                            106u8, 5u8, 177u8, 176u8, 224u8, 163u8, 28u8, 66u8, 237u8, 186u8,
                            188u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_payout`]."]
                pub fn claim_payout(&self) -> ::subxt::tx::Payload<types::ClaimPayout> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "claim_payout",
                        types::ClaimPayout {},
                        [
                            28u8, 87u8, 180u8, 5u8, 69u8, 49u8, 121u8, 28u8, 34u8, 63u8, 78u8,
                            228u8, 223u8, 12u8, 171u8, 41u8, 181u8, 137u8, 145u8, 141u8, 198u8,
                            220u8, 5u8, 101u8, 173u8, 69u8, 222u8, 59u8, 111u8, 92u8, 182u8, 8u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::unbond`]."]
                pub fn unbond(
                    &self,
                    member_account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    unbonding_points: ::core::primitive::u128,
                ) -> ::subxt::tx::Payload<types::Unbond> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "unbond",
                        types::Unbond {
                            member_account,
                            unbonding_points,
                        },
                        [
                            230u8, 112u8, 85u8, 216u8, 164u8, 250u8, 5u8, 18u8, 50u8, 206u8, 194u8,
                            0u8, 167u8, 149u8, 220u8, 212u8, 138u8, 33u8, 117u8, 130u8, 47u8,
                            197u8, 113u8, 30u8, 84u8, 83u8, 1u8, 105u8, 58u8, 182u8, 44u8, 225u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::pool_withdraw_unbonded`]."]
                pub fn pool_withdraw_unbonded(
                    &self,
                    pool_id: ::core::primitive::u32,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::PoolWithdrawUnbonded> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "pool_withdraw_unbonded",
                        types::PoolWithdrawUnbonded {
                            pool_id,
                            num_slashing_spans,
                        },
                        [
                            234u8, 49u8, 43u8, 199u8, 55u8, 2u8, 252u8, 39u8, 147u8, 136u8, 34u8,
                            239u8, 116u8, 155u8, 129u8, 72u8, 83u8, 161u8, 90u8, 207u8, 1u8, 193u8,
                            254u8, 47u8, 40u8, 185u8, 67u8, 55u8, 238u8, 122u8, 140u8, 230u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::withdraw_unbonded`]."]
                pub fn withdraw_unbonded(
                    &self,
                    member_account: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    num_slashing_spans: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::WithdrawUnbonded> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "withdraw_unbonded",
                        types::WithdrawUnbonded {
                            member_account,
                            num_slashing_spans,
                        },
                        [
                            252u8, 38u8, 22u8, 98u8, 64u8, 133u8, 118u8, 62u8, 179u8, 226u8, 212u8,
                            186u8, 32u8, 227u8, 253u8, 119u8, 200u8, 53u8, 35u8, 193u8, 20u8, 64u8,
                            232u8, 35u8, 221u8, 37u8, 63u8, 10u8, 7u8, 250u8, 176u8, 238u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::create`]."]
                pub fn create(
                    &self,
                    amount: ::core::primitive::u128,
                    root: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    nominator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    bouncer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Create> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "create",
                        types::Create {
                            amount,
                            root,
                            nominator,
                            bouncer,
                        },
                        [
                            4u8, 111u8, 53u8, 212u8, 226u8, 159u8, 144u8, 191u8, 152u8, 252u8,
                            30u8, 169u8, 185u8, 150u8, 229u8, 234u8, 140u8, 46u8, 237u8, 197u8,
                            164u8, 233u8, 184u8, 60u8, 51u8, 184u8, 71u8, 40u8, 61u8, 140u8, 204u8,
                            100u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::create_with_pool_id`]."]
                pub fn create_with_pool_id(
                    &self,
                    amount: ::core::primitive::u128,
                    root: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    nominator: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    bouncer: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pool_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CreateWithPoolId> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "create_with_pool_id",
                        types::CreateWithPoolId {
                            amount,
                            root,
                            nominator,
                            bouncer,
                            pool_id,
                        },
                        [
                            102u8, 254u8, 178u8, 47u8, 79u8, 12u8, 230u8, 142u8, 226u8, 205u8,
                            25u8, 166u8, 133u8, 0u8, 172u8, 58u8, 75u8, 96u8, 71u8, 187u8, 237u8,
                            173u8, 156u8, 20u8, 78u8, 48u8, 62u8, 35u8, 130u8, 8u8, 117u8, 222u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::nominate`]."]
                pub fn nominate(
                    &self,
                    pool_id: ::core::primitive::u32,
                    validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
                ) -> ::subxt::tx::Payload<types::Nominate> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "nominate",
                        types::Nominate {
                            pool_id,
                            validators,
                        },
                        [
                            118u8, 80u8, 137u8, 47u8, 102u8, 9u8, 20u8, 136u8, 76u8, 164u8, 161u8,
                            114u8, 33u8, 159u8, 204u8, 49u8, 233u8, 199u8, 246u8, 67u8, 144u8,
                            169u8, 211u8, 67u8, 12u8, 68u8, 198u8, 149u8, 87u8, 62u8, 226u8, 72u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_state`]."]
                pub fn set_state(
                    &self,
                    pool_id: ::core::primitive::u32,
                    state: runtime_types::pallet_nomination_pools::PoolState,
                ) -> ::subxt::tx::Payload<types::SetState> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "set_state",
                        types::SetState { pool_id, state },
                        [
                            39u8, 221u8, 24u8, 65u8, 144u8, 230u8, 228u8, 24u8, 191u8, 53u8, 171u8,
                            148u8, 131u8, 45u8, 10u8, 22u8, 222u8, 240u8, 13u8, 87u8, 123u8, 182u8,
                            102u8, 26u8, 124u8, 205u8, 23u8, 31u8, 25u8, 43u8, 12u8, 140u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    pool_id: ::core::primitive::u32,
                    metadata: ::std::vec::Vec<::core::primitive::u8>,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "set_metadata",
                        types::SetMetadata { pool_id, metadata },
                        [
                            221u8, 189u8, 15u8, 232u8, 0u8, 49u8, 187u8, 67u8, 124u8, 26u8, 114u8,
                            191u8, 81u8, 14u8, 253u8, 75u8, 88u8, 182u8, 136u8, 18u8, 238u8, 119u8,
                            215u8, 248u8, 133u8, 160u8, 154u8, 193u8, 177u8, 140u8, 1u8, 16u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_configs`]."]
                pub fn set_configs(
                    &self,
                    min_join_bond: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u128,
                    >,
                    min_create_bond: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u128,
                    >,
                    max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u32,
                    >,
                    max_members: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u32,
                    >,
                    max_members_per_pool: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::core::primitive::u32,
                    >,
                    global_max_commission: runtime_types::pallet_nomination_pools::ConfigOp<
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    >,
                ) -> ::subxt::tx::Payload<types::SetConfigs> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "set_configs",
                        types::SetConfigs {
                            min_join_bond,
                            min_create_bond,
                            max_pools,
                            max_members,
                            max_members_per_pool,
                            global_max_commission,
                        },
                        [
                            60u8, 29u8, 13u8, 45u8, 37u8, 171u8, 129u8, 133u8, 127u8, 42u8, 104u8,
                            45u8, 29u8, 58u8, 209u8, 48u8, 119u8, 255u8, 86u8, 13u8, 243u8, 124u8,
                            57u8, 250u8, 156u8, 189u8, 59u8, 88u8, 64u8, 109u8, 219u8, 68u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::update_roles`]."]
                pub fn update_roles(
                    &self,
                    pool_id: ::core::primitive::u32,
                    new_root: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::utils::AccountId32,
                    >,
                    new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::utils::AccountId32,
                    >,
                    new_bouncer: runtime_types::pallet_nomination_pools::ConfigOp<
                        ::subxt::utils::AccountId32,
                    >,
                ) -> ::subxt::tx::Payload<types::UpdateRoles> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "update_roles",
                        types::UpdateRoles {
                            pool_id,
                            new_root,
                            new_nominator,
                            new_bouncer,
                        },
                        [
                            58u8, 51u8, 136u8, 162u8, 218u8, 195u8, 121u8, 6u8, 243u8, 69u8, 19u8,
                            130u8, 152u8, 180u8, 226u8, 28u8, 0u8, 218u8, 237u8, 56u8, 52u8, 139u8,
                            198u8, 155u8, 112u8, 165u8, 142u8, 44u8, 111u8, 197u8, 123u8, 246u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::chill`]."]
                pub fn chill(
                    &self,
                    pool_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Chill> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "chill",
                        types::Chill { pool_id },
                        [
                            65u8, 206u8, 54u8, 53u8, 37u8, 97u8, 161u8, 104u8, 62u8, 9u8, 93u8,
                            236u8, 61u8, 185u8, 204u8, 245u8, 234u8, 218u8, 213u8, 40u8, 154u8,
                            29u8, 244u8, 19u8, 207u8, 172u8, 142u8, 221u8, 38u8, 70u8, 39u8, 10u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::bond_extra_other`]."]
                pub fn bond_extra_other(
                    &self,
                    member: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    extra: runtime_types::pallet_nomination_pools::BondExtra<
                        ::core::primitive::u128,
                    >,
                ) -> ::subxt::tx::Payload<types::BondExtraOther> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "bond_extra_other",
                        types::BondExtraOther { member, extra },
                        [
                            217u8, 91u8, 160u8, 244u8, 122u8, 153u8, 236u8, 132u8, 197u8, 31u8,
                            124u8, 22u8, 89u8, 146u8, 173u8, 96u8, 167u8, 220u8, 91u8, 27u8, 230u8,
                            128u8, 222u8, 128u8, 97u8, 53u8, 226u8, 222u8, 165u8, 133u8, 54u8,
                            236u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_claim_permission`]."]
                pub fn set_claim_permission(
                    &self,
                    permission: runtime_types::pallet_nomination_pools::ClaimPermission,
                ) -> ::subxt::tx::Payload<types::SetClaimPermission> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "set_claim_permission",
                        types::SetClaimPermission { permission },
                        [
                            36u8, 137u8, 193u8, 200u8, 57u8, 46u8, 87u8, 236u8, 180u8, 170u8, 90u8,
                            99u8, 137u8, 123u8, 99u8, 197u8, 113u8, 119u8, 72u8, 153u8, 207u8,
                            189u8, 69u8, 89u8, 225u8, 115u8, 45u8, 32u8, 216u8, 43u8, 92u8, 135u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_payout_other`]."]
                pub fn claim_payout_other(
                    &self,
                    other: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::ClaimPayoutOther> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "claim_payout_other",
                        types::ClaimPayoutOther { other },
                        [
                            202u8, 130u8, 122u8, 10u8, 159u8, 181u8, 124u8, 215u8, 23u8, 85u8,
                            234u8, 178u8, 169u8, 41u8, 204u8, 226u8, 195u8, 69u8, 168u8, 88u8,
                            58u8, 15u8, 3u8, 227u8, 180u8, 183u8, 62u8, 224u8, 39u8, 218u8, 75u8,
                            166u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_commission`]."]
                pub fn set_commission(
                    &self,
                    pool_id: ::core::primitive::u32,
                    new_commission: ::core::option::Option<(
                        runtime_types::sp_arithmetic::per_things::Perbill,
                        ::subxt::utils::AccountId32,
                    )>,
                ) -> ::subxt::tx::Payload<types::SetCommission> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "set_commission",
                        types::SetCommission {
                            pool_id,
                            new_commission,
                        },
                        [
                            144u8, 94u8, 73u8, 69u8, 224u8, 158u8, 244u8, 77u8, 169u8, 219u8,
                            101u8, 41u8, 37u8, 211u8, 198u8, 32u8, 92u8, 108u8, 7u8, 27u8, 153u8,
                            37u8, 82u8, 174u8, 196u8, 176u8, 196u8, 181u8, 45u8, 81u8, 134u8,
                            162u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_commission_max`]."]
                pub fn set_commission_max(
                    &self,
                    pool_id: ::core::primitive::u32,
                    max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> ::subxt::tx::Payload<types::SetCommissionMax> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "set_commission_max",
                        types::SetCommissionMax {
                            pool_id,
                            max_commission,
                        },
                        [
                            180u8, 80u8, 204u8, 129u8, 141u8, 86u8, 45u8, 76u8, 224u8, 123u8,
                            212u8, 38u8, 224u8, 79u8, 41u8, 143u8, 237u8, 174u8, 126u8, 1u8, 215u8,
                            105u8, 50u8, 46u8, 151u8, 11u8, 118u8, 198u8, 183u8, 95u8, 47u8, 71u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_commission_change_rate`]."]
                pub fn set_commission_change_rate(
                    &self,
                    pool_id: ::core::primitive::u32,
                    change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::SetCommissionChangeRate> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "set_commission_change_rate",
                        types::SetCommissionChangeRate {
                            pool_id,
                            change_rate,
                        },
                        [
                            138u8, 30u8, 155u8, 127u8, 181u8, 99u8, 89u8, 138u8, 130u8, 53u8,
                            224u8, 96u8, 190u8, 14u8, 76u8, 244u8, 142u8, 50u8, 39u8, 245u8, 144u8,
                            87u8, 64u8, 206u8, 246u8, 225u8, 111u8, 197u8, 245u8, 182u8, 121u8,
                            56u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::claim_commission`]."]
                pub fn claim_commission(
                    &self,
                    pool_id: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ClaimCommission> {
                    ::subxt::tx::Payload::new_static(
                        "NominationPools",
                        "claim_commission",
                        types::ClaimCommission { pool_id },
                        [
                            51u8, 64u8, 163u8, 230u8, 2u8, 119u8, 68u8, 5u8, 154u8, 4u8, 84u8,
                            149u8, 9u8, 195u8, 173u8, 37u8, 98u8, 48u8, 188u8, 65u8, 81u8, 11u8,
                            64u8, 254u8, 126u8, 62u8, 29u8, 204u8, 92u8, 230u8, 240u8, 91u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events of this pallet."]
        pub type Event = runtime_types::pallet_nomination_pools::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A pool has been created."]
            pub struct Created {
                pub depositor: ::subxt::utils::AccountId32,
                pub pool_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Created {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has became bonded in a pool."]
            pub struct Bonded {
                pub member: ::subxt::utils::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub bonded: ::core::primitive::u128,
                pub joined: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for Bonded {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Bonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A payout has been made to a member."]
            pub struct PaidOut {
                pub member: ::subxt::utils::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub payout: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for PaidOut {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PaidOut";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has unbonded from their pool."]
            #[doc = ""]
            #[doc = "- `balance` is the corresponding balance of the number of points that has been"]
            #[doc = "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded"]
            #[doc = "  pool."]
            #[doc = "- `points` is the number of points that are issued as a result of `balance` being"]
            #[doc = "dissolved into the corresponding unbonding pool."]
            #[doc = "- `era` is the era in which the balance will be unbonded."]
            #[doc = "In the absence of slashing, these values will match. In the presence of slashing, the"]
            #[doc = "number of points that are issued in the unbonding pool will be less than the amount"]
            #[doc = "requested to be unbonded."]
            pub struct Unbonded {
                pub member: ::subxt::utils::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
                pub points: ::core::primitive::u128,
                pub era: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Unbonded {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Unbonded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has withdrawn from their pool."]
            #[doc = ""]
            #[doc = "The given number of `points` have been dissolved in return of `balance`."]
            #[doc = ""]
            #[doc = "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance"]
            #[doc = "will be 1."]
            pub struct Withdrawn {
                pub member: ::subxt::utils::AccountId32,
                pub pool_id: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
                pub points: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A pool has been destroyed."]
            pub struct Destroyed {
                pub pool_id: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Destroyed {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The state of a pool has changed"]
            pub struct StateChanged {
                pub pool_id: ::core::primitive::u32,
                pub new_state: runtime_types::pallet_nomination_pools::PoolState,
            }
            impl ::subxt::events::StaticEvent for StateChanged {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "StateChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member has been removed from a pool."]
            #[doc = ""]
            #[doc = "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."]
            pub struct MemberRemoved {
                pub pool_id: ::core::primitive::u32,
                pub member: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The roles of a pool have been updated to the given new roles. Note that the depositor"]
            #[doc = "can never change."]
            pub struct RolesUpdated {
                pub root: ::core::option::Option<::subxt::utils::AccountId32>,
                pub bouncer: ::core::option::Option<::subxt::utils::AccountId32>,
                pub nominator: ::core::option::Option<::subxt::utils::AccountId32>,
            }
            impl ::subxt::events::StaticEvent for RolesUpdated {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "RolesUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The active balance of pool `pool_id` has been slashed to `balance`."]
            pub struct PoolSlashed {
                pub pool_id: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for PoolSlashed {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PoolSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."]
            pub struct UnbondingPoolSlashed {
                pub pool_id: ::core::primitive::u32,
                pub era: ::core::primitive::u32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for UnbondingPoolSlashed {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "UnbondingPoolSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A pool's commission setting has been changed."]
            pub struct PoolCommissionUpdated {
                pub pool_id: ::core::primitive::u32,
                pub current: ::core::option::Option<(
                    runtime_types::sp_arithmetic::per_things::Perbill,
                    ::subxt::utils::AccountId32,
                )>,
            }
            impl ::subxt::events::StaticEvent for PoolCommissionUpdated {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PoolCommissionUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A pool's maximum commission setting has been changed."]
            pub struct PoolMaxCommissionUpdated {
                pub pool_id: ::core::primitive::u32,
                pub max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
            }
            impl ::subxt::events::StaticEvent for PoolMaxCommissionUpdated {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PoolMaxCommissionUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A pool's commission `change_rate` has been changed."]
            pub struct PoolCommissionChangeRateUpdated {
                pub pool_id: ::core::primitive::u32,
                pub change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
                    ::core::primitive::u32,
                >,
            }
            impl ::subxt::events::StaticEvent for PoolCommissionChangeRateUpdated {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PoolCommissionChangeRateUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Pool commission has been claimed."]
            pub struct PoolCommissionClaimed {
                pub pool_id: ::core::primitive::u32,
                pub commission: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for PoolCommissionClaimed {
                const PALLET: &'static str = "NominationPools";
                const EVENT: &'static str = "PoolCommissionClaimed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Minimum amount to bond to join a pool."]
                pub fn min_join_bond(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "MinJoinBond",
                        vec![],
                        [
                            64u8, 180u8, 71u8, 185u8, 81u8, 46u8, 155u8, 26u8, 251u8, 84u8, 108u8,
                            80u8, 128u8, 44u8, 163u8, 118u8, 107u8, 79u8, 250u8, 211u8, 194u8,
                            71u8, 87u8, 16u8, 247u8, 9u8, 76u8, 95u8, 103u8, 227u8, 180u8, 231u8,
                        ],
                    )
                }
                #[doc = " Minimum bond required to create a pool."]
                #[doc = ""]
                #[doc = " This is the amount that the depositor must put as their initial stake in the pool, as an"]
                #[doc = " indication of \"skin in the game\"."]
                #[doc = ""]
                #[doc = " This is the value that will always exist in the staking ledger of the pool bonded account"]
                #[doc = " while all other accounts leave."]
                pub fn min_create_bond(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "MinCreateBond",
                        vec![],
                        [
                            210u8, 67u8, 92u8, 230u8, 231u8, 105u8, 54u8, 249u8, 154u8, 192u8,
                            29u8, 217u8, 233u8, 79u8, 170u8, 126u8, 133u8, 98u8, 253u8, 153u8,
                            248u8, 189u8, 63u8, 107u8, 170u8, 224u8, 12u8, 42u8, 198u8, 185u8,
                            85u8, 46u8,
                        ],
                    )
                }
                #[doc = " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of"]
                #[doc = " pools can exist."]
                pub fn max_pools(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "MaxPools",
                        vec![],
                        [
                            230u8, 184u8, 242u8, 91u8, 118u8, 111u8, 90u8, 204u8, 136u8, 61u8,
                            228u8, 50u8, 212u8, 40u8, 83u8, 49u8, 121u8, 161u8, 245u8, 80u8, 46u8,
                            184u8, 105u8, 134u8, 249u8, 225u8, 39u8, 3u8, 123u8, 137u8, 156u8,
                            240u8,
                        ],
                    )
                }
                #[doc = " Maximum number of members that can exist in the system. If `None`, then the count"]
                #[doc = " members are not bound on a system wide basis."]
                pub fn max_pool_members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "MaxPoolMembers",
                        vec![],
                        [
                            210u8, 222u8, 181u8, 146u8, 137u8, 200u8, 71u8, 196u8, 74u8, 38u8,
                            36u8, 122u8, 187u8, 164u8, 218u8, 116u8, 216u8, 143u8, 182u8, 15u8,
                            23u8, 124u8, 57u8, 121u8, 81u8, 151u8, 8u8, 247u8, 80u8, 136u8, 115u8,
                            2u8,
                        ],
                    )
                }
                #[doc = " Maximum number of members that may belong to pool. If `None`, then the count of"]
                #[doc = " members is not bound on a per pool basis."]
                pub fn max_pool_members_per_pool(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "MaxPoolMembersPerPool",
                        vec![],
                        [
                            250u8, 255u8, 136u8, 223u8, 61u8, 119u8, 117u8, 240u8, 68u8, 114u8,
                            55u8, 1u8, 176u8, 120u8, 143u8, 48u8, 232u8, 125u8, 218u8, 105u8, 28u8,
                            230u8, 253u8, 36u8, 9u8, 44u8, 129u8, 225u8, 147u8, 33u8, 181u8, 68u8,
                        ],
                    )
                }
                #[doc = " The maximum commission that can be charged by a pool. Used on commission payouts to bound"]
                #[doc = " pool commissions that are > `GlobalMaxCommission`, necessary if a future"]
                #[doc = " `GlobalMaxCommission` is lower than some current pool commissions."]
                pub fn global_max_commission(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::sp_arithmetic::per_things::Perbill,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "GlobalMaxCommission",
                        vec![],
                        [
                            2u8, 112u8, 8u8, 116u8, 114u8, 97u8, 250u8, 106u8, 170u8, 215u8, 218u8,
                            217u8, 80u8, 235u8, 149u8, 81u8, 85u8, 185u8, 201u8, 127u8, 107u8,
                            251u8, 191u8, 231u8, 142u8, 74u8, 8u8, 70u8, 151u8, 238u8, 117u8,
                            173u8,
                        ],
                    )
                }
                #[doc = " Active members."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn pool_members(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::PoolMember,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "PoolMembers",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            116u8, 41u8, 89u8, 74u8, 35u8, 243u8, 213u8, 178u8, 41u8, 249u8, 62u8,
                            119u8, 72u8, 34u8, 197u8, 168u8, 147u8, 178u8, 159u8, 10u8, 181u8,
                            255u8, 40u8, 211u8, 206u8, 32u8, 130u8, 25u8, 201u8, 54u8, 212u8, 25u8,
                        ],
                    )
                }
                #[doc = " Active members."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: SAFE since `AccountId` is a secure hash."]
                pub fn pool_members_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::PoolMember,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "PoolMembers",
                        Vec::new(),
                        [
                            116u8, 41u8, 89u8, 74u8, 35u8, 243u8, 213u8, 178u8, 41u8, 249u8, 62u8,
                            119u8, 72u8, 34u8, 197u8, 168u8, 147u8, 178u8, 159u8, 10u8, 181u8,
                            255u8, 40u8, 211u8, 206u8, 32u8, 130u8, 25u8, 201u8, 54u8, 212u8, 25u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_pool_members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "CounterForPoolMembers",
                        vec![],
                        [
                            165u8, 158u8, 130u8, 19u8, 106u8, 227u8, 134u8, 73u8, 36u8, 237u8,
                            103u8, 146u8, 198u8, 68u8, 219u8, 186u8, 134u8, 224u8, 89u8, 251u8,
                            200u8, 46u8, 87u8, 232u8, 53u8, 152u8, 13u8, 10u8, 105u8, 49u8, 150u8,
                            212u8,
                        ],
                    )
                }
                #[doc = " Storage for bonded pools."]
                pub fn bonded_pools(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::BondedPoolInner,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "BondedPools",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            171u8, 143u8, 96u8, 95u8, 196u8, 228u8, 116u8, 22u8, 63u8, 105u8,
                            193u8, 77u8, 171u8, 99u8, 144u8, 70u8, 166u8, 55u8, 14u8, 191u8, 156u8,
                            17u8, 237u8, 193u8, 228u8, 243u8, 164u8, 187u8, 127u8, 245u8, 117u8,
                            238u8,
                        ],
                    )
                }
                #[doc = " Storage for bonded pools."]
                pub fn bonded_pools_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::BondedPoolInner,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "BondedPools",
                        Vec::new(),
                        [
                            171u8, 143u8, 96u8, 95u8, 196u8, 228u8, 116u8, 22u8, 63u8, 105u8,
                            193u8, 77u8, 171u8, 99u8, 144u8, 70u8, 166u8, 55u8, 14u8, 191u8, 156u8,
                            17u8, 237u8, 193u8, 228u8, 243u8, 164u8, 187u8, 127u8, 245u8, 117u8,
                            238u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_bonded_pools(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "CounterForBondedPools",
                        vec![],
                        [
                            198u8, 6u8, 213u8, 92u8, 4u8, 114u8, 164u8, 244u8, 51u8, 55u8, 157u8,
                            20u8, 224u8, 183u8, 40u8, 236u8, 115u8, 86u8, 171u8, 207u8, 31u8,
                            111u8, 0u8, 210u8, 48u8, 198u8, 243u8, 153u8, 5u8, 216u8, 107u8, 113u8,
                        ],
                    )
                }
                #[doc = " Reward pools. This is where there rewards for each pool accumulate. When a members payout is"]
                #[doc = " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."]
                pub fn reward_pools(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::RewardPool,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "RewardPools",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            150u8, 53u8, 204u8, 26u8, 187u8, 118u8, 80u8, 133u8, 94u8, 127u8,
                            155u8, 78u8, 71u8, 72u8, 0u8, 220u8, 174u8, 174u8, 109u8, 238u8, 13u8,
                            120u8, 193u8, 102u8, 219u8, 22u8, 89u8, 117u8, 169u8, 212u8, 64u8,
                            204u8,
                        ],
                    )
                }
                #[doc = " Reward pools. This is where there rewards for each pool accumulate. When a members payout is"]
                #[doc = " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."]
                pub fn reward_pools_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::RewardPool,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "RewardPools",
                        Vec::new(),
                        [
                            150u8, 53u8, 204u8, 26u8, 187u8, 118u8, 80u8, 133u8, 94u8, 127u8,
                            155u8, 78u8, 71u8, 72u8, 0u8, 220u8, 174u8, 174u8, 109u8, 238u8, 13u8,
                            120u8, 193u8, 102u8, 219u8, 22u8, 89u8, 117u8, 169u8, 212u8, 64u8,
                            204u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_reward_pools(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "CounterForRewardPools",
                        vec![],
                        [
                            218u8, 186u8, 28u8, 97u8, 205u8, 249u8, 187u8, 10u8, 127u8, 190u8,
                            213u8, 152u8, 103u8, 20u8, 157u8, 183u8, 86u8, 104u8, 186u8, 236u8,
                            84u8, 159u8, 117u8, 78u8, 5u8, 242u8, 193u8, 59u8, 112u8, 200u8, 34u8,
                            166u8,
                        ],
                    )
                }
                #[doc = " Groups of unbonding pools. Each group of unbonding pools belongs to a"]
                #[doc = " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."]
                pub fn sub_pools_storage(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::SubPools,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "SubPoolsStorage",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            248u8, 37u8, 232u8, 231u8, 14u8, 140u8, 12u8, 27u8, 61u8, 222u8, 185u8,
                            128u8, 158u8, 30u8, 57u8, 121u8, 35u8, 11u8, 42u8, 242u8, 56u8, 1u8,
                            61u8, 0u8, 67u8, 140u8, 55u8, 62u8, 165u8, 134u8, 136u8, 4u8,
                        ],
                    )
                }
                #[doc = " Groups of unbonding pools. Each group of unbonding pools belongs to a"]
                #[doc = " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."]
                pub fn sub_pools_storage_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::SubPools,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "SubPoolsStorage",
                        Vec::new(),
                        [
                            248u8, 37u8, 232u8, 231u8, 14u8, 140u8, 12u8, 27u8, 61u8, 222u8, 185u8,
                            128u8, 158u8, 30u8, 57u8, 121u8, 35u8, 11u8, 42u8, 242u8, 56u8, 1u8,
                            61u8, 0u8, 67u8, 140u8, 55u8, 62u8, 165u8, 134u8, 136u8, 4u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_sub_pools_storage(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "CounterForSubPoolsStorage",
                        vec![],
                        [
                            137u8, 162u8, 32u8, 44u8, 163u8, 30u8, 54u8, 158u8, 169u8, 118u8,
                            196u8, 101u8, 78u8, 28u8, 184u8, 78u8, 185u8, 225u8, 226u8, 207u8,
                            14u8, 119u8, 0u8, 116u8, 140u8, 141u8, 116u8, 106u8, 71u8, 161u8,
                            200u8, 228u8,
                        ],
                    )
                }
                #[doc = " Metadata for the pool."]
                pub fn metadata(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "Metadata",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            10u8, 171u8, 251u8, 5u8, 72u8, 74u8, 86u8, 144u8, 59u8, 67u8, 92u8,
                            111u8, 217u8, 111u8, 175u8, 107u8, 119u8, 206u8, 199u8, 78u8, 182u8,
                            84u8, 12u8, 102u8, 10u8, 124u8, 103u8, 9u8, 86u8, 199u8, 233u8, 54u8,
                        ],
                    )
                }
                #[doc = " Metadata for the pool."]
                pub fn metadata_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "Metadata",
                        Vec::new(),
                        [
                            10u8, 171u8, 251u8, 5u8, 72u8, 74u8, 86u8, 144u8, 59u8, 67u8, 92u8,
                            111u8, 217u8, 111u8, 175u8, 107u8, 119u8, 206u8, 199u8, 78u8, 182u8,
                            84u8, 12u8, 102u8, 10u8, 124u8, 103u8, 9u8, 86u8, 199u8, 233u8, 54u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_metadata(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "CounterForMetadata",
                        vec![],
                        [
                            49u8, 76u8, 175u8, 236u8, 99u8, 120u8, 156u8, 116u8, 153u8, 173u8,
                            10u8, 102u8, 194u8, 139u8, 25u8, 149u8, 109u8, 195u8, 150u8, 21u8,
                            43u8, 24u8, 196u8, 180u8, 231u8, 101u8, 69u8, 98u8, 82u8, 159u8, 183u8,
                            174u8,
                        ],
                    )
                }
                #[doc = " Ever increasing number of all pools created so far."]
                pub fn last_pool_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "LastPoolId",
                        vec![],
                        [
                            178u8, 198u8, 245u8, 157u8, 176u8, 45u8, 214u8, 86u8, 73u8, 154u8,
                            217u8, 39u8, 191u8, 53u8, 233u8, 145u8, 57u8, 100u8, 31u8, 13u8, 202u8,
                            122u8, 115u8, 16u8, 205u8, 69u8, 157u8, 250u8, 216u8, 180u8, 113u8,
                            30u8,
                        ],
                    )
                }
                #[doc = " A reverse lookup from the pool's account id to its id."]
                #[doc = ""]
                #[doc = " This is only used for slashing. In all other instances, the pool id is used, and the"]
                #[doc = " accounts are deterministically derived from it."]
                pub fn reverse_pool_id_lookup(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "ReversePoolIdLookup",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            76u8, 76u8, 150u8, 33u8, 64u8, 81u8, 90u8, 75u8, 212u8, 221u8, 59u8,
                            83u8, 178u8, 45u8, 86u8, 206u8, 196u8, 221u8, 117u8, 94u8, 229u8,
                            160u8, 52u8, 54u8, 11u8, 64u8, 0u8, 103u8, 85u8, 86u8, 5u8, 71u8,
                        ],
                    )
                }
                #[doc = " A reverse lookup from the pool's account id to its id."]
                #[doc = ""]
                #[doc = " This is only used for slashing. In all other instances, the pool id is used, and the"]
                #[doc = " accounts are deterministically derived from it."]
                pub fn reverse_pool_id_lookup_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "ReversePoolIdLookup",
                        Vec::new(),
                        [
                            76u8, 76u8, 150u8, 33u8, 64u8, 81u8, 90u8, 75u8, 212u8, 221u8, 59u8,
                            83u8, 178u8, 45u8, 86u8, 206u8, 196u8, 221u8, 117u8, 94u8, 229u8,
                            160u8, 52u8, 54u8, 11u8, 64u8, 0u8, 103u8, 85u8, 86u8, 5u8, 71u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_reverse_pool_id_lookup(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "CounterForReversePoolIdLookup",
                        vec![],
                        [
                            135u8, 72u8, 203u8, 197u8, 101u8, 135u8, 114u8, 202u8, 122u8, 231u8,
                            128u8, 17u8, 81u8, 70u8, 22u8, 146u8, 100u8, 138u8, 16u8, 74u8, 31u8,
                            250u8, 110u8, 184u8, 250u8, 75u8, 249u8, 71u8, 171u8, 77u8, 95u8,
                            251u8,
                        ],
                    )
                }
                #[doc = " Map from a pool member account to their opted claim permission."]
                pub fn claim_permissions(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::ClaimPermission,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "ClaimPermissions",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            98u8, 241u8, 185u8, 102u8, 61u8, 53u8, 215u8, 105u8, 2u8, 148u8, 197u8,
                            17u8, 107u8, 253u8, 74u8, 159u8, 14u8, 30u8, 213u8, 38u8, 35u8, 163u8,
                            249u8, 19u8, 140u8, 201u8, 182u8, 106u8, 0u8, 21u8, 102u8, 15u8,
                        ],
                    )
                }
                #[doc = " Map from a pool member account to their opted claim permission."]
                pub fn claim_permissions_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_nomination_pools::ClaimPermission,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "NominationPools",
                        "ClaimPermissions",
                        Vec::new(),
                        [
                            98u8, 241u8, 185u8, 102u8, 61u8, 53u8, 215u8, 105u8, 2u8, 148u8, 197u8,
                            17u8, 107u8, 253u8, 74u8, 159u8, 14u8, 30u8, 213u8, 38u8, 35u8, 163u8,
                            249u8, 19u8, 140u8, 201u8, 182u8, 106u8, 0u8, 21u8, 102u8, 15u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The nomination pool's pallet id."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "NominationPools",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The maximum pool points-to-balance ratio that an `open` pool can have."]
                #[doc = ""]
                #[doc = " This is important in the event slashing takes place and the pool's points-to-balance"]
                #[doc = " ratio becomes disproportional."]
                #[doc = ""]
                #[doc = " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations"]
                #[doc = " are a function of number of points, and by setting this value to e.g. 10, you ensure"]
                #[doc = " that the total number of points in the system are at most 10 times the total_issuance of"]
                #[doc = " the chain, in the absolute worse case."]
                #[doc = ""]
                #[doc = " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1."]
                #[doc = " Such a scenario would also be the equivalent of the pool being 90% slashed."]
                pub fn max_points_to_balance(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "NominationPools",
                        "MaxPointsToBalance",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ranked_polls {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_referenda::pallet::Error2;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_referenda::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Submit {
                    pub proposal_origin:
                        ::std::boxed::Box<runtime_types::kitchensink_runtime::OriginCaller>,
                    pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                    pub enactment_moment:
                        runtime_types::frame_support::traits::schedule::DispatchTime<
                            ::core::primitive::u32,
                        >,
                }
                impl ::subxt::blocks::StaticExtrinsic for Submit {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "submit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PlaceDecisionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for PlaceDecisionDeposit {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "place_decision_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundDecisionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundDecisionDeposit {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "refund_decision_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Cancel {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Cancel {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Kill {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Kill {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "kill";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct NudgeReferendum {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for NudgeReferendum {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "nudge_referendum";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OneFewerDeciding {
                    pub track: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for OneFewerDeciding {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "one_fewer_deciding";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RefundSubmissionDeposit {
                    pub index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RefundSubmissionDeposit {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "refund_submission_deposit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetMetadata {
                    pub index: ::core::primitive::u32,
                    pub maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMetadata {
                    const PALLET: &'static str = "RankedPolls";
                    const CALL: &'static str = "set_metadata";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::submit`]."]
                pub fn submit(
                    &self,
                    proposal_origin: runtime_types::kitchensink_runtime::OriginCaller,
                    proposal: runtime_types::frame_support::traits::preimages::Bounded<
                        runtime_types::kitchensink_runtime::RuntimeCall,
                    >,
                    enactment_moment: runtime_types::frame_support::traits::schedule::DispatchTime<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::Submit> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "submit",
                        types::Submit {
                            proposal_origin: ::std::boxed::Box::new(proposal_origin),
                            proposal,
                            enactment_moment,
                        },
                        [
                            4u8, 7u8, 224u8, 129u8, 243u8, 222u8, 252u8, 241u8, 206u8, 118u8, 84u8,
                            87u8, 66u8, 245u8, 116u8, 195u8, 75u8, 37u8, 107u8, 88u8, 136u8, 165u8,
                            185u8, 184u8, 77u8, 164u8, 92u8, 49u8, 116u8, 12u8, 225u8, 252u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::place_decision_deposit`]."]
                pub fn place_decision_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::PlaceDecisionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "place_decision_deposit",
                        types::PlaceDecisionDeposit { index },
                        [
                            247u8, 158u8, 55u8, 191u8, 188u8, 200u8, 3u8, 47u8, 20u8, 175u8, 86u8,
                            203u8, 52u8, 253u8, 91u8, 131u8, 21u8, 213u8, 56u8, 68u8, 40u8, 84u8,
                            184u8, 30u8, 9u8, 193u8, 63u8, 182u8, 178u8, 241u8, 247u8, 220u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund_decision_deposit`]."]
                pub fn refund_decision_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RefundDecisionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "refund_decision_deposit",
                        types::RefundDecisionDeposit { index },
                        [
                            159u8, 19u8, 35u8, 216u8, 114u8, 105u8, 18u8, 42u8, 148u8, 151u8,
                            136u8, 92u8, 117u8, 30u8, 29u8, 41u8, 238u8, 58u8, 195u8, 91u8, 115u8,
                            135u8, 96u8, 99u8, 154u8, 233u8, 8u8, 249u8, 145u8, 165u8, 77u8, 164u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cancel`]."]
                pub fn cancel(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Cancel> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "cancel",
                        types::Cancel { index },
                        [
                            55u8, 206u8, 119u8, 156u8, 238u8, 165u8, 193u8, 73u8, 242u8, 13u8,
                            212u8, 75u8, 136u8, 156u8, 151u8, 14u8, 35u8, 41u8, 156u8, 107u8, 60u8,
                            190u8, 39u8, 216u8, 8u8, 74u8, 213u8, 130u8, 160u8, 131u8, 237u8,
                            122u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::kill`]."]
                pub fn kill(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Kill> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "kill",
                        types::Kill { index },
                        [
                            50u8, 89u8, 57u8, 0u8, 87u8, 129u8, 113u8, 140u8, 179u8, 178u8, 126u8,
                            198u8, 92u8, 92u8, 189u8, 64u8, 123u8, 232u8, 57u8, 227u8, 223u8,
                            219u8, 73u8, 217u8, 179u8, 44u8, 210u8, 125u8, 180u8, 10u8, 143u8,
                            48u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::nudge_referendum`]."]
                pub fn nudge_referendum(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::NudgeReferendum> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "nudge_referendum",
                        types::NudgeReferendum { index },
                        [
                            75u8, 99u8, 172u8, 30u8, 170u8, 150u8, 211u8, 229u8, 249u8, 128u8,
                            194u8, 246u8, 100u8, 142u8, 193u8, 184u8, 232u8, 81u8, 29u8, 17u8,
                            99u8, 91u8, 236u8, 85u8, 230u8, 226u8, 57u8, 115u8, 45u8, 170u8, 54u8,
                            213u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::one_fewer_deciding`]."]
                pub fn one_fewer_deciding(
                    &self,
                    track: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::OneFewerDeciding> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "one_fewer_deciding",
                        types::OneFewerDeciding { track },
                        [
                            15u8, 84u8, 79u8, 231u8, 21u8, 239u8, 244u8, 143u8, 183u8, 215u8,
                            181u8, 25u8, 225u8, 195u8, 95u8, 171u8, 17u8, 156u8, 182u8, 128u8,
                            111u8, 40u8, 151u8, 102u8, 196u8, 55u8, 36u8, 212u8, 89u8, 190u8,
                            131u8, 167u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::refund_submission_deposit`]."]
                pub fn refund_submission_deposit(
                    &self,
                    index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::RefundSubmissionDeposit> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "refund_submission_deposit",
                        types::RefundSubmissionDeposit { index },
                        [
                            20u8, 217u8, 115u8, 6u8, 1u8, 60u8, 54u8, 136u8, 35u8, 41u8, 38u8,
                            23u8, 85u8, 100u8, 141u8, 126u8, 30u8, 160u8, 61u8, 46u8, 134u8, 98u8,
                            82u8, 38u8, 211u8, 124u8, 208u8, 222u8, 210u8, 10u8, 155u8, 122u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::set_metadata`]."]
                pub fn set_metadata(
                    &self,
                    index: ::core::primitive::u32,
                    maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                ) -> ::subxt::tx::Payload<types::SetMetadata> {
                    ::subxt::tx::Payload::new_static(
                        "RankedPolls",
                        "set_metadata",
                        types::SetMetadata { index, maybe_hash },
                        [
                            207u8, 29u8, 146u8, 233u8, 219u8, 205u8, 88u8, 118u8, 106u8, 61u8,
                            124u8, 101u8, 2u8, 41u8, 169u8, 70u8, 114u8, 189u8, 162u8, 118u8, 1u8,
                            108u8, 234u8, 98u8, 245u8, 245u8, 183u8, 126u8, 89u8, 13u8, 112u8,
                            88u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_referenda::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been submitted."]
            pub struct Submitted {
                pub index: ::core::primitive::u32,
                pub track: ::core::primitive::u16,
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::kitchensink_runtime::RuntimeCall,
                >,
            }
            impl ::subxt::events::StaticEvent for Submitted {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "Submitted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The decision deposit has been placed."]
            pub struct DecisionDepositPlaced {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DecisionDepositPlaced {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "DecisionDepositPlaced";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The decision deposit has been refunded."]
            pub struct DecisionDepositRefunded {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DecisionDepositRefunded {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "DecisionDepositRefunded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A deposit has been slashaed."]
            pub struct DepositSlashed {
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for DepositSlashed {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "DepositSlashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has moved into the deciding phase."]
            pub struct DecisionStarted {
                pub index: ::core::primitive::u32,
                pub track: ::core::primitive::u16,
                pub proposal: runtime_types::frame_support::traits::preimages::Bounded<
                    runtime_types::kitchensink_runtime::RuntimeCall,
                >,
                pub tally: runtime_types::pallet_ranked_collective::Tally,
            }
            impl ::subxt::events::StaticEvent for DecisionStarted {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "DecisionStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfirmStarted {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ConfirmStarted {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "ConfirmStarted";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ConfirmAborted {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for ConfirmAborted {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "ConfirmAborted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has ended its confirmation phase and is ready for approval."]
            pub struct Confirmed {
                pub index: ::core::primitive::u32,
                pub tally: runtime_types::pallet_ranked_collective::Tally,
            }
            impl ::subxt::events::StaticEvent for Confirmed {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "Confirmed";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been approved and its proposal has been scheduled."]
            pub struct Approved {
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal has been rejected by referendum."]
            pub struct Rejected {
                pub index: ::core::primitive::u32,
                pub tally: runtime_types::pallet_ranked_collective::Tally,
            }
            impl ::subxt::events::StaticEvent for Rejected {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been timed out without being decided."]
            pub struct TimedOut {
                pub index: ::core::primitive::u32,
                pub tally: runtime_types::pallet_ranked_collective::Tally,
            }
            impl ::subxt::events::StaticEvent for TimedOut {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "TimedOut";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been cancelled."]
            pub struct Cancelled {
                pub index: ::core::primitive::u32,
                pub tally: runtime_types::pallet_ranked_collective::Tally,
            }
            impl ::subxt::events::StaticEvent for Cancelled {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "Cancelled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A referendum has been killed."]
            pub struct Killed {
                pub index: ::core::primitive::u32,
                pub tally: runtime_types::pallet_ranked_collective::Tally,
            }
            impl ::subxt::events::StaticEvent for Killed {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "Killed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The submission deposit has been refunded."]
            pub struct SubmissionDepositRefunded {
                pub index: ::core::primitive::u32,
                pub who: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SubmissionDepositRefunded {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "SubmissionDepositRefunded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a referendum has been set."]
            pub struct MetadataSet {
                pub index: ::core::primitive::u32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataSet {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Metadata for a referendum has been cleared."]
            pub struct MetadataCleared {
                pub index: ::core::primitive::u32,
                pub hash: ::subxt::utils::H256,
            }
            impl ::subxt::events::StaticEvent for MetadataCleared {
                const PALLET: &'static str = "RankedPolls";
                const EVENT: &'static str = "MetadataCleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The next free referendum index, aka the number of referenda started so far."]
                pub fn referendum_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "ReferendumCount",
                        vec![],
                        [
                            64u8, 145u8, 232u8, 153u8, 121u8, 87u8, 128u8, 253u8, 170u8, 192u8,
                            139u8, 18u8, 0u8, 33u8, 243u8, 11u8, 238u8, 222u8, 244u8, 5u8, 247u8,
                            198u8, 149u8, 31u8, 122u8, 208u8, 86u8, 179u8, 166u8, 167u8, 93u8,
                            67u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                pub fn referendum_info_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_referenda::types::ReferendumInfo<
                        ::core::primitive::u16,
                        runtime_types::kitchensink_runtime::OriginCaller,
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                        runtime_types::pallet_ranked_collective::Tally,
                        ::subxt::utils::AccountId32,
                        (::core::primitive::u32, ::core::primitive::u32),
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "ReferendumInfoFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            90u8, 94u8, 62u8, 228u8, 182u8, 225u8, 155u8, 101u8, 77u8, 21u8, 199u8,
                            186u8, 148u8, 200u8, 193u8, 147u8, 62u8, 138u8, 230u8, 45u8, 80u8,
                            175u8, 57u8, 220u8, 99u8, 186u8, 93u8, 107u8, 184u8, 159u8, 120u8,
                            187u8,
                        ],
                    )
                }
                #[doc = " Information concerning any given referendum."]
                pub fn referendum_info_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_referenda::types::ReferendumInfo<
                        ::core::primitive::u16,
                        runtime_types::kitchensink_runtime::OriginCaller,
                        ::core::primitive::u32,
                        runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        ::core::primitive::u128,
                        runtime_types::pallet_ranked_collective::Tally,
                        ::subxt::utils::AccountId32,
                        (::core::primitive::u32, ::core::primitive::u32),
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "ReferendumInfoFor",
                        Vec::new(),
                        [
                            90u8, 94u8, 62u8, 228u8, 182u8, 225u8, 155u8, 101u8, 77u8, 21u8, 199u8,
                            186u8, 148u8, 200u8, 193u8, 147u8, 62u8, 138u8, 230u8, 45u8, 80u8,
                            175u8, 57u8, 220u8, 99u8, 186u8, 93u8, 107u8, 184u8, 159u8, 120u8,
                            187u8,
                        ],
                    )
                }
                #[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
                #[doc = " conviction-weighted approvals."]
                #[doc = ""]
                #[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
                pub fn track_queue(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "TrackQueue",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            92u8, 183u8, 71u8, 213u8, 67u8, 255u8, 48u8, 147u8, 173u8, 205u8, 39u8,
                            96u8, 177u8, 220u8, 255u8, 173u8, 20u8, 183u8, 217u8, 223u8, 42u8,
                            198u8, 136u8, 98u8, 103u8, 48u8, 65u8, 204u8, 244u8, 196u8, 164u8,
                            146u8,
                        ],
                    )
                }
                #[doc = " The sorted list of referenda ready to be decided but not yet being decided, ordered by"]
                #[doc = " conviction-weighted approvals."]
                #[doc = ""]
                #[doc = " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."]
                pub fn track_queue_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "TrackQueue",
                        Vec::new(),
                        [
                            92u8, 183u8, 71u8, 213u8, 67u8, 255u8, 48u8, 147u8, 173u8, 205u8, 39u8,
                            96u8, 177u8, 220u8, 255u8, 173u8, 20u8, 183u8, 217u8, 223u8, 42u8,
                            198u8, 136u8, 98u8, 103u8, 48u8, 65u8, 204u8, 244u8, 196u8, 164u8,
                            146u8,
                        ],
                    )
                }
                #[doc = " The number of referenda being decided currently."]
                pub fn deciding_count(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "DecidingCount",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
                            146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
                            103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The number of referenda being decided currently."]
                pub fn deciding_count_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "DecidingCount",
                        Vec::new(),
                        [
                            203u8, 89u8, 158u8, 179u8, 194u8, 82u8, 248u8, 162u8, 93u8, 140u8,
                            146u8, 51u8, 110u8, 232u8, 51u8, 1u8, 128u8, 212u8, 199u8, 14u8, 182u8,
                            103u8, 47u8, 252u8, 126u8, 108u8, 166u8, 69u8, 252u8, 179u8, 126u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The metadata is a general information concerning the referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "MetadataOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
                            124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
                            45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
                            110u8,
                        ],
                    )
                }
                #[doc = " The metadata is a general information concerning the referendum."]
                #[doc = " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON"]
                #[doc = " dump or IPFS hash of a JSON file."]
                #[doc = ""]
                #[doc = " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)"]
                #[doc = " large preimages."]
                pub fn metadata_of_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::H256,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedPolls",
                        "MetadataOf",
                        Vec::new(),
                        [
                            159u8, 250u8, 56u8, 189u8, 247u8, 165u8, 206u8, 166u8, 91u8, 139u8,
                            124u8, 164u8, 25u8, 246u8, 199u8, 36u8, 159u8, 56u8, 227u8, 136u8, 4u8,
                            45u8, 193u8, 72u8, 200u8, 164u8, 39u8, 207u8, 224u8, 124u8, 191u8,
                            110u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount to be used as a deposit for a public referendum proposal."]
                pub fn submission_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "RankedPolls",
                        "SubmissionDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum size of the referendum queue for a single track."]
                pub fn max_queued(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "RankedPolls",
                        "MaxQueued",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The number of blocks after submission that a referendum must begin being decided by."]
                #[doc = " Once this passes, then anyone may cancel the referendum."]
                pub fn undeciding_timeout(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "RankedPolls",
                        "UndecidingTimeout",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Quantization level for the referendum wakeup scheduler. A higher number will result in"]
                #[doc = " fewer storage reads/writes needed for smaller voters, but also result in delays to the"]
                #[doc = " automatic referendum status changes. Explicit servicing instructions are unaffected."]
                pub fn alarm_interval(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "RankedPolls",
                        "AlarmInterval",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Information concerning the different referendum tracks."]
                pub fn tracks(
                    &self,
                ) -> ::subxt::constants::Address<
                    ::std::vec::Vec<(
                        ::core::primitive::u16,
                        runtime_types::pallet_referenda::types::TrackInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    )>,
                > {
                    ::subxt::constants::Address::new_static(
                        "RankedPolls",
                        "Tracks",
                        [
                            230u8, 179u8, 170u8, 9u8, 42u8, 168u8, 158u8, 174u8, 177u8, 159u8,
                            93u8, 152u8, 63u8, 111u8, 23u8, 80u8, 133u8, 232u8, 101u8, 2u8, 206u8,
                            230u8, 248u8, 62u8, 145u8, 15u8, 147u8, 251u8, 196u8, 182u8, 95u8,
                            33u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod ranked_collective {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_ranked_collective::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_ranked_collective::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddMember {
                    const PALLET: &'static str = "RankedCollective";
                    const CALL: &'static str = "add_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PromoteMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for PromoteMember {
                    const PALLET: &'static str = "RankedCollective";
                    const CALL: &'static str = "promote_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DemoteMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for DemoteMember {
                    const PALLET: &'static str = "RankedCollective";
                    const CALL: &'static str = "demote_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveMember {
                    pub who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    pub min_rank: ::core::primitive::u16,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
                    const PALLET: &'static str = "RankedCollective";
                    const CALL: &'static str = "remove_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub poll: ::core::primitive::u32,
                    pub aye: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "RankedCollective";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CleanupPoll {
                    pub poll_index: ::core::primitive::u32,
                    pub max: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for CleanupPoll {
                    const PALLET: &'static str = "RankedCollective";
                    const CALL: &'static str = "cleanup_poll";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::add_member`]."]
                pub fn add_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::AddMember> {
                    ::subxt::tx::Payload::new_static(
                        "RankedCollective",
                        "add_member",
                        types::AddMember { who },
                        [
                            138u8, 255u8, 102u8, 159u8, 20u8, 50u8, 254u8, 231u8, 96u8, 129u8,
                            60u8, 16u8, 10u8, 245u8, 109u8, 255u8, 240u8, 120u8, 87u8, 88u8, 97u8,
                            175u8, 3u8, 113u8, 237u8, 212u8, 69u8, 21u8, 112u8, 215u8, 89u8, 69u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::promote_member`]."]
                pub fn promote_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::PromoteMember> {
                    ::subxt::tx::Payload::new_static(
                        "RankedCollective",
                        "promote_member",
                        types::PromoteMember { who },
                        [
                            63u8, 177u8, 96u8, 241u8, 157u8, 220u8, 62u8, 102u8, 21u8, 93u8, 120u8,
                            76u8, 89u8, 201u8, 19u8, 249u8, 42u8, 82u8, 220u8, 78u8, 30u8, 102u8,
                            80u8, 172u8, 115u8, 160u8, 252u8, 245u8, 31u8, 21u8, 10u8, 208u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::demote_member`]."]
                pub fn demote_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::DemoteMember> {
                    ::subxt::tx::Payload::new_static(
                        "RankedCollective",
                        "demote_member",
                        types::DemoteMember { who },
                        [
                            199u8, 186u8, 147u8, 90u8, 244u8, 214u8, 247u8, 131u8, 233u8, 34u8,
                            97u8, 123u8, 221u8, 25u8, 77u8, 231u8, 161u8, 89u8, 190u8, 232u8,
                            231u8, 159u8, 53u8, 50u8, 24u8, 138u8, 113u8, 40u8, 183u8, 65u8, 219u8,
                            20u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_member`]."]
                pub fn remove_member(
                    &self,
                    who: ::subxt::utils::MultiAddress<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >,
                    min_rank: ::core::primitive::u16,
                ) -> ::subxt::tx::Payload<types::RemoveMember> {
                    ::subxt::tx::Payload::new_static(
                        "RankedCollective",
                        "remove_member",
                        types::RemoveMember { who, min_rank },
                        [
                            223u8, 46u8, 49u8, 45u8, 9u8, 199u8, 243u8, 35u8, 110u8, 120u8, 46u8,
                            214u8, 140u8, 30u8, 158u8, 53u8, 254u8, 103u8, 30u8, 233u8, 216u8,
                            202u8, 120u8, 228u8, 130u8, 1u8, 69u8, 200u8, 43u8, 229u8, 216u8, 58u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::vote`]."]
                pub fn vote(
                    &self,
                    poll: ::core::primitive::u32,
                    aye: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "RankedCollective",
                        "vote",
                        types::Vote { poll, aye },
                        [
                            54u8, 116u8, 81u8, 239u8, 223u8, 35u8, 11u8, 244u8, 245u8, 94u8, 23u8,
                            241u8, 125u8, 231u8, 56u8, 150u8, 105u8, 125u8, 100u8, 171u8, 182u8,
                            186u8, 134u8, 40u8, 4u8, 121u8, 119u8, 11u8, 93u8, 158u8, 59u8, 209u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::cleanup_poll`]."]
                pub fn cleanup_poll(
                    &self,
                    poll_index: ::core::primitive::u32,
                    max: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::CleanupPoll> {
                    ::subxt::tx::Payload::new_static(
                        "RankedCollective",
                        "cleanup_poll",
                        types::CleanupPoll { poll_index, max },
                        [
                            26u8, 88u8, 41u8, 124u8, 153u8, 46u8, 112u8, 165u8, 92u8, 59u8, 111u8,
                            189u8, 167u8, 35u8, 19u8, 54u8, 214u8, 167u8, 149u8, 0u8, 213u8, 227u8,
                            114u8, 171u8, 171u8, 128u8, 153u8, 254u8, 0u8, 239u8, 12u8, 243u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_ranked_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A member `who` has been added."]
            pub struct MemberAdded {
                pub who: ::subxt::utils::AccountId32,
            }
            impl ::subxt::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "RankedCollective";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The member `who`se rank has been changed to the given `rank`."]
            pub struct RankChanged {
                pub who: ::subxt::utils::AccountId32,
                pub rank: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for RankChanged {
                const PALLET: &'static str = "RankedCollective";
                const EVENT: &'static str = "RankChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The member `who` of given `rank` has been removed from the collective."]
            pub struct MemberRemoved {
                pub who: ::subxt::utils::AccountId32,
                pub rank: ::core::primitive::u16,
            }
            impl ::subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "RankedCollective";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The member `who` has voted for the `poll` with the given `vote` leading to an updated"]
            #[doc = "`tally`."]
            pub struct Voted {
                pub who: ::subxt::utils::AccountId32,
                pub poll: ::core::primitive::u32,
                pub vote: runtime_types::pallet_ranked_collective::VoteRecord,
                pub tally: runtime_types::pallet_ranked_collective::Tally,
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "RankedCollective";
                const EVENT: &'static str = "Voted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The number of members in the collective who have at least the rank according to the index"]
                #[doc = " of the vec."]
                pub fn member_count(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "MemberCount",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            0u8, 141u8, 66u8, 91u8, 155u8, 74u8, 17u8, 191u8, 143u8, 41u8, 231u8,
                            56u8, 123u8, 219u8, 145u8, 27u8, 197u8, 62u8, 118u8, 237u8, 30u8, 7u8,
                            107u8, 96u8, 95u8, 17u8, 242u8, 206u8, 246u8, 79u8, 53u8, 214u8,
                        ],
                    )
                }
                #[doc = " The number of members in the collective who have at least the rank according to the index"]
                #[doc = " of the vec."]
                pub fn member_count_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "MemberCount",
                        Vec::new(),
                        [
                            0u8, 141u8, 66u8, 91u8, 155u8, 74u8, 17u8, 191u8, 143u8, 41u8, 231u8,
                            56u8, 123u8, 219u8, 145u8, 27u8, 197u8, 62u8, 118u8, 237u8, 30u8, 7u8,
                            107u8, 96u8, 95u8, 17u8, 242u8, 206u8, 246u8, 79u8, 53u8, 214u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective."]
                pub fn members(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_ranked_collective::MemberRecord,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "Members",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            101u8, 183u8, 36u8, 241u8, 67u8, 8u8, 252u8, 116u8, 110u8, 153u8,
                            117u8, 210u8, 128u8, 80u8, 130u8, 163u8, 38u8, 76u8, 230u8, 107u8,
                            112u8, 90u8, 102u8, 24u8, 217u8, 2u8, 244u8, 197u8, 103u8, 215u8,
                            247u8, 133u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective."]
                pub fn members_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_ranked_collective::MemberRecord,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "Members",
                        Vec::new(),
                        [
                            101u8, 183u8, 36u8, 241u8, 67u8, 8u8, 252u8, 116u8, 110u8, 153u8,
                            117u8, 210u8, 128u8, 80u8, 130u8, 163u8, 38u8, 76u8, 230u8, 107u8,
                            112u8, 90u8, 102u8, 24u8, 217u8, 2u8, 244u8, 197u8, 103u8, 215u8,
                            247u8, 133u8,
                        ],
                    )
                }
                #[doc = " The index of each ranks's member into the group of members who have at least that rank."]
                pub fn id_to_index(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "IdToIndex",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            121u8, 225u8, 69u8, 131u8, 194u8, 3u8, 82u8, 27u8, 129u8, 152u8, 157u8,
                            45u8, 39u8, 47u8, 166u8, 28u8, 42u8, 92u8, 217u8, 189u8, 160u8, 102u8,
                            153u8, 196u8, 94u8, 48u8, 248u8, 113u8, 164u8, 111u8, 27u8, 9u8,
                        ],
                    )
                }
                #[doc = " The index of each ranks's member into the group of members who have at least that rank."]
                pub fn id_to_index_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "IdToIndex",
                        Vec::new(),
                        [
                            121u8, 225u8, 69u8, 131u8, 194u8, 3u8, 82u8, 27u8, 129u8, 152u8, 157u8,
                            45u8, 39u8, 47u8, 166u8, 28u8, 42u8, 92u8, 217u8, 189u8, 160u8, 102u8,
                            153u8, 196u8, 94u8, 48u8, 248u8, 113u8, 164u8, 111u8, 27u8, 9u8,
                        ],
                    )
                }
                #[doc = " The members in the collective by index. All indices in the range `0..MemberCount` will"]
                #[doc = " return `Some`, however a member's index is not guaranteed to remain unchanged over time."]
                pub fn index_to_id(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u16>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "IndexToId",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            110u8, 48u8, 214u8, 224u8, 56u8, 195u8, 186u8, 24u8, 111u8, 37u8, 15u8,
                            153u8, 245u8, 101u8, 229u8, 149u8, 216u8, 185u8, 7u8, 242u8, 196u8,
                            29u8, 205u8, 243u8, 162u8, 92u8, 71u8, 253u8, 102u8, 152u8, 137u8,
                            70u8,
                        ],
                    )
                }
                #[doc = " The members in the collective by index. All indices in the range `0..MemberCount` will"]
                #[doc = " return `Some`, however a member's index is not guaranteed to remain unchanged over time."]
                pub fn index_to_id_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::subxt::utils::AccountId32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "IndexToId",
                        Vec::new(),
                        [
                            110u8, 48u8, 214u8, 224u8, 56u8, 195u8, 186u8, 24u8, 111u8, 37u8, 15u8,
                            153u8, 245u8, 101u8, 229u8, 149u8, 216u8, 185u8, 7u8, 242u8, 196u8,
                            29u8, 205u8, 243u8, 162u8, 92u8, 71u8, 253u8, 102u8, 152u8, 137u8,
                            70u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_ranked_collective::VoteRecord,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "Voting",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            167u8, 133u8, 147u8, 67u8, 15u8, 108u8, 59u8, 75u8, 44u8, 227u8, 120u8,
                            206u8, 36u8, 75u8, 100u8, 170u8, 5u8, 194u8, 219u8, 79u8, 126u8, 170u8,
                            179u8, 93u8, 168u8, 191u8, 115u8, 196u8, 66u8, 232u8, 251u8, 37u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_ranked_collective::VoteRecord,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "Voting",
                        Vec::new(),
                        [
                            167u8, 133u8, 147u8, 67u8, 15u8, 108u8, 59u8, 75u8, 44u8, 227u8, 120u8,
                            206u8, 36u8, 75u8, 100u8, 170u8, 5u8, 194u8, 219u8, 79u8, 126u8, 170u8,
                            179u8, 93u8, 168u8, 191u8, 115u8, 196u8, 66u8, 232u8, 251u8, 37u8,
                        ],
                    )
                }
                pub fn voting_cleanup(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "VotingCleanup",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            223u8, 130u8, 79u8, 104u8, 94u8, 221u8, 222u8, 72u8, 187u8, 95u8,
                            231u8, 59u8, 28u8, 119u8, 191u8, 63u8, 40u8, 186u8, 58u8, 254u8, 14u8,
                            233u8, 152u8, 36u8, 2u8, 231u8, 120u8, 13u8, 120u8, 211u8, 232u8, 11u8,
                        ],
                    )
                }
                pub fn voting_cleanup_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RankedCollective",
                        "VotingCleanup",
                        Vec::new(),
                        [
                            223u8, 130u8, 79u8, 104u8, 94u8, 221u8, 222u8, 72u8, 187u8, 95u8,
                            231u8, 59u8, 28u8, 119u8, 191u8, 63u8, 40u8, 186u8, 58u8, 254u8, 14u8,
                            233u8, 152u8, 36u8, 2u8, 231u8, 120u8, 13u8, 120u8, 211u8, 232u8, 11u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_conversion {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_asset_conversion::pallet::Error;
        #[doc = "Pallet's callable functions."]
        pub type Call = runtime_types::pallet_asset_conversion::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CreatePool {
                    pub asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                }
                impl ::subxt::blocks::StaticExtrinsic for CreatePool {
                    const PALLET: &'static str = "AssetConversion";
                    const CALL: &'static str = "create_pool";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddLiquidity {
                    pub asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub amount1_desired: ::core::primitive::u128,
                    pub amount2_desired: ::core::primitive::u128,
                    pub amount1_min: ::core::primitive::u128,
                    pub amount2_min: ::core::primitive::u128,
                    pub mint_to: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for AddLiquidity {
                    const PALLET: &'static str = "AssetConversion";
                    const CALL: &'static str = "add_liquidity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveLiquidity {
                    pub asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    pub lp_token_burn: ::core::primitive::u128,
                    pub amount1_min_receive: ::core::primitive::u128,
                    pub amount2_min_receive: ::core::primitive::u128,
                    pub withdraw_to: ::subxt::utils::AccountId32,
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveLiquidity {
                    const PALLET: &'static str = "AssetConversion";
                    const CALL: &'static str = "remove_liquidity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SwapExactTokensForTokens {
                    pub path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                    >,
                    pub amount_in: ::core::primitive::u128,
                    pub amount_out_min: ::core::primitive::u128,
                    pub send_to: ::subxt::utils::AccountId32,
                    pub keep_alive: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapExactTokensForTokens {
                    const PALLET: &'static str = "AssetConversion";
                    const CALL: &'static str = "swap_exact_tokens_for_tokens";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SwapTokensForExactTokens {
                    pub path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                    >,
                    pub amount_out: ::core::primitive::u128,
                    pub amount_in_max: ::core::primitive::u128,
                    pub send_to: ::subxt::utils::AccountId32,
                    pub keep_alive: ::core::primitive::bool,
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapTokensForExactTokens {
                    const PALLET: &'static str = "AssetConversion";
                    const CALL: &'static str = "swap_tokens_for_exact_tokens";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::create_pool`]."]
                pub fn create_pool(
                    &self,
                    asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                ) -> ::subxt::tx::Payload<types::CreatePool> {
                    ::subxt::tx::Payload::new_static(
                        "AssetConversion",
                        "create_pool",
                        types::CreatePool { asset1, asset2 },
                        [
                            142u8, 18u8, 55u8, 90u8, 196u8, 221u8, 83u8, 236u8, 201u8, 144u8, 49u8,
                            188u8, 78u8, 225u8, 44u8, 176u8, 214u8, 170u8, 9u8, 64u8, 96u8, 107u8,
                            76u8, 85u8, 77u8, 151u8, 138u8, 217u8, 227u8, 223u8, 75u8, 129u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::add_liquidity`]."]
                pub fn add_liquidity(
                    &self,
                    asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    amount1_desired: ::core::primitive::u128,
                    amount2_desired: ::core::primitive::u128,
                    amount1_min: ::core::primitive::u128,
                    amount2_min: ::core::primitive::u128,
                    mint_to: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::AddLiquidity> {
                    ::subxt::tx::Payload::new_static(
                        "AssetConversion",
                        "add_liquidity",
                        types::AddLiquidity {
                            asset1,
                            asset2,
                            amount1_desired,
                            amount2_desired,
                            amount1_min,
                            amount2_min,
                            mint_to,
                        },
                        [
                            53u8, 81u8, 222u8, 240u8, 69u8, 209u8, 179u8, 35u8, 83u8, 172u8, 12u8,
                            146u8, 248u8, 209u8, 179u8, 235u8, 138u8, 49u8, 246u8, 166u8, 112u8,
                            174u8, 234u8, 140u8, 236u8, 250u8, 184u8, 120u8, 169u8, 4u8, 2u8, 5u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::remove_liquidity`]."]
                pub fn remove_liquidity(
                    &self,
                    asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    lp_token_burn: ::core::primitive::u128,
                    amount1_min_receive: ::core::primitive::u128,
                    amount2_min_receive: ::core::primitive::u128,
                    withdraw_to: ::subxt::utils::AccountId32,
                ) -> ::subxt::tx::Payload<types::RemoveLiquidity> {
                    ::subxt::tx::Payload::new_static(
                        "AssetConversion",
                        "remove_liquidity",
                        types::RemoveLiquidity {
                            asset1,
                            asset2,
                            lp_token_burn,
                            amount1_min_receive,
                            amount2_min_receive,
                            withdraw_to,
                        },
                        [
                            94u8, 105u8, 85u8, 98u8, 150u8, 179u8, 93u8, 138u8, 245u8, 201u8,
                            115u8, 98u8, 124u8, 59u8, 203u8, 123u8, 18u8, 25u8, 143u8, 120u8,
                            220u8, 107u8, 244u8, 191u8, 16u8, 65u8, 155u8, 232u8, 85u8, 11u8,
                            185u8, 9u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::swap_exact_tokens_for_tokens`]."]
                pub fn swap_exact_tokens_for_tokens(
                    &self,
                    path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                    >,
                    amount_in: ::core::primitive::u128,
                    amount_out_min: ::core::primitive::u128,
                    send_to: ::subxt::utils::AccountId32,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::SwapExactTokensForTokens> {
                    ::subxt::tx::Payload::new_static(
                        "AssetConversion",
                        "swap_exact_tokens_for_tokens",
                        types::SwapExactTokensForTokens {
                            path,
                            amount_in,
                            amount_out_min,
                            send_to,
                            keep_alive,
                        },
                        [
                            93u8, 104u8, 29u8, 123u8, 205u8, 121u8, 224u8, 75u8, 115u8, 158u8,
                            221u8, 40u8, 150u8, 38u8, 244u8, 47u8, 146u8, 110u8, 212u8, 196u8,
                            181u8, 224u8, 17u8, 54u8, 226u8, 64u8, 124u8, 88u8, 238u8, 182u8, 12u8,
                            27u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::swap_tokens_for_exact_tokens`]."]
                pub fn swap_tokens_for_exact_tokens(
                    &self,
                    path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                    >,
                    amount_out: ::core::primitive::u128,
                    amount_in_max: ::core::primitive::u128,
                    send_to: ::subxt::utils::AccountId32,
                    keep_alive: ::core::primitive::bool,
                ) -> ::subxt::tx::Payload<types::SwapTokensForExactTokens> {
                    ::subxt::tx::Payload::new_static(
                        "AssetConversion",
                        "swap_tokens_for_exact_tokens",
                        types::SwapTokensForExactTokens {
                            path,
                            amount_out,
                            amount_in_max,
                            send_to,
                            keep_alive,
                        },
                        [
                            115u8, 25u8, 22u8, 115u8, 50u8, 134u8, 29u8, 240u8, 89u8, 128u8, 128u8,
                            47u8, 3u8, 5u8, 137u8, 37u8, 233u8, 204u8, 215u8, 180u8, 111u8, 116u8,
                            67u8, 162u8, 34u8, 199u8, 101u8, 25u8, 131u8, 82u8, 109u8, 115u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_asset_conversion::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A successful call of the `CretaPool` extrinsic will create this event."]
            pub struct PoolCreated {
                pub creator: ::subxt::utils::AccountId32,
                pub pool_id: (
                    runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                ),
                pub lp_token: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for PoolCreated {
                const PALLET: &'static str = "AssetConversion";
                const EVENT: &'static str = "PoolCreated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A successful call of the `AddLiquidity` extrinsic will create this event."]
            pub struct LiquidityAdded {
                pub who: ::subxt::utils::AccountId32,
                pub mint_to: ::subxt::utils::AccountId32,
                pub pool_id: (
                    runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                ),
                pub amount1_provided: ::core::primitive::u128,
                pub amount2_provided: ::core::primitive::u128,
                pub lp_token: ::core::primitive::u32,
                pub lp_token_minted: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for LiquidityAdded {
                const PALLET: &'static str = "AssetConversion";
                const EVENT: &'static str = "LiquidityAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A successful call of the `RemoveLiquidity` extrinsic will create this event."]
            pub struct LiquidityRemoved {
                pub who: ::subxt::utils::AccountId32,
                pub withdraw_to: ::subxt::utils::AccountId32,
                pub pool_id: (
                    runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                    runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                ),
                pub amount1: ::core::primitive::u128,
                pub amount2: ::core::primitive::u128,
                pub lp_token: ::core::primitive::u32,
                pub lp_token_burned: ::core::primitive::u128,
                pub withdrawal_fee: runtime_types::sp_arithmetic::per_things::Permill,
            }
            impl ::subxt::events::StaticEvent for LiquidityRemoved {
                const PALLET: &'static str = "AssetConversion";
                const EVENT: &'static str = "LiquidityRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Assets have been converted from one to another. Both `SwapExactTokenForToken`"]
            #[doc = "and `SwapTokenForExactToken` will generate this event."]
            pub struct SwapExecuted {
                pub who: ::subxt::utils::AccountId32,
                pub send_to: ::subxt::utils::AccountId32,
                pub path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                        ::core::primitive::u32,
                    >,
                >,
                pub amount_in: ::core::primitive::u128,
                pub amount_out: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for SwapExecuted {
                const PALLET: &'static str = "AssetConversion";
                const EVENT: &'static str = "SwapExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An amount has been transferred from one account to another."]
            pub struct Transfer {
                pub from: ::subxt::utils::AccountId32,
                pub to: ::subxt::utils::AccountId32,
                pub asset: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                    ::core::primitive::u32,
                >,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "AssetConversion";
                const EVENT: &'static str = "Transfer";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially"]
                #[doc = " created rather than people sending tokens directly to a pool's public account."]
                pub fn pools(
                    &self,
                    _0: impl ::std::borrow::Borrow<
                        runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                    >,
                    _1: impl ::std::borrow::Borrow<
                        runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                    >,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_asset_conversion::types::PoolInfo<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetConversion",
                        "Pools",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            85u8, 171u8, 4u8, 184u8, 81u8, 143u8, 30u8, 113u8, 230u8, 131u8, 90u8,
                            48u8, 19u8, 155u8, 177u8, 195u8, 39u8, 93u8, 185u8, 202u8, 105u8,
                            211u8, 70u8, 11u8, 245u8, 176u8, 214u8, 33u8, 178u8, 10u8, 185u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially"]
                #[doc = " created rather than people sending tokens directly to a pool's public account."]
                pub fn pools_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_asset_conversion::types::PoolInfo<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetConversion",
                        "Pools",
                        Vec::new(),
                        [
                            85u8, 171u8, 4u8, 184u8, 81u8, 143u8, 30u8, 113u8, 230u8, 131u8, 90u8,
                            48u8, 19u8, 155u8, 177u8, 195u8, 39u8, 93u8, 185u8, 202u8, 105u8,
                            211u8, 70u8, 11u8, 245u8, 176u8, 214u8, 33u8, 178u8, 10u8, 185u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Stores the `PoolAssetId` that is going to be used for the next lp token."]
                #[doc = " This gets incremented whenever a new lp pool is created."]
                pub fn next_pool_asset_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "AssetConversion",
                        "NextPoolAssetId",
                        vec![],
                        [
                            90u8, 56u8, 244u8, 83u8, 170u8, 140u8, 227u8, 125u8, 14u8, 139u8, 22u8,
                            226u8, 30u8, 13u8, 128u8, 1u8, 136u8, 236u8, 250u8, 174u8, 70u8, 103u8,
                            255u8, 146u8, 91u8, 157u8, 160u8, 46u8, 109u8, 112u8, 46u8, 110u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A % the liquidity providers will take of every swap. Represents 10ths of a percent."]
                pub fn lp_fee(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "AssetConversion",
                        "LPFee",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " A one-time fee to setup the pool."]
                pub fn pool_setup_fee(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "AssetConversion",
                        "PoolSetupFee",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " A fee to withdraw the liquidity."]
                pub fn liquidity_withdrawal_fee(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_arithmetic::per_things::Permill>
                {
                    ::subxt::constants::Address::new_static(
                        "AssetConversion",
                        "LiquidityWithdrawalFee",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The minimum LP token amount that could be minted. Ameliorates rounding errors."]
                pub fn mint_min_liquidity(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "AssetConversion",
                        "MintMinLiquidity",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The max number of hops in a swap."]
                pub fn max_swap_path_length(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "AssetConversion",
                        "MaxSwapPathLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The pallet's id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_support::PalletId>
                {
                    ::subxt::constants::Address::new_static(
                        "AssetConversion",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " A setting to allow creating pools with both non-native assets."]
                pub fn allow_multi_asset_pools(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::bool> {
                    ::subxt::constants::Address::new_static(
                        "AssetConversion",
                        "AllowMultiAssetPools",
                        [
                            165u8, 28u8, 112u8, 190u8, 18u8, 129u8, 182u8, 206u8, 237u8, 1u8, 68u8,
                            252u8, 125u8, 234u8, 185u8, 50u8, 149u8, 164u8, 47u8, 126u8, 134u8,
                            100u8, 14u8, 86u8, 209u8, 39u8, 20u8, 4u8, 233u8, 115u8, 102u8, 131u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod fast_unstake {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_fast_unstake::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_fast_unstake::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegisterFastUnstake;
                impl ::subxt::blocks::StaticExtrinsic for RegisterFastUnstake {
                    const PALLET: &'static str = "FastUnstake";
                    const CALL: &'static str = "register_fast_unstake";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Deregister;
                impl ::subxt::blocks::StaticExtrinsic for Deregister {
                    const PALLET: &'static str = "FastUnstake";
                    const CALL: &'static str = "deregister";
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Control {
                    pub eras_to_check: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for Control {
                    const PALLET: &'static str = "FastUnstake";
                    const CALL: &'static str = "control";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::register_fast_unstake`]."]
                pub fn register_fast_unstake(
                    &self,
                ) -> ::subxt::tx::Payload<types::RegisterFastUnstake> {
                    ::subxt::tx::Payload::new_static(
                        "FastUnstake",
                        "register_fast_unstake",
                        types::RegisterFastUnstake {},
                        [
                            25u8, 175u8, 236u8, 174u8, 69u8, 228u8, 25u8, 109u8, 166u8, 101u8,
                            80u8, 189u8, 17u8, 201u8, 95u8, 152u8, 209u8, 42u8, 140u8, 186u8, 61u8,
                            73u8, 147u8, 103u8, 158u8, 39u8, 26u8, 54u8, 98u8, 3u8, 2u8, 49u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::deregister`]."]
                pub fn deregister(&self) -> ::subxt::tx::Payload<types::Deregister> {
                    ::subxt::tx::Payload::new_static(
                        "FastUnstake",
                        "deregister",
                        types::Deregister {},
                        [
                            228u8, 7u8, 6u8, 52u8, 110u8, 101u8, 41u8, 226u8, 254u8, 53u8, 44u8,
                            229u8, 20u8, 205u8, 131u8, 91u8, 118u8, 71u8, 43u8, 97u8, 99u8, 205u8,
                            75u8, 146u8, 27u8, 144u8, 219u8, 167u8, 98u8, 120u8, 11u8, 151u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::control`]."]
                pub fn control(
                    &self,
                    eras_to_check: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::Control> {
                    ::subxt::tx::Payload::new_static(
                        "FastUnstake",
                        "control",
                        types::Control { eras_to_check },
                        [
                            93u8, 245u8, 35u8, 21u8, 125u8, 71u8, 144u8, 99u8, 90u8, 41u8, 161u8,
                            90u8, 93u8, 132u8, 45u8, 155u8, 99u8, 175u8, 180u8, 1u8, 219u8, 37u8,
                            182u8, 95u8, 203u8, 91u8, 181u8, 159u8, 169u8, 134u8, 139u8, 9u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_fast_unstake::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A staker was unstaked."]
            pub struct Unstaked {
                pub stash: ::subxt::utils::AccountId32,
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::events::StaticEvent for Unstaked {
                const PALLET: &'static str = "FastUnstake";
                const EVENT: &'static str = "Unstaked";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A staker was slashed for requesting fast-unstake whilst being exposed."]
            pub struct Slashed {
                pub stash: ::subxt::utils::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "FastUnstake";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A batch was partially checked for the given eras, but the process did not finish."]
            pub struct BatchChecked {
                pub eras: ::std::vec::Vec<::core::primitive::u32>,
            }
            impl ::subxt::events::StaticEvent for BatchChecked {
                const PALLET: &'static str = "FastUnstake";
                const EVENT: &'static str = "BatchChecked";
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A batch of a given size was terminated."]
            #[doc = ""]
            #[doc = "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end"]
            #[doc = "of the batch. A new batch will be created upon next block."]
            pub struct BatchFinished {
                pub size: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for BatchFinished {
                const PALLET: &'static str = "FastUnstake";
                const EVENT: &'static str = "BatchFinished";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An internal error happened. Operations will be paused now."]
            pub struct InternalError;
            impl ::subxt::events::StaticEvent for InternalError {
                const PALLET: &'static str = "FastUnstake";
                const EVENT: &'static str = "InternalError";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current \"head of the queue\" being unstaked."]
                #[doc = ""]
                #[doc = " The head in itself can be a batch of up to [`Config::BatchSize`] stakers."]
                pub fn head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_fast_unstake::types::UnstakeRequest,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "FastUnstake",
                        "Head",
                        vec![],
                        [
                            15u8, 207u8, 39u8, 233u8, 50u8, 252u8, 32u8, 127u8, 77u8, 94u8, 170u8,
                            209u8, 72u8, 222u8, 77u8, 171u8, 175u8, 204u8, 191u8, 25u8, 15u8,
                            104u8, 52u8, 129u8, 42u8, 199u8, 77u8, 44u8, 11u8, 242u8, 234u8, 6u8,
                        ],
                    )
                }
                #[doc = " The map of all accounts wishing to be unstaked."]
                #[doc = ""]
                #[doc = " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit."]
                pub fn queue(
                    &self,
                    _0: impl ::std::borrow::Borrow<::subxt::utils::AccountId32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "FastUnstake",
                        "Queue",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            72u8, 219u8, 212u8, 99u8, 189u8, 234u8, 57u8, 32u8, 80u8, 130u8, 178u8,
                            101u8, 71u8, 186u8, 106u8, 129u8, 135u8, 165u8, 225u8, 112u8, 82u8,
                            4u8, 215u8, 104u8, 107u8, 192u8, 118u8, 238u8, 70u8, 205u8, 205u8,
                            148u8,
                        ],
                    )
                }
                #[doc = " The map of all accounts wishing to be unstaked."]
                #[doc = ""]
                #[doc = " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit."]
                pub fn queue_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u128,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "FastUnstake",
                        "Queue",
                        Vec::new(),
                        [
                            72u8, 219u8, 212u8, 99u8, 189u8, 234u8, 57u8, 32u8, 80u8, 130u8, 178u8,
                            101u8, 71u8, 186u8, 106u8, 129u8, 135u8, 165u8, 225u8, 112u8, 82u8,
                            4u8, 215u8, 104u8, 107u8, 192u8, 118u8, 238u8, 70u8, 205u8, 205u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "Counter for the related counted storage map"]
                pub fn counter_for_queue(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "FastUnstake",
                        "CounterForQueue",
                        vec![],
                        [
                            236u8, 101u8, 74u8, 61u8, 59u8, 250u8, 165u8, 139u8, 110u8, 79u8,
                            165u8, 124u8, 24u8, 188u8, 245u8, 175u8, 175u8, 102u8, 91u8, 121u8,
                            215u8, 21u8, 12u8, 11u8, 194u8, 69u8, 180u8, 161u8, 160u8, 27u8, 39u8,
                            17u8,
                        ],
                    )
                }
                #[doc = " Number of eras to check per block."]
                #[doc = ""]
                #[doc = " If set to 0, this pallet does absolutely nothing. Cannot be set to more than"]
                #[doc = " [`Config::MaxErasToCheckPerBlock`]."]
                #[doc = ""]
                #[doc = " Based on the amount of weight available at [`Pallet::on_idle`], up to this many eras are"]
                #[doc = " checked. The checking is represented by updating [`UnstakeRequest::checked`], which is"]
                #[doc = " stored in [`Head`]."]
                pub fn eras_to_check_per_block(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "FastUnstake",
                        "ErasToCheckPerBlock",
                        vec![],
                        [
                            231u8, 147u8, 37u8, 154u8, 97u8, 151u8, 16u8, 240u8, 87u8, 38u8, 218u8,
                            127u8, 68u8, 131u8, 2u8, 19u8, 46u8, 68u8, 232u8, 148u8, 197u8, 73u8,
                            129u8, 102u8, 60u8, 19u8, 200u8, 77u8, 74u8, 31u8, 251u8, 27u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Deposit to take for unstaking, to make sure we're able to slash the it in order to cover"]
                #[doc = " the costs of resources on unsuccessful unstake."]
                pub fn deposit(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "FastUnstake",
                        "Deposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod message_queue {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_message_queue::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_message_queue::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReapPage {
                    pub message_origin: ::core::primitive::u32,
                    pub page_index: ::core::primitive::u32,
                }
                impl ::subxt::blocks::StaticExtrinsic for ReapPage {
                    const PALLET: &'static str = "MessageQueue";
                    const CALL: &'static str = "reap_page";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExecuteOverweight {
                    pub message_origin: ::core::primitive::u32,
                    pub page: ::core::primitive::u32,
                    pub index: ::core::primitive::u32,
                    pub weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                }
                impl ::subxt::blocks::StaticExtrinsic for ExecuteOverweight {
                    const PALLET: &'static str = "MessageQueue";
                    const CALL: &'static str = "execute_overweight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::reap_page`]."]
                pub fn reap_page(
                    &self,
                    message_origin: ::core::primitive::u32,
                    page_index: ::core::primitive::u32,
                ) -> ::subxt::tx::Payload<types::ReapPage> {
                    ::subxt::tx::Payload::new_static(
                        "MessageQueue",
                        "reap_page",
                        types::ReapPage {
                            message_origin,
                            page_index,
                        },
                        [
                            241u8, 210u8, 154u8, 161u8, 247u8, 142u8, 112u8, 88u8, 75u8, 98u8,
                            36u8, 133u8, 152u8, 224u8, 196u8, 38u8, 63u8, 206u8, 66u8, 29u8, 146u8,
                            104u8, 204u8, 107u8, 226u8, 230u8, 33u8, 237u8, 179u8, 122u8, 145u8,
                            166u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::execute_overweight`]."]
                pub fn execute_overweight(
                    &self,
                    message_origin: ::core::primitive::u32,
                    page: ::core::primitive::u32,
                    index: ::core::primitive::u32,
                    weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                ) -> ::subxt::tx::Payload<types::ExecuteOverweight> {
                    ::subxt::tx::Payload::new_static(
                        "MessageQueue",
                        "execute_overweight",
                        types::ExecuteOverweight {
                            message_origin,
                            page,
                            index,
                            weight_limit,
                        },
                        [
                            230u8, 74u8, 104u8, 42u8, 35u8, 74u8, 122u8, 95u8, 200u8, 143u8, 223u8,
                            18u8, 127u8, 65u8, 112u8, 162u8, 212u8, 5u8, 66u8, 7u8, 29u8, 48u8,
                            205u8, 181u8, 238u8, 244u8, 89u8, 75u8, 111u8, 248u8, 47u8, 184u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_message_queue::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message discarded due to an error in the `MessageProcessor` (usually a format error)."]
            pub struct ProcessingFailed {
                pub id: [::core::primitive::u8; 32usize],
                pub origin: ::core::primitive::u32,
                pub error: runtime_types::frame_support::traits::messages::ProcessMessageError,
            }
            impl ::subxt::events::StaticEvent for ProcessingFailed {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "ProcessingFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message is processed."]
            pub struct Processed {
                pub id: [::core::primitive::u8; 32usize],
                pub origin: ::core::primitive::u32,
                pub weight_used: runtime_types::sp_weights::weight_v2::Weight,
                pub success: ::core::primitive::bool,
            }
            impl ::subxt::events::StaticEvent for Processed {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "Processed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Message placed in overweight queue."]
            pub struct OverweightEnqueued {
                pub id: [::core::primitive::u8; 32usize],
                pub origin: ::core::primitive::u32,
                pub page_index: ::core::primitive::u32,
                pub message_index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for OverweightEnqueued {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "OverweightEnqueued";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "This page was reaped."]
            pub struct PageReaped {
                pub origin: ::core::primitive::u32,
                pub index: ::core::primitive::u32,
            }
            impl ::subxt::events::StaticEvent for PageReaped {
                const PALLET: &'static str = "MessageQueue";
                const EVENT: &'static str = "PageReaped";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The index of the first and last (non-empty) pages."]
                pub fn book_state_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_message_queue::BookState<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "BookStateFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            86u8, 144u8, 123u8, 252u8, 154u8, 179u8, 81u8, 13u8, 240u8, 75u8,
                            248u8, 66u8, 153u8, 47u8, 228u8, 87u8, 65u8, 66u8, 160u8, 15u8, 109u8,
                            173u8, 51u8, 245u8, 184u8, 63u8, 139u8, 140u8, 73u8, 78u8, 40u8, 156u8,
                        ],
                    )
                }
                #[doc = " The index of the first and last (non-empty) pages."]
                pub fn book_state_for_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_message_queue::BookState<::core::primitive::u32>,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "BookStateFor",
                        Vec::new(),
                        [
                            86u8, 144u8, 123u8, 252u8, 154u8, 179u8, 81u8, 13u8, 240u8, 75u8,
                            248u8, 66u8, 153u8, 47u8, 228u8, 87u8, 65u8, 66u8, 160u8, 15u8, 109u8,
                            173u8, 51u8, 245u8, 184u8, 63u8, 139u8, 140u8, 73u8, 78u8, 40u8, 156u8,
                        ],
                    )
                }
                #[doc = " The origin at which we should begin servicing."]
                pub fn service_head(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "ServiceHead",
                        vec![],
                        [
                            5u8, 153u8, 60u8, 28u8, 12u8, 179u8, 210u8, 170u8, 31u8, 214u8, 6u8,
                            139u8, 56u8, 85u8, 156u8, 74u8, 54u8, 131u8, 211u8, 168u8, 79u8, 225u8,
                            143u8, 57u8, 194u8, 71u8, 178u8, 106u8, 166u8, 9u8, 17u8, 85u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_message_queue::Page<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "Pages",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            60u8, 194u8, 226u8, 212u8, 28u8, 10u8, 175u8, 245u8, 225u8, 252u8,
                            208u8, 22u8, 66u8, 153u8, 120u8, 233u8, 46u8, 76u8, 138u8, 137u8, 19u8,
                            90u8, 209u8, 115u8, 38u8, 238u8, 212u8, 75u8, 68u8, 159u8, 3u8, 248u8,
                        ],
                    )
                }
                #[doc = " The map of page indices to pages."]
                pub fn pages_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::pallet_message_queue::Page<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "MessageQueue",
                        "Pages",
                        Vec::new(),
                        [
                            60u8, 194u8, 226u8, 212u8, 28u8, 10u8, 175u8, 245u8, 225u8, 252u8,
                            208u8, 22u8, 66u8, 153u8, 120u8, 233u8, 46u8, 76u8, 138u8, 137u8, 19u8,
                            90u8, 209u8, 115u8, 38u8, 238u8, 212u8, 75u8, 68u8, 159u8, 3u8, 248u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The size of the page; this implies the maximum message size which can be sent."]
                #[doc = ""]
                #[doc = " A good value depends on the expected message sizes, their weights, the weight that is"]
                #[doc = " available for processing them and the maximal needed message size. The maximal message"]
                #[doc = " size is slightly lower than this as defined by [`MaxMessageLenOf`]."]
                pub fn heap_size(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "MessageQueue",
                        "HeapSize",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of stale pages (i.e. of overweight messages) allowed before culling"]
                #[doc = " can happen. Once there are more stale pages than this, then historical pages may be"]
                #[doc = " dropped, even if they contain unprocessed overweight messages."]
                pub fn max_stale(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "MessageQueue",
                        "MaxStale",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount of weight (if any) which should be provided to the message queue for"]
                #[doc = " servicing enqueued items."]
                #[doc = ""]
                #[doc = " This may be legitimately `None` in the case that you will call"]
                #[doc = " `ServiceQueues::service_queues` manually."]
                pub fn service_weight(
                    &self,
                ) -> ::subxt::constants::Address<
                    ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                > {
                    ::subxt::constants::Address::new_static(
                        "MessageQueue",
                        "ServiceWeight",
                        [
                            194u8, 157u8, 162u8, 120u8, 24u8, 204u8, 63u8, 167u8, 187u8, 244u8,
                            45u8, 182u8, 177u8, 32u8, 34u8, 72u8, 204u8, 252u8, 202u8, 221u8,
                            201u8, 158u8, 136u8, 75u8, 213u8, 102u8, 145u8, 143u8, 88u8, 141u8,
                            83u8, 195u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod pov {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::frame_benchmarking_pallet_pov::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct EmitEvent;
                impl ::subxt::blocks::StaticExtrinsic for EmitEvent {
                    const PALLET: &'static str = "Pov";
                    const CALL: &'static str = "emit_event";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Noop;
                impl ::subxt::blocks::StaticExtrinsic for Noop {
                    const PALLET: &'static str = "Pov";
                    const CALL: &'static str = "noop";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "See [`Pallet::emit_event`]."]
                pub fn emit_event(&self) -> ::subxt::tx::Payload<types::EmitEvent> {
                    ::subxt::tx::Payload::new_static(
                        "Pov",
                        "emit_event",
                        types::EmitEvent {},
                        [
                            222u8, 41u8, 43u8, 53u8, 157u8, 248u8, 94u8, 229u8, 44u8, 198u8, 174u8,
                            132u8, 149u8, 112u8, 89u8, 160u8, 124u8, 10u8, 162u8, 2u8, 142u8,
                            123u8, 3u8, 69u8, 151u8, 174u8, 122u8, 240u8, 255u8, 214u8, 38u8,
                            189u8,
                        ],
                    )
                }
                #[doc = "See [`Pallet::noop`]."]
                pub fn noop(&self) -> ::subxt::tx::Payload<types::Noop> {
                    ::subxt::tx::Payload::new_static(
                        "Pov",
                        "noop",
                        types::Noop {},
                        [
                            103u8, 20u8, 158u8, 2u8, 60u8, 89u8, 244u8, 85u8, 51u8, 23u8, 155u8,
                            110u8, 192u8, 195u8, 52u8, 53u8, 22u8, 28u8, 182u8, 14u8, 138u8, 255u8,
                            101u8, 169u8, 251u8, 222u8, 215u8, 90u8, 188u8, 20u8, 12u8, 131u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::frame_benchmarking_pallet_pov::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TestEvent;
            impl ::subxt::events::StaticEvent for TestEvent {
                const PALLET: &'static str = "Pov";
                const EVENT: &'static str = "TestEvent";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi;
            impl StorageApi {
                pub fn value(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "Value",
                        vec![],
                        [
                            82u8, 88u8, 90u8, 94u8, 161u8, 82u8, 41u8, 174u8, 222u8, 164u8, 61u8,
                            117u8, 17u8, 233u8, 7u8, 131u8, 183u8, 162u8, 17u8, 242u8, 4u8, 35u8,
                            148u8, 220u8, 251u8, 5u8, 225u8, 86u8, 10u8, 17u8, 126u8, 146u8,
                        ],
                    )
                }
                pub fn value2(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "Value2",
                        vec![],
                        [
                            82u8, 131u8, 180u8, 209u8, 150u8, 174u8, 8u8, 132u8, 51u8, 40u8, 182u8,
                            173u8, 244u8, 218u8, 95u8, 29u8, 238u8, 75u8, 227u8, 87u8, 88u8, 137u8,
                            93u8, 246u8, 146u8, 81u8, 13u8, 6u8, 112u8, 17u8, 182u8, 38u8,
                        ],
                    )
                }
                #[doc = " A value without a MEL bound."]
                pub fn unbounded_value(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "UnboundedValue",
                        vec![],
                        [
                            84u8, 92u8, 130u8, 47u8, 13u8, 147u8, 210u8, 55u8, 90u8, 34u8, 111u8,
                            222u8, 100u8, 200u8, 2u8, 169u8, 190u8, 4u8, 225u8, 231u8, 170u8,
                            212u8, 241u8, 26u8, 136u8, 4u8, 179u8, 156u8, 19u8, 37u8, 47u8, 167u8,
                        ],
                    )
                }
                #[doc = " A value with a MEL bound of 32 byte."]
                pub fn bounded_value(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "BoundedValue",
                        vec![],
                        [
                            175u8, 244u8, 118u8, 246u8, 118u8, 211u8, 86u8, 39u8, 40u8, 103u8,
                            51u8, 87u8, 21u8, 30u8, 103u8, 48u8, 109u8, 198u8, 9u8, 132u8, 86u8,
                            254u8, 191u8, 160u8, 89u8, 2u8, 148u8, 142u8, 229u8, 7u8, 49u8, 241u8,
                        ],
                    )
                }
                #[doc = " 4MiB value."]
                pub fn large_value(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "LargeValue",
                        vec![],
                        [
                            231u8, 53u8, 43u8, 55u8, 186u8, 28u8, 29u8, 225u8, 110u8, 250u8, 219u8,
                            113u8, 9u8, 169u8, 4u8, 127u8, 71u8, 223u8, 17u8, 107u8, 170u8, 154u8,
                            175u8, 33u8, 113u8, 77u8, 201u8, 124u8, 5u8, 70u8, 158u8, 139u8,
                        ],
                    )
                }
                pub fn large_value2(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "LargeValue2",
                        vec![],
                        [
                            164u8, 130u8, 27u8, 1u8, 55u8, 130u8, 151u8, 136u8, 143u8, 95u8, 162u8,
                            240u8, 95u8, 225u8, 201u8, 204u8, 26u8, 168u8, 114u8, 113u8, 185u8,
                            180u8, 204u8, 189u8, 45u8, 3u8, 248u8, 118u8, 76u8, 4u8, 242u8, 157u8,
                        ],
                    )
                }
                #[doc = " A map with a maximum of 1M entries."]
                pub fn map1_m(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "Map1M",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            175u8, 66u8, 106u8, 4u8, 125u8, 60u8, 30u8, 168u8, 78u8, 69u8, 246u8,
                            159u8, 215u8, 19u8, 198u8, 235u8, 8u8, 62u8, 233u8, 240u8, 81u8, 73u8,
                            13u8, 169u8, 124u8, 66u8, 75u8, 29u8, 155u8, 236u8, 232u8, 50u8,
                        ],
                    )
                }
                #[doc = " A map with a maximum of 1M entries."]
                pub fn map1_m_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "Map1M",
                        Vec::new(),
                        [
                            175u8, 66u8, 106u8, 4u8, 125u8, 60u8, 30u8, 168u8, 78u8, 69u8, 246u8,
                            159u8, 215u8, 19u8, 198u8, 235u8, 8u8, 62u8, 233u8, 240u8, 81u8, 73u8,
                            13u8, 169u8, 124u8, 66u8, 75u8, 29u8, 155u8, 236u8, 232u8, 50u8,
                        ],
                    )
                }
                #[doc = " A map with a maximum of 16M entries."]
                pub fn map16_m(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "Map16M",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            207u8, 80u8, 78u8, 185u8, 94u8, 74u8, 210u8, 131u8, 142u8, 118u8,
                            207u8, 120u8, 16u8, 218u8, 99u8, 44u8, 34u8, 174u8, 12u8, 232u8, 244u8,
                            33u8, 214u8, 48u8, 108u8, 126u8, 79u8, 24u8, 104u8, 113u8, 28u8, 198u8,
                        ],
                    )
                }
                #[doc = " A map with a maximum of 16M entries."]
                pub fn map16_m_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "Map16M",
                        Vec::new(),
                        [
                            207u8, 80u8, 78u8, 185u8, 94u8, 74u8, 210u8, 131u8, 142u8, 118u8,
                            207u8, 120u8, 16u8, 218u8, 99u8, 44u8, 34u8, 174u8, 12u8, 232u8, 244u8,
                            33u8, 214u8, 48u8, 108u8, 126u8, 79u8, 24u8, 104u8, 113u8, 28u8, 198u8,
                        ],
                    )
                }
                pub fn double_map1_m(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                    _1: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "DoubleMap1M",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            22u8, 167u8, 227u8, 148u8, 188u8, 48u8, 107u8, 21u8, 73u8, 166u8,
                            119u8, 248u8, 145u8, 111u8, 236u8, 231u8, 142u8, 158u8, 215u8, 230u8,
                            137u8, 17u8, 71u8, 158u8, 33u8, 133u8, 239u8, 35u8, 223u8, 243u8, 65u8,
                            4u8,
                        ],
                    )
                }
                pub fn double_map1_m_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::core::primitive::u32,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "DoubleMap1M",
                        Vec::new(),
                        [
                            22u8, 167u8, 227u8, 148u8, 188u8, 48u8, 107u8, 21u8, 73u8, 166u8,
                            119u8, 248u8, 145u8, 111u8, 236u8, 231u8, 142u8, 158u8, 215u8, 230u8,
                            137u8, 17u8, 71u8, 158u8, 33u8, 133u8, 239u8, 35u8, 223u8, 243u8, 65u8,
                            4u8,
                        ],
                    )
                }
                pub fn unbounded_map(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "UnboundedMap",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            226u8, 154u8, 164u8, 134u8, 113u8, 179u8, 30u8, 54u8, 28u8, 220u8,
                            82u8, 205u8, 127u8, 178u8, 89u8, 69u8, 150u8, 88u8, 52u8, 220u8, 20u8,
                            4u8, 176u8, 131u8, 63u8, 224u8, 101u8, 107u8, 30u8, 195u8, 232u8, 39u8,
                        ],
                    )
                }
                pub fn unbounded_map_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "UnboundedMap",
                        Vec::new(),
                        [
                            226u8, 154u8, 164u8, 134u8, 113u8, 179u8, 30u8, 54u8, 28u8, 220u8,
                            82u8, 205u8, 127u8, 178u8, 89u8, 69u8, 150u8, 88u8, 52u8, 220u8, 20u8,
                            4u8, 176u8, 131u8, 63u8, 224u8, 101u8, 107u8, 30u8, 195u8, 232u8, 39u8,
                        ],
                    )
                }
                pub fn unbounded_map2(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "UnboundedMap2",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            216u8, 76u8, 21u8, 181u8, 111u8, 106u8, 215u8, 106u8, 26u8, 176u8,
                            78u8, 51u8, 187u8, 113u8, 22u8, 230u8, 98u8, 69u8, 138u8, 53u8, 209u8,
                            102u8, 230u8, 125u8, 190u8, 170u8, 8u8, 130u8, 183u8, 78u8, 125u8,
                            45u8,
                        ],
                    )
                }
                pub fn unbounded_map2_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "UnboundedMap2",
                        Vec::new(),
                        [
                            216u8, 76u8, 21u8, 181u8, 111u8, 106u8, 215u8, 106u8, 26u8, 176u8,
                            78u8, 51u8, 187u8, 113u8, 22u8, 230u8, 98u8, 69u8, 138u8, 53u8, 209u8,
                            102u8, 230u8, 125u8, 190u8, 170u8, 8u8, 130u8, 183u8, 78u8, 125u8,
                            45u8,
                        ],
                    )
                }
                pub fn unbounded_map_twox(
                    &self,
                    _0: impl ::std::borrow::Borrow<::core::primitive::u32>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    ::subxt::storage::address::Yes,
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "UnboundedMapTwox",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            58u8, 125u8, 205u8, 129u8, 251u8, 180u8, 209u8, 165u8, 141u8, 206u8,
                            223u8, 154u8, 10u8, 96u8, 95u8, 132u8, 100u8, 208u8, 201u8, 96u8,
                            110u8, 51u8, 184u8, 155u8, 20u8, 142u8, 105u8, 49u8, 60u8, 139u8,
                            106u8, 181u8,
                        ],
                    )
                }
                pub fn unbounded_map_twox_root(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    ::std::vec::Vec<::core::primitive::u32>,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Pov",
                        "UnboundedMapTwox",
                        Vec::new(),
                        [
                            58u8, 125u8, 205u8, 129u8, 251u8, 180u8, 209u8, 165u8, 141u8, 206u8,
                            223u8, 154u8, 10u8, 96u8, 95u8, 132u8, 100u8, 208u8, 201u8, 96u8,
                            110u8, 51u8, 184u8, 155u8, 20u8, 142u8, 105u8, 49u8, 60u8, 139u8,
                            106u8, 181u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod statement {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_statement::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new statement is submitted"]
            pub struct NewStatement {
                pub account: ::subxt::utils::AccountId32,
                pub statement: runtime_types::sp_statement_store::Statement,
            }
            impl ::subxt::events::StaticEvent for NewStatement {
                const PALLET: &'static str = "Statement";
                const EVENT: &'static str = "NewStatement";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Min balance for priority statements."]
                pub fn statement_cost(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Statement",
                        "StatementCost",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Cost of data byte used for priority calculation."]
                pub fn byte_cost(&self) -> ::subxt::constants::Address<::core::primitive::u128> {
                    ::subxt::constants::Address::new_static(
                        "Statement",
                        "ByteCost",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Minimum number of statements allowed per account."]
                pub fn min_allowed_statements(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Statement",
                        "MinAllowedStatements",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum number of statements allowed per account."]
                pub fn max_allowed_statements(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Statement",
                        "MaxAllowedStatements",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum data bytes allowed per account."]
                pub fn min_allowed_bytes(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Statement",
                        "MinAllowedBytes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum data bytes allowed per account."]
                pub fn max_allowed_bytes(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Statement",
                        "MaxAllowedBytes",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_btree_map {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedBTreeMap<_0, _1>(pub ::subxt::utils::KeyedVec<_0, _1>);
            }
            pub mod bounded_btree_set {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedBTreeSet<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
        }
        pub mod finality_grandpa {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Equivocation<_0, _1, _2> {
                pub round_number: ::core::primitive::u64,
                pub identity: _0,
                pub first: (_1, _2),
                pub second: (_1, _2),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Precommit<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Prevote<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
        }
        pub mod frame_benchmarking_pallet_pov {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::emit_event`]."]
                    emit_event,
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::noop`]."]
                    noop,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    TestEvent,
                }
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchInfo {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PostDispatchInfo {
                    pub actual_weight:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod messages {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum ProcessMessageError {
                        #[codec(index = 0)]
                        BadFormat,
                        #[codec(index = 1)]
                        Corrupt,
                        #[codec(index = 2)]
                        Unsupported,
                        #[codec(index = 3)]
                        Overweight(runtime_types::sp_weights::weight_v2::Weight),
                        #[codec(index = 4)]
                        Yield,
                    }
                }
                pub mod preimages {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Bounded<_0> {
                        #[codec(index = 0)]
                        Legacy {
                            hash: ::subxt::utils::H256,
                        },
                        #[codec(index = 1)]
                        Inline(
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 2)]
                        Lookup {
                            hash: ::subxt::utils::H256,
                            len: ::core::primitive::u32,
                        },
                        __Ignore(::core::marker::PhantomData<_0>),
                    }
                }
                pub mod schedule {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DispatchTime<_0> {
                        #[codec(index = 0)]
                        At(_0),
                        #[codec(index = 1)]
                        After(_0),
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: codec :: Decode,
                            :: subxt :: ext :: codec :: Encode,
                            :: subxt :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: codec)]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::remark`]."]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_heap_pages`]."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_code`]."]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::set_code_without_checks`]."]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::set_storage`]."]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::kill_storage`]."]
                    kill_storage {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::kill_prefix`]."]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::remark_with_event`]."]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: ::subxt::utils::AccountId32,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: ::core::primitive::u32,
                pub providers: ::core::primitive::u32,
                pub sufficients: ::core::primitive::u32,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod kitchensink_runtime {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NposSolution16 {
                pub votes1: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes2: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    (
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ),
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes3: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 2usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes4: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 3usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes5: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 4usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes6: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 5usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes7: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 6usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes8: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 7usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes9: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 8usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes10: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 9usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes11: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 10usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes12: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 11usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes13: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 12usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes14: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 13usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes15: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 14usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
                pub votes16: ::std::vec::Vec<(
                    ::subxt::ext::codec::Compact<::core::primitive::u32>,
                    [(
                        ::subxt::ext::codec::Compact<::core::primitive::u16>,
                        ::subxt::ext::codec::Compact<
                            runtime_types::sp_arithmetic::per_things::PerU16,
                        >,
                    ); 15usize],
                    ::subxt::ext::codec::Compact<::core::primitive::u16>,
                )>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 14)]
                Council(runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>),
                #[codec(index = 15)]
                TechnicalCommittee(
                    runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 58)]
                AllianceMotion(
                    runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 4)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ProxyType {
                #[codec(index = 0)]
                Any,
                #[codec(index = 1)]
                NonTransfer,
                #[codec(index = 2)]
                Governance,
                #[codec(index = 3)]
                Staking,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 1)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 2)]
                Babe(runtime_types::pallet_babe::pallet::Call),
                #[codec(index = 3)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 5)]
                Indices(runtime_types::pallet_indices::pallet::Call),
                #[codec(index = 6)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 10)]
                ElectionProviderMultiPhase(
                    runtime_types::pallet_election_provider_multi_phase::pallet::Call,
                ),
                #[codec(index = 11)]
                Staking(runtime_types::pallet_staking::pallet::pallet::Call),
                #[codec(index = 12)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 13)]
                Democracy(runtime_types::pallet_democracy::pallet::Call),
                #[codec(index = 14)]
                Council(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 15)]
                TechnicalCommittee(runtime_types::pallet_collective::pallet::Call2),
                #[codec(index = 16)]
                Elections(runtime_types::pallet_elections_phragmen::pallet::Call),
                #[codec(index = 17)]
                TechnicalMembership(runtime_types::pallet_membership::pallet::Call),
                #[codec(index = 18)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Call),
                #[codec(index = 19)]
                Treasury(runtime_types::pallet_treasury::pallet::Call),
                #[codec(index = 20)]
                AssetRate(runtime_types::pallet_asset_rate::pallet::Call),
                #[codec(index = 21)]
                Contracts(runtime_types::pallet_contracts::pallet::Call),
                #[codec(index = 22)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
                #[codec(index = 23)]
                ImOnline(runtime_types::pallet_im_online::pallet::Call),
                #[codec(index = 28)]
                Identity(runtime_types::pallet_identity::pallet::Call),
                #[codec(index = 29)]
                Society(runtime_types::pallet_society::pallet::Call),
                #[codec(index = 30)]
                Recovery(runtime_types::pallet_recovery::pallet::Call),
                #[codec(index = 31)]
                Vesting(runtime_types::pallet_vesting::pallet::Call),
                #[codec(index = 32)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Call),
                #[codec(index = 33)]
                Glutton(runtime_types::pallet_glutton::pallet::Call),
                #[codec(index = 34)]
                Preimage(runtime_types::pallet_preimage::pallet::Call),
                #[codec(index = 35)]
                Proxy(runtime_types::pallet_proxy::pallet::Call),
                #[codec(index = 36)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 37)]
                Bounties(runtime_types::pallet_bounties::pallet::Call),
                #[codec(index = 38)]
                Tips(runtime_types::pallet_tips::pallet::Call),
                #[codec(index = 39)]
                Assets(runtime_types::pallet_assets::pallet::Call),
                #[codec(index = 40)]
                PoolAssets(runtime_types::pallet_assets::pallet::Call2),
                #[codec(index = 42)]
                Lottery(runtime_types::pallet_lottery::pallet::Call),
                #[codec(index = 43)]
                Nis(runtime_types::pallet_nis::pallet::Call),
                #[codec(index = 44)]
                Uniques(runtime_types::pallet_uniques::pallet::Call),
                #[codec(index = 45)]
                Nfts(runtime_types::pallet_nfts::pallet::Call),
                #[codec(index = 46)]
                NftFractionalization(runtime_types::pallet_nft_fractionalization::pallet::Call),
                #[codec(index = 47)]
                Salary(runtime_types::pallet_salary::pallet::Call),
                #[codec(index = 48)]
                CoreFellowship(runtime_types::pallet_core_fellowship::pallet::Call),
                #[codec(index = 49)]
                TransactionStorage(runtime_types::pallet_transaction_storage::pallet::Call),
                #[codec(index = 50)]
                VoterList(runtime_types::pallet_bags_list::pallet::Call),
                #[codec(index = 51)]
                StateTrieMigration(runtime_types::pallet_state_trie_migration::pallet::Call),
                #[codec(index = 52)]
                ChildBounties(runtime_types::pallet_child_bounties::pallet::Call),
                #[codec(index = 53)]
                Referenda(runtime_types::pallet_referenda::pallet::Call),
                #[codec(index = 54)]
                Remark(runtime_types::pallet_remark::pallet::Call),
                #[codec(index = 55)]
                RootTesting(runtime_types::pallet_root_testing::pallet::Call),
                #[codec(index = 56)]
                ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Call),
                #[codec(index = 57)]
                Whitelist(runtime_types::pallet_whitelist::pallet::Call),
                #[codec(index = 58)]
                AllianceMotion(runtime_types::pallet_collective::pallet::Call3),
                #[codec(index = 59)]
                Alliance(runtime_types::pallet_alliance::pallet::Call),
                #[codec(index = 60)]
                NominationPools(runtime_types::pallet_nomination_pools::pallet::Call),
                #[codec(index = 61)]
                RankedPolls(runtime_types::pallet_referenda::pallet::Call2),
                #[codec(index = 62)]
                RankedCollective(runtime_types::pallet_ranked_collective::pallet::Call),
                #[codec(index = 63)]
                AssetConversion(runtime_types::pallet_asset_conversion::pallet::Call),
                #[codec(index = 64)]
                FastUnstake(runtime_types::pallet_fast_unstake::pallet::Call),
                #[codec(index = 65)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Call),
                #[codec(index = 66)]
                Pov(runtime_types::frame_benchmarking_pallet_pov::pallet::Call),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeError {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Error),
                #[codec(index = 1)]
                Utility(runtime_types::pallet_utility::pallet::Error),
                #[codec(index = 2)]
                Babe(runtime_types::pallet_babe::pallet::Error),
                #[codec(index = 5)]
                Indices(runtime_types::pallet_indices::pallet::Error),
                #[codec(index = 6)]
                Balances(runtime_types::pallet_balances::pallet::Error),
                #[codec(index = 10)]
                ElectionProviderMultiPhase(
                    runtime_types::pallet_election_provider_multi_phase::pallet::Error,
                ),
                #[codec(index = 11)]
                Staking(runtime_types::pallet_staking::pallet::pallet::Error),
                #[codec(index = 12)]
                Session(runtime_types::pallet_session::pallet::Error),
                #[codec(index = 13)]
                Democracy(runtime_types::pallet_democracy::pallet::Error),
                #[codec(index = 14)]
                Council(runtime_types::pallet_collective::pallet::Error),
                #[codec(index = 15)]
                TechnicalCommittee(runtime_types::pallet_collective::pallet::Error2),
                #[codec(index = 16)]
                Elections(runtime_types::pallet_elections_phragmen::pallet::Error),
                #[codec(index = 17)]
                TechnicalMembership(runtime_types::pallet_membership::pallet::Error),
                #[codec(index = 18)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Error),
                #[codec(index = 19)]
                Treasury(runtime_types::pallet_treasury::pallet::Error),
                #[codec(index = 20)]
                AssetRate(runtime_types::pallet_asset_rate::pallet::Error),
                #[codec(index = 21)]
                Contracts(runtime_types::pallet_contracts::pallet::Error),
                #[codec(index = 22)]
                Sudo(runtime_types::pallet_sudo::pallet::Error),
                #[codec(index = 23)]
                ImOnline(runtime_types::pallet_im_online::pallet::Error),
                #[codec(index = 28)]
                Identity(runtime_types::pallet_identity::pallet::Error),
                #[codec(index = 29)]
                Society(runtime_types::pallet_society::pallet::Error),
                #[codec(index = 30)]
                Recovery(runtime_types::pallet_recovery::pallet::Error),
                #[codec(index = 31)]
                Vesting(runtime_types::pallet_vesting::pallet::Error),
                #[codec(index = 32)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Error),
                #[codec(index = 33)]
                Glutton(runtime_types::pallet_glutton::pallet::Error),
                #[codec(index = 34)]
                Preimage(runtime_types::pallet_preimage::pallet::Error),
                #[codec(index = 35)]
                Proxy(runtime_types::pallet_proxy::pallet::Error),
                #[codec(index = 36)]
                Multisig(runtime_types::pallet_multisig::pallet::Error),
                #[codec(index = 37)]
                Bounties(runtime_types::pallet_bounties::pallet::Error),
                #[codec(index = 38)]
                Tips(runtime_types::pallet_tips::pallet::Error),
                #[codec(index = 39)]
                Assets(runtime_types::pallet_assets::pallet::Error),
                #[codec(index = 40)]
                PoolAssets(runtime_types::pallet_assets::pallet::Error2),
                #[codec(index = 42)]
                Lottery(runtime_types::pallet_lottery::pallet::Error),
                #[codec(index = 43)]
                Nis(runtime_types::pallet_nis::pallet::Error),
                #[codec(index = 44)]
                Uniques(runtime_types::pallet_uniques::pallet::Error),
                #[codec(index = 45)]
                Nfts(runtime_types::pallet_nfts::pallet::Error),
                #[codec(index = 46)]
                NftFractionalization(runtime_types::pallet_nft_fractionalization::pallet::Error),
                #[codec(index = 47)]
                Salary(runtime_types::pallet_salary::pallet::Error),
                #[codec(index = 48)]
                CoreFellowship(runtime_types::pallet_core_fellowship::pallet::Error),
                #[codec(index = 49)]
                TransactionStorage(runtime_types::pallet_transaction_storage::pallet::Error),
                #[codec(index = 50)]
                VoterList(runtime_types::pallet_bags_list::pallet::Error),
                #[codec(index = 51)]
                StateTrieMigration(runtime_types::pallet_state_trie_migration::pallet::Error),
                #[codec(index = 52)]
                ChildBounties(runtime_types::pallet_child_bounties::pallet::Error),
                #[codec(index = 53)]
                Referenda(runtime_types::pallet_referenda::pallet::Error),
                #[codec(index = 54)]
                Remark(runtime_types::pallet_remark::pallet::Error),
                #[codec(index = 56)]
                ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Error),
                #[codec(index = 57)]
                Whitelist(runtime_types::pallet_whitelist::pallet::Error),
                #[codec(index = 58)]
                AllianceMotion(runtime_types::pallet_collective::pallet::Error3),
                #[codec(index = 59)]
                Alliance(runtime_types::pallet_alliance::pallet::Error),
                #[codec(index = 60)]
                NominationPools(runtime_types::pallet_nomination_pools::pallet::Error),
                #[codec(index = 61)]
                RankedPolls(runtime_types::pallet_referenda::pallet::Error2),
                #[codec(index = 62)]
                RankedCollective(runtime_types::pallet_ranked_collective::pallet::Error),
                #[codec(index = 63)]
                AssetConversion(runtime_types::pallet_asset_conversion::pallet::Error),
                #[codec(index = 64)]
                FastUnstake(runtime_types::pallet_fast_unstake::pallet::Error),
                #[codec(index = 65)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Error),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 1)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 5)]
                Indices(runtime_types::pallet_indices::pallet::Event),
                #[codec(index = 6)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 7)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 8)]
                AssetTxPayment(runtime_types::pallet_asset_tx_payment::pallet::Event),
                #[codec(index = 9)]
                AssetConversionTxPayment(
                    runtime_types::pallet_asset_conversion_tx_payment::pallet::Event,
                ),
                #[codec(index = 10)]
                ElectionProviderMultiPhase(
                    runtime_types::pallet_election_provider_multi_phase::pallet::Event,
                ),
                #[codec(index = 11)]
                Staking(runtime_types::pallet_staking::pallet::pallet::Event),
                #[codec(index = 12)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 13)]
                Democracy(runtime_types::pallet_democracy::pallet::Event),
                #[codec(index = 14)]
                Council(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 15)]
                TechnicalCommittee(runtime_types::pallet_collective::pallet::Event2),
                #[codec(index = 16)]
                Elections(runtime_types::pallet_elections_phragmen::pallet::Event),
                #[codec(index = 17)]
                TechnicalMembership(runtime_types::pallet_membership::pallet::Event),
                #[codec(index = 18)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Event),
                #[codec(index = 19)]
                Treasury(runtime_types::pallet_treasury::pallet::Event),
                #[codec(index = 20)]
                AssetRate(runtime_types::pallet_asset_rate::pallet::Event),
                #[codec(index = 21)]
                Contracts(runtime_types::pallet_contracts::pallet::Event),
                #[codec(index = 22)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
                #[codec(index = 23)]
                ImOnline(runtime_types::pallet_im_online::pallet::Event),
                #[codec(index = 25)]
                Offences(runtime_types::pallet_offences::pallet::Event),
                #[codec(index = 28)]
                Identity(runtime_types::pallet_identity::pallet::Event),
                #[codec(index = 29)]
                Society(runtime_types::pallet_society::pallet::Event),
                #[codec(index = 30)]
                Recovery(runtime_types::pallet_recovery::pallet::Event),
                #[codec(index = 31)]
                Vesting(runtime_types::pallet_vesting::pallet::Event),
                #[codec(index = 32)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Event),
                #[codec(index = 33)]
                Glutton(runtime_types::pallet_glutton::pallet::Event),
                #[codec(index = 34)]
                Preimage(runtime_types::pallet_preimage::pallet::Event),
                #[codec(index = 35)]
                Proxy(runtime_types::pallet_proxy::pallet::Event),
                #[codec(index = 36)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 37)]
                Bounties(runtime_types::pallet_bounties::pallet::Event),
                #[codec(index = 38)]
                Tips(runtime_types::pallet_tips::pallet::Event),
                #[codec(index = 39)]
                Assets(runtime_types::pallet_assets::pallet::Event),
                #[codec(index = 40)]
                PoolAssets(runtime_types::pallet_assets::pallet::Event2),
                #[codec(index = 42)]
                Lottery(runtime_types::pallet_lottery::pallet::Event),
                #[codec(index = 43)]
                Nis(runtime_types::pallet_nis::pallet::Event),
                #[codec(index = 44)]
                Uniques(runtime_types::pallet_uniques::pallet::Event),
                #[codec(index = 45)]
                Nfts(runtime_types::pallet_nfts::pallet::Event),
                #[codec(index = 46)]
                NftFractionalization(runtime_types::pallet_nft_fractionalization::pallet::Event),
                #[codec(index = 47)]
                Salary(runtime_types::pallet_salary::pallet::Event),
                #[codec(index = 48)]
                CoreFellowship(runtime_types::pallet_core_fellowship::pallet::Event),
                #[codec(index = 49)]
                TransactionStorage(runtime_types::pallet_transaction_storage::pallet::Event),
                #[codec(index = 50)]
                VoterList(runtime_types::pallet_bags_list::pallet::Event),
                #[codec(index = 51)]
                StateTrieMigration(runtime_types::pallet_state_trie_migration::pallet::Event),
                #[codec(index = 52)]
                ChildBounties(runtime_types::pallet_child_bounties::pallet::Event),
                #[codec(index = 53)]
                Referenda(runtime_types::pallet_referenda::pallet::Event),
                #[codec(index = 54)]
                Remark(runtime_types::pallet_remark::pallet::Event),
                #[codec(index = 56)]
                ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Event),
                #[codec(index = 57)]
                Whitelist(runtime_types::pallet_whitelist::pallet::Event),
                #[codec(index = 58)]
                AllianceMotion(runtime_types::pallet_collective::pallet::Event3),
                #[codec(index = 59)]
                Alliance(runtime_types::pallet_alliance::pallet::Event),
                #[codec(index = 60)]
                NominationPools(runtime_types::pallet_nomination_pools::pallet::Event),
                #[codec(index = 61)]
                RankedPolls(runtime_types::pallet_referenda::pallet::Event2),
                #[codec(index = 62)]
                RankedCollective(runtime_types::pallet_ranked_collective::pallet::Event),
                #[codec(index = 63)]
                AssetConversion(runtime_types::pallet_asset_conversion::pallet::Event),
                #[codec(index = 64)]
                FastUnstake(runtime_types::pallet_fast_unstake::pallet::Event),
                #[codec(index = 65)]
                MessageQueue(runtime_types::pallet_message_queue::pallet::Event),
                #[codec(index = 66)]
                Pov(runtime_types::frame_benchmarking_pallet_pov::pallet::Event),
                #[codec(index = 67)]
                Statement(runtime_types::pallet_statement::pallet::Event),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeHoldReason {
                #[codec(index = 43)]
                Nis(runtime_types::pallet_nis::pallet::HoldReason),
                #[codec(index = 46)]
                NftFractionalization(
                    runtime_types::pallet_nft_fractionalization::pallet::HoldReason,
                ),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SessionKeys {
                pub grandpa: runtime_types::sp_consensus_grandpa::app::Public,
                pub babe: runtime_types::sp_consensus_babe::app::Public,
                pub im_online: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                pub authority_discovery: runtime_types::sp_authority_discovery::app::Public,
            }
        }
        pub mod pallet_alliance {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::propose`]."]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::init_members`]."]
                    init_members {
                        fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::disband`]."]
                    disband {
                        witness: runtime_types::pallet_alliance::types::DisbandWitness,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::set_rule`]."]
                    set_rule {
                        rule: runtime_types::pallet_alliance::types::Cid,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::announce`]."]
                    announce {
                        announcement: runtime_types::pallet_alliance::types::Cid,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::remove_announcement`]."]
                    remove_announcement {
                        announcement: runtime_types::pallet_alliance::types::Cid,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::join_alliance`]."]
                    join_alliance,
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::nominate_ally`]."]
                    nominate_ally {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::elevate_ally`]."]
                    elevate_ally {
                        ally: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::give_retirement_notice`]."]
                    give_retirement_notice,
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::retire`]."]
                    retire,
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::kick_member`]."]
                    kick_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::add_unscrupulous_items`]."]
                    add_unscrupulous_items {
                        items: ::std::vec::Vec<
                            runtime_types::pallet_alliance::UnscrupulousItem<
                                ::subxt::utils::AccountId32,
                                runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                    ::core::primitive::u8,
                                >,
                            >,
                        >,
                    },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::remove_unscrupulous_items`]."]
                    remove_unscrupulous_items {
                        items: ::std::vec::Vec<
                            runtime_types::pallet_alliance::UnscrupulousItem<
                                ::subxt::utils::AccountId32,
                                runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                    ::core::primitive::u8,
                                >,
                            >,
                        >,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::close`]."]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::abdicate_fellow_status`]."]
                    abdicate_fellow_status,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The Alliance has not been initialized yet, therefore accounts cannot join it."]
                    AllianceNotYetInitialized,
                    #[codec(index = 1)]
                    #[doc = "The Alliance has been initialized, therefore cannot be initialized again."]
                    AllianceAlreadyInitialized,
                    #[codec(index = 2)]
                    #[doc = "Account is already a member."]
                    AlreadyMember,
                    #[codec(index = 3)]
                    #[doc = "Account is not a member."]
                    NotMember,
                    #[codec(index = 4)]
                    #[doc = "Account is not an ally."]
                    NotAlly,
                    #[codec(index = 5)]
                    #[doc = "Account does not have voting rights."]
                    NoVotingRights,
                    #[codec(index = 6)]
                    #[doc = "Account is already an elevated (fellow) member."]
                    AlreadyElevated,
                    #[codec(index = 7)]
                    #[doc = "Item is already listed as unscrupulous."]
                    AlreadyUnscrupulous,
                    #[codec(index = 8)]
                    #[doc = "Account has been deemed unscrupulous by the Alliance and is not welcome to join or be"]
                    #[doc = "nominated."]
                    AccountNonGrata,
                    #[codec(index = 9)]
                    #[doc = "Item has not been deemed unscrupulous."]
                    NotListedAsUnscrupulous,
                    #[codec(index = 10)]
                    #[doc = "The number of unscrupulous items exceeds `MaxUnscrupulousItems`."]
                    TooManyUnscrupulousItems,
                    #[codec(index = 11)]
                    #[doc = "Length of website URL exceeds `MaxWebsiteUrlLength`."]
                    TooLongWebsiteUrl,
                    #[codec(index = 12)]
                    #[doc = "Balance is insufficient for the required deposit."]
                    InsufficientFunds,
                    #[codec(index = 13)]
                    #[doc = "The account's identity does not have display field and website field."]
                    WithoutIdentityDisplayAndWebsite,
                    #[codec(index = 14)]
                    #[doc = "The account's identity has no good judgement."]
                    WithoutGoodIdentityJudgement,
                    #[codec(index = 15)]
                    #[doc = "The proposal hash is not found."]
                    MissingProposalHash,
                    #[codec(index = 16)]
                    #[doc = "The announcement is not found."]
                    MissingAnnouncement,
                    #[codec(index = 17)]
                    #[doc = "Number of members exceeds `MaxMembersCount`."]
                    TooManyMembers,
                    #[codec(index = 18)]
                    #[doc = "Number of announcements exceeds `MaxAnnouncementsCount`."]
                    TooManyAnnouncements,
                    #[codec(index = 19)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 20)]
                    #[doc = "Account already gave retirement notice"]
                    AlreadyRetiring,
                    #[codec(index = 21)]
                    #[doc = "Account did not give a retirement notice required to retire."]
                    RetirementNoticeNotGiven,
                    #[codec(index = 22)]
                    #[doc = "Retirement period has not passed."]
                    RetirementPeriodNotPassed,
                    #[codec(index = 23)]
                    #[doc = "Fellows must be provided to initialize the Alliance."]
                    FellowsMissing,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new rule has been set."]
                    NewRuleSet {
                        rule: runtime_types::pallet_alliance::types::Cid,
                    },
                    #[codec(index = 1)]
                    #[doc = "A new announcement has been proposed."]
                    Announced {
                        announcement: runtime_types::pallet_alliance::types::Cid,
                    },
                    #[codec(index = 2)]
                    #[doc = "An on-chain announcement has been removed."]
                    AnnouncementRemoved {
                        announcement: runtime_types::pallet_alliance::types::Cid,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some accounts have been initialized as members (fellows/allies)."]
                    MembersInitialized {
                        fellows: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        allies: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account has been added as an Ally and reserved its deposit."]
                    NewAllyJoined {
                        ally: ::subxt::utils::AccountId32,
                        nominator: ::core::option::Option<::subxt::utils::AccountId32>,
                        reserved: ::core::option::Option<::core::primitive::u128>,
                    },
                    #[codec(index = 5)]
                    #[doc = "An ally has been elevated to Fellow."]
                    AllyElevated { ally: ::subxt::utils::AccountId32 },
                    #[codec(index = 6)]
                    #[doc = "A member gave retirement notice and their retirement period started."]
                    MemberRetirementPeriodStarted { member: ::subxt::utils::AccountId32 },
                    #[codec(index = 7)]
                    #[doc = "A member has retired with its deposit unreserved."]
                    MemberRetired {
                        member: ::subxt::utils::AccountId32,
                        unreserved: ::core::option::Option<::core::primitive::u128>,
                    },
                    #[codec(index = 8)]
                    #[doc = "A member has been kicked out with its deposit slashed."]
                    MemberKicked {
                        member: ::subxt::utils::AccountId32,
                        slashed: ::core::option::Option<::core::primitive::u128>,
                    },
                    #[codec(index = 9)]
                    #[doc = "Accounts or websites have been added into the list of unscrupulous items."]
                    UnscrupulousItemAdded {
                        items: ::std::vec::Vec<
                            runtime_types::pallet_alliance::UnscrupulousItem<
                                ::subxt::utils::AccountId32,
                                runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                    ::core::primitive::u8,
                                >,
                            >,
                        >,
                    },
                    #[codec(index = 10)]
                    #[doc = "Accounts or websites have been removed from the list of unscrupulous items."]
                    UnscrupulousItemRemoved {
                        items: ::std::vec::Vec<
                            runtime_types::pallet_alliance::UnscrupulousItem<
                                ::subxt::utils::AccountId32,
                                runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                    ::core::primitive::u8,
                                >,
                            >,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "Alliance disbanded. Includes number deleted members and unreserved deposits."]
                    AllianceDisbanded {
                        fellow_members: ::core::primitive::u32,
                        ally_members: ::core::primitive::u32,
                        unreserved: ::core::primitive::u32,
                    },
                    #[codec(index = 12)]
                    #[doc = "A Fellow abdicated their voting rights. They are now an Ally."]
                    FellowAbdicated { fellow: ::subxt::utils::AccountId32 },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Cid {
                    pub version: runtime_types::pallet_alliance::types::Version,
                    pub codec: ::core::primitive::u64,
                    pub hash: runtime_types::pallet_alliance::types::Multihash,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DisbandWitness {
                    #[codec(compact)]
                    pub fellow_members: ::core::primitive::u32,
                    #[codec(compact)]
                    pub ally_members: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Multihash {
                    pub code: ::core::primitive::u64,
                    pub digest: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Version {
                    #[codec(index = 0)]
                    V0,
                    #[codec(index = 1)]
                    V1,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MemberRole {
                #[codec(index = 0)]
                Fellow,
                #[codec(index = 1)]
                Ally,
                #[codec(index = 2)]
                Retiring,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum UnscrupulousItem<_0, _1> {
                #[codec(index = 0)]
                AccountId(_0),
                #[codec(index = 1)]
                Website(_1),
            }
        }
        pub mod pallet_asset_conversion {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Pallet's callable functions."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::create_pool`]."]
                    create_pool {
                        asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                        asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::add_liquidity`]."]
                    add_liquidity {
                        asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                        asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                        amount1_desired: ::core::primitive::u128,
                        amount2_desired: ::core::primitive::u128,
                        amount1_min: ::core::primitive::u128,
                        amount2_min: ::core::primitive::u128,
                        mint_to: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::remove_liquidity`]."]
                    remove_liquidity {
                        asset1: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                        asset2: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                        lp_token_burn: ::core::primitive::u128,
                        amount1_min_receive: ::core::primitive::u128,
                        amount2_min_receive: ::core::primitive::u128,
                        withdraw_to: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::swap_exact_tokens_for_tokens`]."]
                    swap_exact_tokens_for_tokens {
                        path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                        >,
                        amount_in: ::core::primitive::u128,
                        amount_out_min: ::core::primitive::u128,
                        send_to: ::subxt::utils::AccountId32,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::swap_tokens_for_exact_tokens`]."]
                    swap_tokens_for_exact_tokens {
                        path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                        >,
                        amount_out: ::core::primitive::u128,
                        amount_in_max: ::core::primitive::u128,
                        send_to: ::subxt::utils::AccountId32,
                        keep_alive: ::core::primitive::bool,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Provided assets are equal."]
                    EqualAssets,
                    #[codec(index = 1)]
                    #[doc = "Pool already exists."]
                    PoolExists,
                    #[codec(index = 2)]
                    #[doc = "Desired amount can't be zero."]
                    WrongDesiredAmount,
                    #[codec(index = 3)]
                    #[doc = "Provided amount should be greater than or equal to the existential deposit/asset's"]
                    #[doc = "minimal amount."]
                    AmountOneLessThanMinimal,
                    #[codec(index = 4)]
                    #[doc = "Provided amount should be greater than or equal to the existential deposit/asset's"]
                    #[doc = "minimal amount."]
                    AmountTwoLessThanMinimal,
                    #[codec(index = 5)]
                    #[doc = "Reserve needs to always be greater than or equal to the existential deposit/asset's"]
                    #[doc = "minimal amount."]
                    ReserveLeftLessThanMinimal,
                    #[codec(index = 6)]
                    #[doc = "Desired amount can't be equal to the pool reserve."]
                    AmountOutTooHigh,
                    #[codec(index = 7)]
                    #[doc = "The pool doesn't exist."]
                    PoolNotFound,
                    #[codec(index = 8)]
                    #[doc = "An overflow happened."]
                    Overflow,
                    #[codec(index = 9)]
                    #[doc = "The minimal amount requirement for the first token in the pair wasn't met."]
                    AssetOneDepositDidNotMeetMinimum,
                    #[codec(index = 10)]
                    #[doc = "The minimal amount requirement for the second token in the pair wasn't met."]
                    AssetTwoDepositDidNotMeetMinimum,
                    #[codec(index = 11)]
                    #[doc = "The minimal amount requirement for the first token in the pair wasn't met."]
                    AssetOneWithdrawalDidNotMeetMinimum,
                    #[codec(index = 12)]
                    #[doc = "The minimal amount requirement for the second token in the pair wasn't met."]
                    AssetTwoWithdrawalDidNotMeetMinimum,
                    #[codec(index = 13)]
                    #[doc = "Optimal calculated amount is less than desired."]
                    OptimalAmountLessThanDesired,
                    #[codec(index = 14)]
                    #[doc = "Insufficient liquidity minted."]
                    InsufficientLiquidityMinted,
                    #[codec(index = 15)]
                    #[doc = "Requested liquidity can't be zero."]
                    ZeroLiquidity,
                    #[codec(index = 16)]
                    #[doc = "Amount can't be zero."]
                    ZeroAmount,
                    #[codec(index = 17)]
                    #[doc = "Insufficient liquidity in the pool."]
                    InsufficientLiquidity,
                    #[codec(index = 18)]
                    #[doc = "Calculated amount out is less than provided minimum amount."]
                    ProvidedMinimumNotSufficientForSwap,
                    #[codec(index = 19)]
                    #[doc = "Provided maximum amount is not sufficient for swap."]
                    ProvidedMaximumNotSufficientForSwap,
                    #[codec(index = 20)]
                    #[doc = "Only pools with native on one side are valid."]
                    PoolMustContainNativeCurrency,
                    #[codec(index = 21)]
                    #[doc = "The provided path must consists of 2 assets at least."]
                    InvalidPath,
                    #[codec(index = 22)]
                    #[doc = "It was not possible to calculate path data."]
                    PathError,
                    #[codec(index = 23)]
                    #[doc = "The provided path must consists of unique assets."]
                    NonUniquePath,
                    #[codec(index = 24)]
                    #[doc = "Unable to find an element in an array/vec that should have one-to-one correspondence"]
                    #[doc = "with another. For example, an array of assets constituting a `path` should have a"]
                    #[doc = "corresponding array of `amounts` along the path."]
                    CorrespondenceError,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A successful call of the `CretaPool` extrinsic will create this event."]
                    PoolCreated {
                        creator: ::subxt::utils::AccountId32,
                        pool_id: (
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                        ),
                        lp_token: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A successful call of the `AddLiquidity` extrinsic will create this event."]
                    LiquidityAdded {
                        who: ::subxt::utils::AccountId32,
                        mint_to: ::subxt::utils::AccountId32,
                        pool_id: (
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                        ),
                        amount1_provided: ::core::primitive::u128,
                        amount2_provided: ::core::primitive::u128,
                        lp_token: ::core::primitive::u32,
                        lp_token_minted: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A successful call of the `RemoveLiquidity` extrinsic will create this event."]
                    LiquidityRemoved {
                        who: ::subxt::utils::AccountId32,
                        withdraw_to: ::subxt::utils::AccountId32,
                        pool_id: (
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                        ),
                        amount1: ::core::primitive::u128,
                        amount2: ::core::primitive::u128,
                        lp_token: ::core::primitive::u32,
                        lp_token_burned: ::core::primitive::u128,
                        withdrawal_fee: runtime_types::sp_arithmetic::per_things::Permill,
                    },
                    #[codec(index = 3)]
                    #[doc = "Assets have been converted from one to another. Both `SwapExactTokenForToken`"]
                    #[doc = "and `SwapTokenForExactToken` will generate this event."]
                    SwapExecuted {
                        who: ::subxt::utils::AccountId32,
                        send_to: ::subxt::utils::AccountId32,
                        path: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                                ::core::primitive::u32,
                            >,
                        >,
                        amount_in: ::core::primitive::u128,
                        amount_out: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "An amount has been transferred from one account to another."]
                    Transfer {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        asset: runtime_types::pallet_asset_conversion::types::NativeOrAssetId<
                            ::core::primitive::u32,
                        >,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum NativeOrAssetId<_0> {
                    #[codec(index = 0)]
                    Native,
                    #[codec(index = 1)]
                    Asset(_0),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PoolInfo<_0> {
                    pub lp_token: _0,
                }
            }
        }
        pub mod pallet_asset_conversion_tx_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who` in an asset `asset_id`."]
                    AssetTxFeePaid {
                        who: ::subxt::utils::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                        asset_id: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A swap of the refund in native currency back to asset failed."]
                    AssetRefundFailed {
                        native_amount_kept: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChargeAssetTxPayment {
                #[codec(compact)]
                pub tip: ::core::primitive::u128,
                pub asset_id: ::core::option::Option<::core::primitive::u32>,
            }
        }
        pub mod pallet_asset_rate {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::create`]."]
                    create {
                        asset_id: ::core::primitive::u32,
                        rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::update`]."]
                    update {
                        asset_id: ::core::primitive::u32,
                        rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::remove`]."]
                    remove { asset_id: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The given asset ID is unknown."]
                    UnknownAssetId,
                    #[codec(index = 1)]
                    #[doc = "The given asset ID already has an assigned conversion rate and cannot be re-created."]
                    AlreadyExists,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    AssetRateCreated {
                        asset_id: ::core::primitive::u32,
                        rate: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    },
                    #[codec(index = 1)]
                    AssetRateRemoved { asset_id: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    AssetRateUpdated {
                        asset_id: ::core::primitive::u32,
                        old: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                        new: runtime_types::sp_arithmetic::fixed_point::FixedU128,
                    },
                }
            }
        }
        pub mod pallet_asset_tx_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who` in an asset `asset_id`."]
                    AssetTxFeePaid {
                        who: ::subxt::utils::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                        asset_id: ::core::option::Option<::core::primitive::u32>,
                    },
                }
            }
        }
        pub mod pallet_assets {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::create`]."]
                    create {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::force_create`]."]
                    force_create {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        is_sufficient: ::core::primitive::bool,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::start_destroy`]."]
                    start_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::destroy_accounts`]."]
                    destroy_accounts {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::destroy_approvals`]."]
                    destroy_approvals {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::finish_destroy`]."]
                    finish_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::mint`]."]
                    mint {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::burn`]."]
                    burn {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::transfer`]."]
                    transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::transfer_keep_alive`]."]
                    transfer_keep_alive {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::force_transfer`]."]
                    force_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        source: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::freeze`]."]
                    freeze {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::thaw`]."]
                    thaw {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::freeze_asset`]."]
                    freeze_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::thaw_asset`]."]
                    thaw_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::transfer_ownership`]."]
                    transfer_ownership {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::set_team`]."]
                    set_team {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        issuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                    },
                    #[codec(index = 18)]
                    #[doc = "See [`Pallet::clear_metadata`]."]
                    clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "See [`Pallet::force_set_metadata`]."]
                    force_set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 20)]
                    #[doc = "See [`Pallet::force_clear_metadata`]."]
                    force_clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 21)]
                    #[doc = "See [`Pallet::force_asset_status`]."]
                    force_asset_status {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        issuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                        is_sufficient: ::core::primitive::bool,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 22)]
                    #[doc = "See [`Pallet::approve_transfer`]."]
                    approve_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 23)]
                    #[doc = "See [`Pallet::cancel_approval`]."]
                    cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 24)]
                    #[doc = "See [`Pallet::force_cancel_approval`]."]
                    force_cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 25)]
                    #[doc = "See [`Pallet::transfer_approved`]."]
                    transfer_approved {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        destination: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 26)]
                    #[doc = "See [`Pallet::touch`]."]
                    touch {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 27)]
                    #[doc = "See [`Pallet::refund`]."]
                    refund {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        allow_burn: ::core::primitive::bool,
                    },
                    #[codec(index = 28)]
                    #[doc = "See [`Pallet::set_min_balance`]."]
                    set_min_balance {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 29)]
                    #[doc = "See [`Pallet::touch_other`]."]
                    touch_other {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 30)]
                    #[doc = "See [`Pallet::refund_other`]."]
                    refund_other {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 31)]
                    #[doc = "See [`Pallet::block`]."]
                    block {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call2 {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::create`]."]
                    create {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::force_create`]."]
                    force_create {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        is_sufficient: ::core::primitive::bool,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::start_destroy`]."]
                    start_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::destroy_accounts`]."]
                    destroy_accounts {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::destroy_approvals`]."]
                    destroy_approvals {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::finish_destroy`]."]
                    finish_destroy {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::mint`]."]
                    mint {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::burn`]."]
                    burn {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::transfer`]."]
                    transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::transfer_keep_alive`]."]
                    transfer_keep_alive {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::force_transfer`]."]
                    force_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        source: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::freeze`]."]
                    freeze {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::thaw`]."]
                    thaw {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::freeze_asset`]."]
                    freeze_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::thaw_asset`]."]
                    thaw_asset {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::transfer_ownership`]."]
                    transfer_ownership {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::set_team`]."]
                    set_team {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        issuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                    },
                    #[codec(index = 18)]
                    #[doc = "See [`Pallet::clear_metadata`]."]
                    clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "See [`Pallet::force_set_metadata`]."]
                    force_set_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 20)]
                    #[doc = "See [`Pallet::force_clear_metadata`]."]
                    force_clear_metadata {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 21)]
                    #[doc = "See [`Pallet::force_asset_status`]."]
                    force_asset_status {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        issuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        min_balance: ::core::primitive::u128,
                        is_sufficient: ::core::primitive::bool,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 22)]
                    #[doc = "See [`Pallet::approve_transfer`]."]
                    approve_transfer {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 23)]
                    #[doc = "See [`Pallet::cancel_approval`]."]
                    cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 24)]
                    #[doc = "See [`Pallet::force_cancel_approval`]."]
                    force_cancel_approval {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 25)]
                    #[doc = "See [`Pallet::transfer_approved`]."]
                    transfer_approved {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        destination: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 26)]
                    #[doc = "See [`Pallet::touch`]."]
                    touch {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                    },
                    #[codec(index = 27)]
                    #[doc = "See [`Pallet::refund`]."]
                    refund {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        allow_burn: ::core::primitive::bool,
                    },
                    #[codec(index = 28)]
                    #[doc = "See [`Pallet::set_min_balance`]."]
                    set_min_balance {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 29)]
                    #[doc = "See [`Pallet::touch_other`]."]
                    touch_other {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 30)]
                    #[doc = "See [`Pallet::refund_other`]."]
                    refund_other {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 31)]
                    #[doc = "See [`Pallet::block`]."]
                    block {
                        #[codec(compact)]
                        id: ::core::primitive::u32,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account balance must be greater than or equal to the transfer amount."]
                    BalanceLow,
                    #[codec(index = 1)]
                    #[doc = "The account to alter does not exist."]
                    NoAccount,
                    #[codec(index = 2)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The given asset ID is unknown."]
                    Unknown,
                    #[codec(index = 4)]
                    #[doc = "The origin account is frozen."]
                    Frozen,
                    #[codec(index = 5)]
                    #[doc = "The asset ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 7)]
                    #[doc = "Minimum balance should be non-zero."]
                    MinBalanceZero,
                    #[codec(index = 8)]
                    #[doc = "Unable to increment the consumer reference counters on the account. Either no provider"]
                    #[doc = "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one"]
                    #[doc = "fewer then the maximum number of consumers has been reached."]
                    UnavailableConsumer,
                    #[codec(index = 9)]
                    #[doc = "Invalid metadata given."]
                    BadMetadata,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The source account would not survive the transfer and it needs to stay alive."]
                    WouldDie,
                    #[codec(index = 12)]
                    #[doc = "The asset-account already exists."]
                    AlreadyExists,
                    #[codec(index = 13)]
                    #[doc = "The asset-account doesn't have an associated deposit."]
                    NoDeposit,
                    #[codec(index = 14)]
                    #[doc = "The operation would result in funds being burned."]
                    WouldBurn,
                    #[codec(index = 15)]
                    #[doc = "The asset is a live asset and is actively being used. Usually emit for operations such"]
                    #[doc = "as `start_destroy` which require the asset to be in a destroying state."]
                    LiveAsset,
                    #[codec(index = 16)]
                    #[doc = "The asset is not live, and likely being destroyed."]
                    AssetNotLive,
                    #[codec(index = 17)]
                    #[doc = "The asset status is not the expected status."]
                    IncorrectStatus,
                    #[codec(index = 18)]
                    #[doc = "The asset should be frozen before the given operation."]
                    NotFrozen,
                    #[codec(index = 19)]
                    #[doc = "Callback action resulted in error"]
                    CallbackFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error2 {
                    #[codec(index = 0)]
                    #[doc = "Account balance must be greater than or equal to the transfer amount."]
                    BalanceLow,
                    #[codec(index = 1)]
                    #[doc = "The account to alter does not exist."]
                    NoAccount,
                    #[codec(index = 2)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The given asset ID is unknown."]
                    Unknown,
                    #[codec(index = 4)]
                    #[doc = "The origin account is frozen."]
                    Frozen,
                    #[codec(index = 5)]
                    #[doc = "The asset ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 7)]
                    #[doc = "Minimum balance should be non-zero."]
                    MinBalanceZero,
                    #[codec(index = 8)]
                    #[doc = "Unable to increment the consumer reference counters on the account. Either no provider"]
                    #[doc = "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one"]
                    #[doc = "fewer then the maximum number of consumers has been reached."]
                    UnavailableConsumer,
                    #[codec(index = 9)]
                    #[doc = "Invalid metadata given."]
                    BadMetadata,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The source account would not survive the transfer and it needs to stay alive."]
                    WouldDie,
                    #[codec(index = 12)]
                    #[doc = "The asset-account already exists."]
                    AlreadyExists,
                    #[codec(index = 13)]
                    #[doc = "The asset-account doesn't have an associated deposit."]
                    NoDeposit,
                    #[codec(index = 14)]
                    #[doc = "The operation would result in funds being burned."]
                    WouldBurn,
                    #[codec(index = 15)]
                    #[doc = "The asset is a live asset and is actively being used. Usually emit for operations such"]
                    #[doc = "as `start_destroy` which require the asset to be in a destroying state."]
                    LiveAsset,
                    #[codec(index = 16)]
                    #[doc = "The asset is not live, and likely being destroyed."]
                    AssetNotLive,
                    #[codec(index = 17)]
                    #[doc = "The asset status is not the expected status."]
                    IncorrectStatus,
                    #[codec(index = 18)]
                    #[doc = "The asset should be frozen before the given operation."]
                    NotFrozen,
                    #[codec(index = 19)]
                    #[doc = "Callback action resulted in error"]
                    CallbackFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Some asset class was created."]
                    Created {
                        asset_id: ::core::primitive::u32,
                        creator: ::subxt::utils::AccountId32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some assets were issued."]
                    Issued {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some assets were transferred."]
                    Transferred {
                        asset_id: ::core::primitive::u32,
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some assets were destroyed."]
                    Burned {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        asset_id: ::core::primitive::u32,
                        issuer: ::subxt::utils::AccountId32,
                        admin: ::subxt::utils::AccountId32,
                        freezer: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some account `who` was frozen."]
                    Frozen {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some account `who` was thawed."]
                    Thawed {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some asset `asset_id` was frozen."]
                    AssetFrozen { asset_id: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "Some asset `asset_id` was thawed."]
                    AssetThawed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "Accounts were destroyed for given asset."]
                    AccountsDestroyed {
                        asset_id: ::core::primitive::u32,
                        accounts_destroyed: ::core::primitive::u32,
                        accounts_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "Approvals were destroyed for given asset."]
                    ApprovalsDestroyed {
                        asset_id: ::core::primitive::u32,
                        approvals_destroyed: ::core::primitive::u32,
                        approvals_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 12)]
                    #[doc = "An asset class is in the process of being destroyed."]
                    DestructionStarted { asset_id: ::core::primitive::u32 },
                    #[codec(index = 13)]
                    #[doc = "An asset class was destroyed."]
                    Destroyed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "Some asset class was force-created."]
                    ForceCreated {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 15)]
                    #[doc = "New metadata has been set for an asset."]
                    MetadataSet {
                        asset_id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been cleared for an asset."]
                    MetadataCleared { asset_id: ::core::primitive::u32 },
                    #[codec(index = 17)]
                    #[doc = "(Additional) funds have been approved for transfer to a destination account."]
                    ApprovedTransfer {
                        asset_id: ::core::primitive::u32,
                        source: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "An approval for account `delegate` was cancelled by `owner`."]
                    ApprovalCancelled {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 19)]
                    #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
                    #[doc = "the approved `delegate`."]
                    TransferredApproved {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                        destination: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "An asset has had its attributes changed by the `Force` origin."]
                    AssetStatusChanged { asset_id: ::core::primitive::u32 },
                    #[codec(index = 21)]
                    #[doc = "The min_balance of an asset has been updated by the asset owner."]
                    AssetMinBalanceChanged {
                        asset_id: ::core::primitive::u32,
                        new_min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 22)]
                    #[doc = "Some account `who` was created with a deposit from `depositor`."]
                    Touched {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        depositor: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 23)]
                    #[doc = "Some account `who` was blocked."]
                    Blocked {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event2 {
                    #[codec(index = 0)]
                    #[doc = "Some asset class was created."]
                    Created {
                        asset_id: ::core::primitive::u32,
                        creator: ::subxt::utils::AccountId32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some assets were issued."]
                    Issued {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some assets were transferred."]
                    Transferred {
                        asset_id: ::core::primitive::u32,
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some assets were destroyed."]
                    Burned {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        asset_id: ::core::primitive::u32,
                        issuer: ::subxt::utils::AccountId32,
                        admin: ::subxt::utils::AccountId32,
                        freezer: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some account `who` was frozen."]
                    Frozen {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some account `who` was thawed."]
                    Thawed {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some asset `asset_id` was frozen."]
                    AssetFrozen { asset_id: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "Some asset `asset_id` was thawed."]
                    AssetThawed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "Accounts were destroyed for given asset."]
                    AccountsDestroyed {
                        asset_id: ::core::primitive::u32,
                        accounts_destroyed: ::core::primitive::u32,
                        accounts_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    #[doc = "Approvals were destroyed for given asset."]
                    ApprovalsDestroyed {
                        asset_id: ::core::primitive::u32,
                        approvals_destroyed: ::core::primitive::u32,
                        approvals_remaining: ::core::primitive::u32,
                    },
                    #[codec(index = 12)]
                    #[doc = "An asset class is in the process of being destroyed."]
                    DestructionStarted { asset_id: ::core::primitive::u32 },
                    #[codec(index = 13)]
                    #[doc = "An asset class was destroyed."]
                    Destroyed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "Some asset class was force-created."]
                    ForceCreated {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 15)]
                    #[doc = "New metadata has been set for an asset."]
                    MetadataSet {
                        asset_id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been cleared for an asset."]
                    MetadataCleared { asset_id: ::core::primitive::u32 },
                    #[codec(index = 17)]
                    #[doc = "(Additional) funds have been approved for transfer to a destination account."]
                    ApprovedTransfer {
                        asset_id: ::core::primitive::u32,
                        source: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "An approval for account `delegate` was cancelled by `owner`."]
                    ApprovalCancelled {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 19)]
                    #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
                    #[doc = "the approved `delegate`."]
                    TransferredApproved {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                        destination: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "An asset has had its attributes changed by the `Force` origin."]
                    AssetStatusChanged { asset_id: ::core::primitive::u32 },
                    #[codec(index = 21)]
                    #[doc = "The min_balance of an asset has been updated by the asset owner."]
                    AssetMinBalanceChanged {
                        asset_id: ::core::primitive::u32,
                        new_min_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 22)]
                    #[doc = "Some account `who` was created with a deposit from `depositor`."]
                    Touched {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        depositor: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 23)]
                    #[doc = "Some account `who` was blocked."]
                    Blocked {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AccountStatus {
                    #[codec(index = 0)]
                    Liquid,
                    #[codec(index = 1)]
                    Frozen,
                    #[codec(index = 2)]
                    Blocked,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Approval<_0, _1> {
                    pub amount: _0,
                    pub deposit: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetAccount<_0, _1, _2, _3> {
                    pub balance: _0,
                    pub status: runtime_types::pallet_assets::types::AccountStatus,
                    pub reason: runtime_types::pallet_assets::types::ExistenceReason<_0, _3>,
                    pub extra: _2,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetDetails<_0, _1, _2> {
                    pub owner: _1,
                    pub issuer: _1,
                    pub admin: _1,
                    pub freezer: _1,
                    pub supply: _0,
                    pub deposit: _2,
                    pub min_balance: _0,
                    pub is_sufficient: ::core::primitive::bool,
                    pub accounts: ::core::primitive::u32,
                    pub sufficients: ::core::primitive::u32,
                    pub approvals: ::core::primitive::u32,
                    pub status: runtime_types::pallet_assets::types::AssetStatus,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AssetMetadata<_0, _1> {
                    pub deposit: _0,
                    pub name: _1,
                    pub symbol: _1,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AssetStatus {
                    #[codec(index = 0)]
                    Live,
                    #[codec(index = 1)]
                    Frozen,
                    #[codec(index = 2)]
                    Destroying,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ExistenceReason<_0, _1> {
                    #[codec(index = 0)]
                    Consumer,
                    #[codec(index = 1)]
                    Sufficient,
                    #[codec(index = 2)]
                    DepositHeld(_0),
                    #[codec(index = 3)]
                    DepositRefunded,
                    #[codec(index = 4)]
                    DepositFrom(_1, _0),
                }
            }
        }
        pub mod pallet_babe {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::report_equivocation`]."]
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_slots::EquivocationProof<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                                runtime_types::sp_consensus_babe::app::Public,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::report_equivocation_unsigned`]."]
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_slots::EquivocationProof<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                                runtime_types::sp_consensus_babe::app::Public,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::plan_config_change`]."]
                    plan_config_change {
                        config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 1)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 2)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                    #[codec(index = 3)]
                    #[doc = "Submitted configuration is invalid."]
                    InvalidConfiguration,
                }
            }
        }
        pub mod pallet_bags_list {
            use super::runtime_types;
            pub mod list {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bag {
                    pub head: ::core::option::Option<::subxt::utils::AccountId32>,
                    pub tail: ::core::option::Option<::subxt::utils::AccountId32>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ListError {
                    #[codec(index = 0)]
                    Duplicate,
                    #[codec(index = 1)]
                    NotHeavier,
                    #[codec(index = 2)]
                    NotInSameBag,
                    #[codec(index = 3)]
                    NodeNotFound,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Node {
                    pub id: ::subxt::utils::AccountId32,
                    pub prev: ::core::option::Option<::subxt::utils::AccountId32>,
                    pub next: ::core::option::Option<::subxt::utils::AccountId32>,
                    pub bag_upper: ::core::primitive::u64,
                    pub score: ::core::primitive::u64,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::rebag`]."]
                    rebag {
                        dislocated: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::put_in_front_of`]."]
                    put_in_front_of {
                        lighter: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "A error in the list interface implementation."]
                    List(runtime_types::pallet_bags_list::list::ListError),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Moved an account from one bag to another."]
                    Rebagged {
                        who: ::subxt::utils::AccountId32,
                        from: ::core::primitive::u64,
                        to: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "Updated the score of some account to the given amount."]
                    ScoreUpdated {
                        who: ::subxt::utils::AccountId32,
                        new_score: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::transfer_allow_death`]."]
                    transfer_allow_death {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_balance_deprecated`]."]
                    set_balance_deprecated {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        old_reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::force_transfer`]."]
                    force_transfer {
                        source: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::transfer_keep_alive`]."]
                    transfer_keep_alive {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::transfer_all`]."]
                    transfer_all {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::force_unreserve`]."]
                    force_unreserve {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::upgrade_accounts`]."]
                    upgrade_accounts {
                        who: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::transfer`]."]
                    transfer {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::force_set_balance`]."]
                    force_set_balance {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value."]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal."]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value."]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit."]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account."]
                    Expendability,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account."]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist."]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed `MaxReserves`."]
                    TooManyReserves,
                    #[codec(index = 8)]
                    #[doc = "Number of holds exceed `MaxHolds`."]
                    TooManyHolds,
                    #[codec(index = 9)]
                    #[doc = "Number of freezes exceed `MaxFreezes`."]
                    TooManyFreezes,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        account: ::subxt::utils::AccountId32,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
                    #[doc = "resulting in an outright loss."]
                    DustLost {
                        account: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        who: ::subxt::utils::AccountId32,
                        free: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some balance was moved from the reserve of the first account to the second account."]
                    #[doc = "Final argument indicates the destination balance type."]
                    ReserveRepatriated {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some amount was deposited (e.g. for transaction fees)."]
                    Deposit {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    Withdraw {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
                    Slashed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Some amount was minted into an account."]
                    Minted {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Some amount was burned from an account."]
                    Burned {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "Some amount was suspended from an account (it can be restored later)."]
                    Suspended {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 13)]
                    #[doc = "Some amount was restored into an account."]
                    Restored {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "An account was upgraded."]
                    Upgraded { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 15)]
                    #[doc = "Total issuance was increased by `amount`, creating a credit to be balanced."]
                    Issued { amount: ::core::primitive::u128 },
                    #[codec(index = 16)]
                    #[doc = "Total issuance was decreased by `amount`, creating a debt to be balanced."]
                    Rescinded { amount: ::core::primitive::u128 },
                    #[codec(index = 17)]
                    #[doc = "Some balance was locked."]
                    Locked {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    #[doc = "Some balance was unlocked."]
                    Unlocked {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    #[doc = "Some balance was frozen."]
                    Frozen {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    #[doc = "Some balance was thawed."]
                    Thawed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AccountData<_0> {
                    pub free: _0,
                    pub reserved: _0,
                    pub frozen: _0,
                    pub flags: runtime_types::pallet_balances::types::ExtraFlags,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BalanceLock<_0> {
                    pub id: [::core::primitive::u8; 8usize],
                    pub amount: _0,
                    pub reasons: runtime_types::pallet_balances::types::Reasons,
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ExtraFlags(pub ::core::primitive::u128);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdAmount<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Reasons {
                    #[codec(index = 0)]
                    Fee,
                    #[codec(index = 1)]
                    Misc,
                    #[codec(index = 2)]
                    All,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReserveData<_0, _1> {
                    pub id: _0,
                    pub amount: _1,
                }
            }
        }
        pub mod pallet_bounties {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::propose_bounty`]."]
                    propose_bounty {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        description: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::approve_bounty`]."]
                    approve_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::propose_curator`]."]
                    propose_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        curator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::unassign_curator`]."]
                    unassign_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::accept_curator`]."]
                    accept_curator {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::award_bounty`]."]
                    award_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::claim_bounty`]."]
                    claim_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::close_bounty`]."]
                    close_bounty {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::extend_bounty_expiry`]."]
                    extend_bounty_expiry {
                        #[codec(compact)]
                        bounty_id: ::core::primitive::u32,
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposer's balance is too low."]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    #[doc = "No proposal or bounty at that index."]
                    InvalidIndex,
                    #[codec(index = 2)]
                    #[doc = "The reason given is just too big."]
                    ReasonTooBig,
                    #[codec(index = 3)]
                    #[doc = "The bounty status is unexpected."]
                    UnexpectedStatus,
                    #[codec(index = 4)]
                    #[doc = "Require bounty curator."]
                    RequireCurator,
                    #[codec(index = 5)]
                    #[doc = "Invalid bounty value."]
                    InvalidValue,
                    #[codec(index = 6)]
                    #[doc = "Invalid bounty fee."]
                    InvalidFee,
                    #[codec(index = 7)]
                    #[doc = "A bounty payout is pending."]
                    #[doc = "To cancel the bounty, you must unassign and slash the curator."]
                    PendingPayout,
                    #[codec(index = 8)]
                    #[doc = "The bounties cannot be claimed/closed because it's still in the countdown period."]
                    Premature,
                    #[codec(index = 9)]
                    #[doc = "The bounty cannot be closed because it has active child bounties."]
                    HasActiveChildBounty,
                    #[codec(index = 10)]
                    #[doc = "Too many approvals are already queued."]
                    TooManyQueued,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New bounty proposal."]
                    BountyProposed { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "A bounty proposal was rejected; funds were slashed."]
                    BountyRejected {
                        index: ::core::primitive::u32,
                        bond: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A bounty proposal is funded and became active."]
                    BountyBecameActive { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "A bounty is awarded to a beneficiary."]
                    BountyAwarded {
                        index: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A bounty is claimed by beneficiary."]
                    BountyClaimed {
                        index: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A bounty is cancelled."]
                    BountyCanceled { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "A bounty expiry is extended."]
                    BountyExtended { index: ::core::primitive::u32 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bounty<_0, _1, _2> {
                pub proposer: _0,
                pub value: _1,
                pub fee: _1,
                pub curator_deposit: _1,
                pub bond: _1,
                pub status: runtime_types::pallet_bounties::BountyStatus<_0, _2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum BountyStatus<_0, _1> {
                #[codec(index = 0)]
                Proposed,
                #[codec(index = 1)]
                Approved,
                #[codec(index = 2)]
                Funded,
                #[codec(index = 3)]
                CuratorProposed { curator: _0 },
                #[codec(index = 4)]
                Active { curator: _0, update_due: _1 },
                #[codec(index = 5)]
                PendingPayout {
                    curator: _0,
                    beneficiary: _0,
                    unlock_at: _1,
                },
            }
        }
        pub mod pallet_child_bounties {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::add_child_bounty`]."]
                    add_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        description: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::propose_curator`]."]
                    propose_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                        curator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::accept_curator`]."]
                    accept_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::unassign_curator`]."]
                    unassign_curator {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::award_child_bounty`]."]
                    award_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::claim_child_bounty`]."]
                    claim_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::close_child_bounty`]."]
                    close_child_bounty {
                        #[codec(compact)]
                        parent_bounty_id: ::core::primitive::u32,
                        #[codec(compact)]
                        child_bounty_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The parent bounty is not in active state."]
                    ParentBountyNotActive,
                    #[codec(index = 1)]
                    #[doc = "The bounty balance is not enough to add new child-bounty."]
                    InsufficientBountyBalance,
                    #[codec(index = 2)]
                    #[doc = "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."]
                    TooManyChildBounties,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A child-bounty is added."]
                    Added {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A child-bounty is awarded to a beneficiary."]
                    Awarded {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A child-bounty is claimed by beneficiary."]
                    Claimed {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A child-bounty is cancelled."]
                    Canceled {
                        index: ::core::primitive::u32,
                        child_index: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChildBounty<_0, _1, _2> {
                pub parent_bounty: ::core::primitive::u32,
                pub value: _1,
                pub fee: _1,
                pub curator_deposit: _1,
                pub status: runtime_types::pallet_child_bounties::ChildBountyStatus<_0, _2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ChildBountyStatus<_0, _1> {
                #[codec(index = 0)]
                Added,
                #[codec(index = 1)]
                CuratorProposed { curator: _0 },
                #[codec(index = 2)]
                Active { curator: _0 },
                #[codec(index = 3)]
                PendingPayout {
                    curator: _0,
                    beneficiary: _0,
                    unlock_at: _1,
                },
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set_members`]."]
                    set_members {
                        new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        prime: ::core::option::Option<::subxt::utils::AccountId32>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::execute`]."]
                    execute {
                        proposal:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::propose`]."]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::disapprove_proposal`]."]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::close`]."]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call2 {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set_members`]."]
                    set_members {
                        new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        prime: ::core::option::Option<::subxt::utils::AccountId32>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::execute`]."]
                    execute {
                        proposal:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::propose`]."]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::disapprove_proposal`]."]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::close`]."]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call3 {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set_members`]."]
                    set_members {
                        new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        prime: ::core::option::Option<::subxt::utils::AccountId32>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::execute`]."]
                    execute {
                        proposal:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::propose`]."]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::disapprove_proposal`]."]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::close`]."]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error2 {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error3 {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: ::subxt::utils::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event2 {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: ::subxt::utils::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event3 {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: ::subxt::utils::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Votes<_0, _1> {
                pub index: ::core::primitive::u32,
                pub threshold: ::core::primitive::u32,
                pub ayes: ::std::vec::Vec<_0>,
                pub nays: ::std::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_contracts {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::call_old_weight`]."]
                    call_old_weight {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        #[codec(compact)]
                        gas_limit: ::core::primitive::u64,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::instantiate_with_code_old_weight`]."]
                    instantiate_with_code_old_weight {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        #[codec(compact)]
                        gas_limit: ::core::primitive::u64,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code: ::std::vec::Vec<::core::primitive::u8>,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::instantiate_old_weight`]."]
                    instantiate_old_weight {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        #[codec(compact)]
                        gas_limit: ::core::primitive::u64,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code_hash: ::subxt::utils::H256,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::upload_code`]."]
                    upload_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        determinism: runtime_types::pallet_contracts::wasm::Determinism,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::remove_code`]."]
                    remove_code { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::set_code`]."]
                    set_code {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        code_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::call`]."]
                    call {
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::instantiate_with_code`]."]
                    instantiate_with_code {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code: ::std::vec::Vec<::core::primitive::u8>,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::instantiate`]."]
                    instantiate {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        gas_limit: runtime_types::sp_weights::weight_v2::Weight,
                        storage_deposit_limit: ::core::option::Option<
                            ::subxt::ext::codec::Compact<::core::primitive::u128>,
                        >,
                        code_hash: ::subxt::utils::H256,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                        salt: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::migrate`]."]
                    migrate {
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "A new schedule must have a greater version than the current one."]
                    InvalidScheduleVersion,
                    #[codec(index = 1)]
                    #[doc = "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."]
                    InvalidCallFlags,
                    #[codec(index = 2)]
                    #[doc = "The executed contract exhausted its gas limit."]
                    OutOfGas,
                    #[codec(index = 3)]
                    #[doc = "The output buffer supplied to a contract API call was too small."]
                    OutputBufferTooSmall,
                    #[codec(index = 4)]
                    #[doc = "Performing the requested transfer failed. Probably because there isn't enough"]
                    #[doc = "free balance in the sender's account."]
                    TransferFailed,
                    #[codec(index = 5)]
                    #[doc = "Performing a call was denied because the calling depth reached the limit"]
                    #[doc = "of what is specified in the schedule."]
                    MaxCallDepthReached,
                    #[codec(index = 6)]
                    #[doc = "No contract was found at the specified address."]
                    ContractNotFound,
                    #[codec(index = 7)]
                    #[doc = "The code supplied to `instantiate_with_code` exceeds the limit specified in the"]
                    #[doc = "current schedule."]
                    CodeTooLarge,
                    #[codec(index = 8)]
                    #[doc = "No code could be found at the supplied code hash."]
                    CodeNotFound,
                    #[codec(index = 9)]
                    #[doc = "A buffer outside of sandbox memory was passed to a contract API function."]
                    OutOfBounds,
                    #[codec(index = 10)]
                    #[doc = "Input passed to a contract API function failed to decode as expected type."]
                    DecodingFailed,
                    #[codec(index = 11)]
                    #[doc = "Contract trapped during execution."]
                    ContractTrapped,
                    #[codec(index = 12)]
                    #[doc = "The size defined in `T::MaxValueSize` was exceeded."]
                    ValueTooLarge,
                    #[codec(index = 13)]
                    #[doc = "Termination of a contract is not allowed while the contract is already"]
                    #[doc = "on the call stack. Can be triggered by `seal_terminate`."]
                    TerminatedWhileReentrant,
                    #[codec(index = 14)]
                    #[doc = "`seal_call` forwarded this contracts input. It therefore is no longer available."]
                    InputForwarded,
                    #[codec(index = 15)]
                    #[doc = "The subject passed to `seal_random` exceeds the limit."]
                    RandomSubjectTooLong,
                    #[codec(index = 16)]
                    #[doc = "The amount of topics passed to `seal_deposit_events` exceeds the limit."]
                    TooManyTopics,
                    #[codec(index = 17)]
                    #[doc = "The chain does not provide a chain extension. Calling the chain extension results"]
                    #[doc = "in this error. Note that this usually  shouldn't happen as deploying such contracts"]
                    #[doc = "is rejected."]
                    NoChainExtension,
                    #[codec(index = 18)]
                    #[doc = "A contract with the same AccountId already exists."]
                    DuplicateContract,
                    #[codec(index = 19)]
                    #[doc = "A contract self destructed in its constructor."]
                    #[doc = ""]
                    #[doc = "This can be triggered by a call to `seal_terminate`."]
                    TerminatedInConstructor,
                    #[codec(index = 20)]
                    #[doc = "A call tried to invoke a contract that is flagged as non-reentrant."]
                    #[doc = "The only other cause is that a call from a contract into the runtime tried to call back"]
                    #[doc = "into `pallet-contracts`. This would make the whole pallet reentrant with regard to"]
                    #[doc = "contract code execution which is not supported."]
                    ReentranceDenied,
                    #[codec(index = 21)]
                    #[doc = "Origin doesn't have enough balance to pay the required storage deposits."]
                    StorageDepositNotEnoughFunds,
                    #[codec(index = 22)]
                    #[doc = "More storage was created than allowed by the storage deposit limit."]
                    StorageDepositLimitExhausted,
                    #[codec(index = 23)]
                    #[doc = "Code removal was denied because the code is still in use by at least one contract."]
                    CodeInUse,
                    #[codec(index = 24)]
                    #[doc = "The contract ran to completion but decided to revert its storage changes."]
                    #[doc = "Please note that this error is only returned from extrinsics. When called directly"]
                    #[doc = "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags"]
                    #[doc = "to determine whether a reversion has taken place."]
                    ContractReverted,
                    #[codec(index = 25)]
                    #[doc = "The contract's code was found to be invalid during validation or instrumentation."]
                    #[doc = ""]
                    #[doc = "The most likely cause of this is that an API was used which is not supported by the"]
                    #[doc = "node. This happens if an older node is used with a new version of ink!. Try updating"]
                    #[doc = "your node to the newest available version."]
                    #[doc = ""]
                    #[doc = "A more detailed error can be found on the node console if debug messages are enabled"]
                    #[doc = "by supplying `-lruntime::contracts=debug`."]
                    CodeRejected,
                    #[codec(index = 26)]
                    #[doc = "An indetermistic code was used in a context where this is not permitted."]
                    Indeterministic,
                    #[codec(index = 27)]
                    #[doc = "A pending migration needs to complete before the extrinsic can be called."]
                    MigrationInProgress,
                    #[codec(index = 28)]
                    #[doc = "Migrate dispatch call was attempted but no migration was performed."]
                    NoMigrationPerformed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Contract deployed by address at the specified address."]
                    Instantiated {
                        deployer: ::subxt::utils::AccountId32,
                        contract: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Contract has been removed."]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = ""]
                    #[doc = "The only way for a contract to be removed and emitting this event is by calling"]
                    #[doc = "`seal_terminate`."]
                    Terminated {
                        contract: ::subxt::utils::AccountId32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Code with the specified hash has been stored."]
                    CodeStored { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A custom event emitted by the contract."]
                    ContractEmitted {
                        contract: ::subxt::utils::AccountId32,
                        data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "A code with the specified hash was removed."]
                    CodeRemoved { code_hash: ::subxt::utils::H256 },
                    #[codec(index = 5)]
                    #[doc = "A contract's code was updated."]
                    ContractCodeUpdated {
                        contract: ::subxt::utils::AccountId32,
                        new_code_hash: ::subxt::utils::H256,
                        old_code_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "A contract was called either by a plain account or another contract."]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = ""]
                    #[doc = "Please keep in mind that like all events this is only emitted for successful"]
                    #[doc = "calls. This is because on failure all storage changes including events are"]
                    #[doc = "rolled back."]
                    Called {
                        caller: runtime_types::pallet_contracts::Origin<
                            runtime_types::kitchensink_runtime::Runtime,
                        >,
                        contract: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 7)]
                    #[doc = "A contract delegate called a code hash."]
                    #[doc = ""]
                    #[doc = "# Note"]
                    #[doc = ""]
                    #[doc = "Please keep in mind that like all events this is only emitted for successful"]
                    #[doc = "calls. This is because on failure all storage changes including events are"]
                    #[doc = "rolled back."]
                    DelegateCalled {
                        contract: ::subxt::utils::AccountId32,
                        code_hash: ::subxt::utils::H256,
                    },
                }
            }
            pub mod schedule {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct HostFnWeights {
                    pub caller: runtime_types::sp_weights::weight_v2::Weight,
                    pub is_contract: runtime_types::sp_weights::weight_v2::Weight,
                    pub code_hash: runtime_types::sp_weights::weight_v2::Weight,
                    pub own_code_hash: runtime_types::sp_weights::weight_v2::Weight,
                    pub caller_is_origin: runtime_types::sp_weights::weight_v2::Weight,
                    pub caller_is_root: runtime_types::sp_weights::weight_v2::Weight,
                    pub address: runtime_types::sp_weights::weight_v2::Weight,
                    pub gas_left: runtime_types::sp_weights::weight_v2::Weight,
                    pub balance: runtime_types::sp_weights::weight_v2::Weight,
                    pub value_transferred: runtime_types::sp_weights::weight_v2::Weight,
                    pub minimum_balance: runtime_types::sp_weights::weight_v2::Weight,
                    pub block_number: runtime_types::sp_weights::weight_v2::Weight,
                    pub now: runtime_types::sp_weights::weight_v2::Weight,
                    pub weight_to_fee: runtime_types::sp_weights::weight_v2::Weight,
                    pub gas: runtime_types::sp_weights::weight_v2::Weight,
                    pub input: runtime_types::sp_weights::weight_v2::Weight,
                    pub input_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub r#return: runtime_types::sp_weights::weight_v2::Weight,
                    pub return_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub terminate: runtime_types::sp_weights::weight_v2::Weight,
                    pub random: runtime_types::sp_weights::weight_v2::Weight,
                    pub deposit_event: runtime_types::sp_weights::weight_v2::Weight,
                    pub deposit_event_per_topic: runtime_types::sp_weights::weight_v2::Weight,
                    pub deposit_event_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub debug_message: runtime_types::sp_weights::weight_v2::Weight,
                    pub debug_message_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_storage_per_new_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_storage_per_old_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub set_code_hash: runtime_types::sp_weights::weight_v2::Weight,
                    pub clear_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub clear_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub contains_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub contains_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub get_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub get_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub take_storage: runtime_types::sp_weights::weight_v2::Weight,
                    pub take_storage_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub transfer: runtime_types::sp_weights::weight_v2::Weight,
                    pub call: runtime_types::sp_weights::weight_v2::Weight,
                    pub delegate_call: runtime_types::sp_weights::weight_v2::Weight,
                    pub call_transfer_surcharge: runtime_types::sp_weights::weight_v2::Weight,
                    pub call_per_cloned_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate_transfer_surcharge:
                        runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate_per_input_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiate_per_salt_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_sha2_256: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_sha2_256_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_keccak_256: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_keccak_256_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_256: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_256_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_128: runtime_types::sp_weights::weight_v2::Weight,
                    pub hash_blake2_128_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub ecdsa_recover: runtime_types::sp_weights::weight_v2::Weight,
                    pub ecdsa_to_eth_address: runtime_types::sp_weights::weight_v2::Weight,
                    pub sr25519_verify: runtime_types::sp_weights::weight_v2::Weight,
                    pub sr25519_verify_per_byte: runtime_types::sp_weights::weight_v2::Weight,
                    pub reentrance_count: runtime_types::sp_weights::weight_v2::Weight,
                    pub account_reentrance_count: runtime_types::sp_weights::weight_v2::Weight,
                    pub instantiation_nonce: runtime_types::sp_weights::weight_v2::Weight,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InstructionWeights {
                    pub version: ::core::primitive::u32,
                    pub fallback: ::core::primitive::u32,
                    pub i64const: ::core::primitive::u32,
                    pub i64load: ::core::primitive::u32,
                    pub i64store: ::core::primitive::u32,
                    pub select: ::core::primitive::u32,
                    pub r#if: ::core::primitive::u32,
                    pub br: ::core::primitive::u32,
                    pub br_if: ::core::primitive::u32,
                    pub br_table: ::core::primitive::u32,
                    pub br_table_per_entry: ::core::primitive::u32,
                    pub call: ::core::primitive::u32,
                    pub call_indirect: ::core::primitive::u32,
                    pub call_per_local: ::core::primitive::u32,
                    pub local_get: ::core::primitive::u32,
                    pub local_set: ::core::primitive::u32,
                    pub local_tee: ::core::primitive::u32,
                    pub global_get: ::core::primitive::u32,
                    pub global_set: ::core::primitive::u32,
                    pub memory_current: ::core::primitive::u32,
                    pub memory_grow: ::core::primitive::u32,
                    pub i64clz: ::core::primitive::u32,
                    pub i64ctz: ::core::primitive::u32,
                    pub i64popcnt: ::core::primitive::u32,
                    pub i64eqz: ::core::primitive::u32,
                    pub i64extendsi32: ::core::primitive::u32,
                    pub i64extendui32: ::core::primitive::u32,
                    pub i32wrapi64: ::core::primitive::u32,
                    pub i64eq: ::core::primitive::u32,
                    pub i64ne: ::core::primitive::u32,
                    pub i64lts: ::core::primitive::u32,
                    pub i64ltu: ::core::primitive::u32,
                    pub i64gts: ::core::primitive::u32,
                    pub i64gtu: ::core::primitive::u32,
                    pub i64les: ::core::primitive::u32,
                    pub i64leu: ::core::primitive::u32,
                    pub i64ges: ::core::primitive::u32,
                    pub i64geu: ::core::primitive::u32,
                    pub i64add: ::core::primitive::u32,
                    pub i64sub: ::core::primitive::u32,
                    pub i64mul: ::core::primitive::u32,
                    pub i64divs: ::core::primitive::u32,
                    pub i64divu: ::core::primitive::u32,
                    pub i64rems: ::core::primitive::u32,
                    pub i64remu: ::core::primitive::u32,
                    pub i64and: ::core::primitive::u32,
                    pub i64or: ::core::primitive::u32,
                    pub i64xor: ::core::primitive::u32,
                    pub i64shl: ::core::primitive::u32,
                    pub i64shrs: ::core::primitive::u32,
                    pub i64shru: ::core::primitive::u32,
                    pub i64rotl: ::core::primitive::u32,
                    pub i64rotr: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Limits {
                    pub event_topics: ::core::primitive::u32,
                    pub globals: ::core::primitive::u32,
                    pub locals: ::core::primitive::u32,
                    pub parameters: ::core::primitive::u32,
                    pub memory_pages: ::core::primitive::u32,
                    pub table_size: ::core::primitive::u32,
                    pub br_table_size: ::core::primitive::u32,
                    pub subject_len: ::core::primitive::u32,
                    pub payload_len: ::core::primitive::u32,
                    pub runtime_memory: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Schedule {
                    pub limits: runtime_types::pallet_contracts::schedule::Limits,
                    pub instruction_weights:
                        runtime_types::pallet_contracts::schedule::InstructionWeights,
                    pub host_fn_weights: runtime_types::pallet_contracts::schedule::HostFnWeights,
                }
            }
            pub mod storage {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ContractInfo {
                    pub trie_id: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub deposit_account: runtime_types::pallet_contracts::storage::DepositAccount,
                    pub code_hash: ::subxt::utils::H256,
                    pub storage_bytes: ::core::primitive::u32,
                    pub storage_items: ::core::primitive::u32,
                    pub storage_byte_deposit: ::core::primitive::u128,
                    pub storage_item_deposit: ::core::primitive::u128,
                    pub storage_base_deposit: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DeletionQueueManager {
                    pub insert_counter: ::core::primitive::u32,
                    pub delete_counter: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DepositAccount(pub ::subxt::utils::AccountId32);
            }
            pub mod wasm {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Determinism {
                    #[codec(index = 0)]
                    Enforced,
                    #[codec(index = 1)]
                    Relaxed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OwnerInfo {
                    pub owner: ::subxt::utils::AccountId32,
                    #[codec(compact)]
                    pub deposit: ::core::primitive::u128,
                    #[codec(compact)]
                    pub refcount: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PrefabWasmModule {
                    #[codec(compact)]
                    pub instruction_weights_version: ::core::primitive::u32,
                    #[codec(compact)]
                    pub initial: ::core::primitive::u32,
                    #[codec(compact)]
                    pub maximum: ::core::primitive::u32,
                    pub code: runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub determinism: runtime_types::pallet_contracts::wasm::Determinism,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Origin<_0> {
                #[codec(index = 0)]
                Root,
                #[codec(index = 1)]
                Signed(::subxt::utils::AccountId32),
                __Ignore(::core::marker::PhantomData<_0>),
            }
        }
        pub mod pallet_contracts_primitives {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Code<_0> {
                #[codec(index = 0)]
                Upload(::std::vec::Vec<::core::primitive::u8>),
                #[codec(index = 1)]
                Existing(_0),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CodeUploadReturnValue<_0, _1> {
                pub code_hash: _0,
                pub deposit: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ContractAccessError {
                #[codec(index = 0)]
                DoesntExist,
                #[codec(index = 1)]
                KeyDecodingFailed,
                #[codec(index = 2)]
                MigrationInProgress,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ContractResult<_0, _1, _2> {
                pub gas_consumed: runtime_types::sp_weights::weight_v2::Weight,
                pub gas_required: runtime_types::sp_weights::weight_v2::Weight,
                pub storage_deposit: runtime_types::pallet_contracts_primitives::StorageDeposit<_1>,
                pub debug_message: ::std::vec::Vec<::core::primitive::u8>,
                pub result: _0,
                pub events: ::core::option::Option<::std::vec::Vec<_2>>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ExecReturnValue {
                pub flags: runtime_types::pallet_contracts_primitives::ReturnFlags,
                pub data: ::std::vec::Vec<::core::primitive::u8>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InstantiateReturnValue<_0> {
                pub result: runtime_types::pallet_contracts_primitives::ExecReturnValue,
                pub account_id: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReturnFlags {
                pub bits: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum StorageDeposit<_0> {
                #[codec(index = 0)]
                Refund(_0),
                #[codec(index = 1)]
                Charge(_0),
            }
        }
        pub mod pallet_conviction_voting {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        #[codec(compact)]
                        poll_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::delegate`]."]
                    delegate {
                        class: ::core::primitive::u16,
                        to: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::undelegate`]."]
                    undelegate { class: ::core::primitive::u16 },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::unlock`]."]
                    unlock {
                        class: ::core::primitive::u16,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::remove_vote`]."]
                    remove_vote {
                        class: ::core::option::Option<::core::primitive::u16>,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::remove_other_vote`]."]
                    remove_other_vote {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        class: ::core::primitive::u16,
                        index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Poll is not ongoing."]
                    NotOngoing,
                    #[codec(index = 1)]
                    #[doc = "The given account did not vote on the poll."]
                    NotVoter,
                    #[codec(index = 2)]
                    #[doc = "The actor has no permission to conduct the action."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The actor has no permission to conduct the action right now but will do in the future."]
                    NoPermissionYet,
                    #[codec(index = 4)]
                    #[doc = "The account is already delegating."]
                    AlreadyDelegating,
                    #[codec(index = 5)]
                    #[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
                    #[doc = "these are removed, either through `unvote` or `reap_vote`."]
                    AlreadyVoting,
                    #[codec(index = 6)]
                    #[doc = "Too high a balance was provided that the account cannot afford."]
                    InsufficientFunds,
                    #[codec(index = 7)]
                    #[doc = "The account is not currently delegating."]
                    NotDelegating,
                    #[codec(index = 8)]
                    #[doc = "Delegation to oneself makes no sense."]
                    Nonsense,
                    #[codec(index = 9)]
                    #[doc = "Maximum number of votes reached."]
                    MaxVotesReached,
                    #[codec(index = 10)]
                    #[doc = "The class must be supplied since it is not easily determinable from the state."]
                    ClassNeeded,
                    #[codec(index = 11)]
                    #[doc = "The class ID supplied is invalid."]
                    BadClass,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account has delegated their vote to another account. \\[who, target\\]"]
                    Delegated(::subxt::utils::AccountId32, ::subxt::utils::AccountId32),
                    #[codec(index = 1)]
                    #[doc = "An \\[account\\] has cancelled a previous delegation operation."]
                    Undelegated(::subxt::utils::AccountId32),
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub support: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard {
                        vote: runtime_types::pallet_conviction_voting::vote::Vote,
                        balance: _0,
                    },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                    #[codec(index = 2)]
                    SplitAbstain { aye: _0, nay: _0, abstain: _0 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Casting<_0, _1, _2> {
                    pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        _1,
                        runtime_types::pallet_conviction_voting::vote::AccountVote<_0>,
                    )>,
                    pub delegations:
                        runtime_types::pallet_conviction_voting::types::Delegations<_0>,
                    pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_1, _0>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegating<_0, _1, _2> {
                    pub balance: _0,
                    pub target: _1,
                    pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
                    pub delegations:
                        runtime_types::pallet_conviction_voting::types::Delegations<_0>,
                    pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_2, _0>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Voting<_0, _1, _2, _3> {
                    #[codec(index = 0)]
                    Casting(runtime_types::pallet_conviction_voting::vote::Casting<_0, _2, _2>),
                    #[codec(index = 1)]
                    Delegating(
                        runtime_types::pallet_conviction_voting::vote::Delegating<_0, _1, _2>,
                    ),
                    __Ignore(::core::marker::PhantomData<_3>),
                }
            }
        }
        pub mod pallet_core_fellowship {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::bump`]."]
                    bump { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_params`]."]
                    set_params {
                        params: ::std::boxed::Box<
                            runtime_types::pallet_core_fellowship::ParamsType<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_active`]."]
                    set_active { is_active: ::core::primitive::bool },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::approve`]."]
                    approve {
                        who: ::subxt::utils::AccountId32,
                        at_rank: ::core::primitive::u16,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::induct`]."]
                    induct { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::promote`]."]
                    promote {
                        who: ::subxt::utils::AccountId32,
                        to_rank: ::core::primitive::u16,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::offboard`]."]
                    offboard { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::submit_evidence`]."]
                    submit_evidence {
                        wish: runtime_types::pallet_core_fellowship::Wish,
                        evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::import`]."]
                    import,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Member's rank is too low."]
                    Unranked,
                    #[codec(index = 1)]
                    #[doc = "Member's rank is not zero."]
                    Ranked,
                    #[codec(index = 2)]
                    #[doc = "Member's rank is not as expected - generally means that the rank provided to the call"]
                    #[doc = "does not agree with the state of the system."]
                    UnexpectedRank,
                    #[codec(index = 3)]
                    #[doc = "The given rank is invalid - this generally means it's not between 1 and `RANK_COUNT`."]
                    InvalidRank,
                    #[codec(index = 4)]
                    #[doc = "The origin does not have enough permission to do this operation."]
                    NoPermission,
                    #[codec(index = 5)]
                    #[doc = "No work needs to be done at present for this member."]
                    NothingDoing,
                    #[codec(index = 6)]
                    #[doc = "The candidate has already been inducted. This should never happen since it would"]
                    #[doc = "require a candidate (rank 0) to already be tracked in the pallet."]
                    AlreadyInducted,
                    #[codec(index = 7)]
                    #[doc = "The candidate has not been inducted, so cannot be offboarded from this pallet."]
                    NotTracked,
                    #[codec(index = 8)]
                    #[doc = "Operation cannot be done yet since not enough time has passed."]
                    TooSoon,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Parameters for the pallet have changed."]
                    ParamsChanged {
                        params: runtime_types::pallet_core_fellowship::ParamsType<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Member activity flag has been set."]
                    ActiveChanged {
                        who: ::subxt::utils::AccountId32,
                        is_active: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Member has begun being tracked in this pallet."]
                    Inducted { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 3)]
                    #[doc = "Member has been removed from being tracked in this pallet (i.e. because rank is now"]
                    #[doc = "zero)."]
                    Offboarded { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 4)]
                    #[doc = "Member has been promoted to the given rank."]
                    Promoted {
                        who: ::subxt::utils::AccountId32,
                        to_rank: ::core::primitive::u16,
                    },
                    #[codec(index = 5)]
                    #[doc = "Member has been demoted to the given (non-zero) rank."]
                    Demoted {
                        who: ::subxt::utils::AccountId32,
                        to_rank: ::core::primitive::u16,
                    },
                    #[codec(index = 6)]
                    #[doc = "Member has been proven at their current rank, postponing auto-demotion."]
                    Proven {
                        who: ::subxt::utils::AccountId32,
                        at_rank: ::core::primitive::u16,
                    },
                    #[codec(index = 7)]
                    #[doc = "Member has stated evidence of their efforts their request for rank."]
                    Requested {
                        who: ::subxt::utils::AccountId32,
                        wish: runtime_types::pallet_core_fellowship::Wish,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some submitted evidence was judged and removed. There may or may not have been a change"]
                    #[doc = "to the rank, but in any case, `last_proof` is reset."]
                    EvidenceJudged {
                        who: ::subxt::utils::AccountId32,
                        wish: runtime_types::pallet_core_fellowship::Wish,
                        evidence: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        old_rank: ::core::primitive::u16,
                        new_rank: ::core::option::Option<::core::primitive::u16>,
                    },
                    #[codec(index = 9)]
                    #[doc = "Pre-ranked account has been inducted at their current rank."]
                    Imported {
                        who: ::subxt::utils::AccountId32,
                        rank: ::core::primitive::u16,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MemberStatus<_0> {
                pub is_active: ::core::primitive::bool,
                pub last_promotion: _0,
                pub last_proof: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ParamsType<_0, _1> {
                pub active_salary: [_0; 9usize],
                pub passive_salary: [_0; 9usize],
                pub demotion_period: [_1; 9usize],
                pub min_promotion_period: [_1; 9usize],
                pub offboard_timeout: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Wish {
                #[codec(index = 0)]
                Retention,
                #[codec(index = 1)]
                Promotion,
            }
        }
        pub mod pallet_democracy {
            use super::runtime_types;
            pub mod conviction {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Conviction {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Locked1x,
                    #[codec(index = 2)]
                    Locked2x,
                    #[codec(index = 3)]
                    Locked3x,
                    #[codec(index = 4)]
                    Locked4x,
                    #[codec(index = 5)]
                    Locked5x,
                    #[codec(index = 6)]
                    Locked6x,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::propose`]."]
                    propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::second`]."]
                    second {
                        #[codec(compact)]
                        proposal: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::emergency_cancel`]."]
                    emergency_cancel { ref_index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::external_propose`]."]
                    external_propose {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::external_propose_majority`]."]
                    external_propose_majority {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::external_propose_default`]."]
                    external_propose_default {
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::fast_track`]."]
                    fast_track {
                        proposal_hash: ::subxt::utils::H256,
                        voting_period: ::core::primitive::u32,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::veto_external`]."]
                    veto_external { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::cancel_referendum`]."]
                    cancel_referendum {
                        #[codec(compact)]
                        ref_index: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::delegate`]."]
                    delegate {
                        to: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::undelegate`]."]
                    undelegate,
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::clear_public_proposals`]."]
                    clear_public_proposals,
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::unlock`]."]
                    unlock {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::remove_vote`]."]
                    remove_vote { index: ::core::primitive::u32 },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::remove_other_vote`]."]
                    remove_other_vote {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::blacklist`]."]
                    blacklist {
                        proposal_hash: ::subxt::utils::H256,
                        maybe_ref_index: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::cancel_proposal`]."]
                    cancel_proposal {
                        #[codec(compact)]
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 18)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Value too low"]
                    ValueLow,
                    #[codec(index = 1)]
                    #[doc = "Proposal does not exist"]
                    ProposalMissing,
                    #[codec(index = 2)]
                    #[doc = "Cannot cancel the same proposal twice"]
                    AlreadyCanceled,
                    #[codec(index = 3)]
                    #[doc = "Proposal already made"]
                    DuplicateProposal,
                    #[codec(index = 4)]
                    #[doc = "Proposal still blacklisted"]
                    ProposalBlacklisted,
                    #[codec(index = 5)]
                    #[doc = "Next external proposal not simple majority"]
                    NotSimpleMajority,
                    #[codec(index = 6)]
                    #[doc = "Invalid hash"]
                    InvalidHash,
                    #[codec(index = 7)]
                    #[doc = "No external proposal"]
                    NoProposal,
                    #[codec(index = 8)]
                    #[doc = "Identity may not veto a proposal twice"]
                    AlreadyVetoed,
                    #[codec(index = 9)]
                    #[doc = "Vote given for invalid referendum"]
                    ReferendumInvalid,
                    #[codec(index = 10)]
                    #[doc = "No proposals waiting"]
                    NoneWaiting,
                    #[codec(index = 11)]
                    #[doc = "The given account did not vote on the referendum."]
                    NotVoter,
                    #[codec(index = 12)]
                    #[doc = "The actor has no permission to conduct the action."]
                    NoPermission,
                    #[codec(index = 13)]
                    #[doc = "The account is already delegating."]
                    AlreadyDelegating,
                    #[codec(index = 14)]
                    #[doc = "Too high a balance was provided that the account cannot afford."]
                    InsufficientFunds,
                    #[codec(index = 15)]
                    #[doc = "The account is not currently delegating."]
                    NotDelegating,
                    #[codec(index = 16)]
                    #[doc = "The account currently has votes attached to it and the operation cannot succeed until"]
                    #[doc = "these are removed, either through `unvote` or `reap_vote`."]
                    VotesExist,
                    #[codec(index = 17)]
                    #[doc = "The instant referendum origin is currently disallowed."]
                    InstantNotAllowed,
                    #[codec(index = 18)]
                    #[doc = "Delegation to oneself makes no sense."]
                    Nonsense,
                    #[codec(index = 19)]
                    #[doc = "Invalid upper bound."]
                    WrongUpperBound,
                    #[codec(index = 20)]
                    #[doc = "Maximum number of votes reached."]
                    MaxVotesReached,
                    #[codec(index = 21)]
                    #[doc = "Maximum number of items reached."]
                    TooMany,
                    #[codec(index = 22)]
                    #[doc = "Voting period too low"]
                    VotingPeriodLow,
                    #[codec(index = 23)]
                    #[doc = "The preimage does not exist."]
                    PreimageNotExist,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion has been proposed by a public account."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "A public proposal has been tabled for referendum vote."]
                    Tabled {
                        proposal_index: ::core::primitive::u32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "An external proposal has been tabled."]
                    ExternalTabled,
                    #[codec(index = 3)]
                    #[doc = "A referendum has begun."]
                    Started {
                        ref_index: ::core::primitive::u32,
                        threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proposal has been approved by referendum."]
                    Passed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "A proposal has been rejected by referendum."]
                    NotPassed { ref_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "A referendum has been cancelled."]
                    Cancelled { ref_index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "An account has delegated their vote to another account."]
                    Delegated {
                        who: ::subxt::utils::AccountId32,
                        target: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "An account has cancelled a previous delegation operation."]
                    Undelegated {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 9)]
                    #[doc = "An external proposal has been vetoed."]
                    Vetoed {
                        who: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        until: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "A proposal_hash has been blacklisted permanently."]
                    Blacklisted { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 11)]
                    #[doc = "An account has voted in a referendum"]
                    Voted {
                        voter: ::subxt::utils::AccountId32,
                        ref_index: ::core::primitive::u32,
                        vote: runtime_types::pallet_democracy::vote::AccountVote<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "An account has secconded a proposal"]
                    Seconded {
                        seconder: ::subxt::utils::AccountId32,
                        prop_index: ::core::primitive::u32,
                    },
                    #[codec(index = 13)]
                    #[doc = "A proposal got canceled."]
                    ProposalCanceled { prop_index: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "Metadata for a proposal or a referendum has been set."]
                    MetadataSet {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 15)]
                    #[doc = "Metadata for a proposal or a referendum has been cleared."]
                    MetadataCleared {
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been transferred to new owner."]
                    MetadataTransferred {
                        prev_owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        owner: runtime_types::pallet_democracy::types::MetadataOwner,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Delegations<_0> {
                    pub votes: _0,
                    pub capital: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MetadataOwner {
                    #[codec(index = 0)]
                    External,
                    #[codec(index = 1)]
                    Proposal(::core::primitive::u32),
                    #[codec(index = 2)]
                    Referendum(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReferendumInfo<_0, _1, _2> {
                    #[codec(index = 0)]
                    Ongoing(runtime_types::pallet_democracy::types::ReferendumStatus<_0, _1, _2>),
                    #[codec(index = 1)]
                    Finished {
                        approved: ::core::primitive::bool,
                        end: _0,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReferendumStatus<_0, _1, _2> {
                    pub end: _0,
                    pub proposal: _1,
                    pub threshold: runtime_types::pallet_democracy::vote_threshold::VoteThreshold,
                    pub delay: _0,
                    pub tally: runtime_types::pallet_democracy::types::Tally<_2>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Tally<_0> {
                    pub ayes: _0,
                    pub nays: _0,
                    pub turnout: _0,
                }
            }
            pub mod vote {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AccountVote<_0> {
                    #[codec(index = 0)]
                    Standard {
                        vote: runtime_types::pallet_democracy::vote::Vote,
                        balance: _0,
                    },
                    #[codec(index = 1)]
                    Split { aye: _0, nay: _0 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PriorLock<_0, _1>(pub _0, pub _1);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Voting<_0, _1, _2> {
                    #[codec(index = 0)]
                    Direct {
                        votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            _2,
                            runtime_types::pallet_democracy::vote::AccountVote<_0>,
                        )>,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                    #[codec(index = 1)]
                    Delegating {
                        balance: _0,
                        target: _1,
                        conviction: runtime_types::pallet_democracy::conviction::Conviction,
                        delegations: runtime_types::pallet_democracy::types::Delegations<_0>,
                        prior: runtime_types::pallet_democracy::vote::PriorLock<_2, _0>,
                    },
                }
            }
            pub mod vote_threshold {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum VoteThreshold {
                    #[codec(index = 0)]
                    SuperMajorityApprove,
                    #[codec(index = 1)]
                    SuperMajorityAgainst,
                    #[codec(index = 2)]
                    SimpleMajority,
                }
            }
        }
        pub mod pallet_election_provider_multi_phase {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "See [`Pallet::submit_unsigned`]."] submit_unsigned { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: kitchensink_runtime :: NposSolution16 > > , witness : runtime_types :: pallet_election_provider_multi_phase :: SolutionOrSnapshotSize , } , # [codec (index = 1)] # [doc = "See [`Pallet::set_minimum_untrusted_score`]."] set_minimum_untrusted_score { maybe_next_score : :: core :: option :: Option < runtime_types :: sp_npos_elections :: ElectionScore > , } , # [codec (index = 2)] # [doc = "See [`Pallet::set_emergency_election_result`]."] set_emergency_election_result { supports : :: std :: vec :: Vec < (:: subxt :: utils :: AccountId32 , runtime_types :: sp_npos_elections :: Support < :: subxt :: utils :: AccountId32 > ,) > , } , # [codec (index = 3)] # [doc = "See [`Pallet::submit`]."] submit { raw_solution : :: std :: boxed :: Box < runtime_types :: pallet_election_provider_multi_phase :: RawSolution < runtime_types :: kitchensink_runtime :: NposSolution16 > > , } , # [codec (index = 4)] # [doc = "See [`Pallet::governance_fallback`]."] governance_fallback { maybe_max_voters : :: core :: option :: Option < :: core :: primitive :: u32 > , maybe_max_targets : :: core :: option :: Option < :: core :: primitive :: u32 > , } , }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error of the pallet that can be returned in response to dispatches."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Submission was too early."]
                    PreDispatchEarlySubmission,
                    #[codec(index = 1)]
                    #[doc = "Wrong number of winners presented."]
                    PreDispatchWrongWinnerCount,
                    #[codec(index = 2)]
                    #[doc = "Submission was too weak, score-wise."]
                    PreDispatchWeakSubmission,
                    #[codec(index = 3)]
                    #[doc = "The queue was full, and the solution was not better than any of the existing ones."]
                    SignedQueueFull,
                    #[codec(index = 4)]
                    #[doc = "The origin failed to pay the deposit."]
                    SignedCannotPayDeposit,
                    #[codec(index = 5)]
                    #[doc = "Witness data to dispatchable is invalid."]
                    SignedInvalidWitness,
                    #[codec(index = 6)]
                    #[doc = "The signed submission consumes too much weight"]
                    SignedTooMuchWeight,
                    #[codec(index = 7)]
                    #[doc = "OCW submitted solution for wrong round"]
                    OcwCallWrongEra,
                    #[codec(index = 8)]
                    #[doc = "Snapshot metadata should exist but didn't."]
                    MissingSnapshotMetadata,
                    #[codec(index = 9)]
                    #[doc = "`Self::insert_submission` returned an invalid index."]
                    InvalidSubmissionIndex,
                    #[codec(index = 10)]
                    #[doc = "The call is not allowed at this point."]
                    CallNotAllowed,
                    #[codec(index = 11)]
                    #[doc = "The fallback failed"]
                    FallbackFailed,
                    #[codec(index = 12)]
                    #[doc = "Some bound not met"]
                    BoundNotMet,
                    #[codec(index = 13)]
                    #[doc = "Submitted solution has too many winners"]
                    TooManyWinners,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A solution was stored with the given compute."]
                    #[doc = ""]
                    #[doc = "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,"]
                    #[doc = "the stored solution was submited in the signed phase by a miner with the `AccountId`."]
                    #[doc = "Otherwise, the solution was stored either during the unsigned phase or by"]
                    #[doc = "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make"]
                    #[doc = "room for this one."]
                    SolutionStored {
                        compute:
                            runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
                        origin: ::core::option::Option<::subxt::utils::AccountId32>,
                        prev_ejected: ::core::primitive::bool,
                    },
                    #[codec(index = 1)]
                    #[doc = "The election has been finalized, with the given computation and score."]
                    ElectionFinalized {
                        compute:
                            runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
                        score: runtime_types::sp_npos_elections::ElectionScore,
                    },
                    #[codec(index = 2)]
                    #[doc = "An election failed."]
                    #[doc = ""]
                    #[doc = "Not much can be said about which computes failed in the process."]
                    ElectionFailed,
                    #[codec(index = 3)]
                    #[doc = "An account has been rewarded for their signed submission being finalized."]
                    Rewarded {
                        account: ::subxt::utils::AccountId32,
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account has been slashed for submitting an invalid signed submission."]
                    Slashed {
                        account: ::subxt::utils::AccountId32,
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "There was a phase transition in a given round."]
                    PhaseTransitioned {
                        from: runtime_types::pallet_election_provider_multi_phase::Phase<
                            ::core::primitive::u32,
                        >,
                        to: runtime_types::pallet_election_provider_multi_phase::Phase<
                            ::core::primitive::u32,
                        >,
                        round: ::core::primitive::u32,
                    },
                }
            }
            pub mod signed {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SignedSubmission<_0, _1, _2> {
                    pub who: _0,
                    pub deposit: _1,
                    pub raw_solution:
                        runtime_types::pallet_election_provider_multi_phase::RawSolution<_2>,
                    pub call_fee: _1,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ElectionCompute {
                #[codec(index = 0)]
                OnChain,
                #[codec(index = 1)]
                Signed,
                #[codec(index = 2)]
                Unsigned,
                #[codec(index = 3)]
                Fallback,
                #[codec(index = 4)]
                Emergency,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Phase<_0> {
                #[codec(index = 0)]
                Off,
                #[codec(index = 1)]
                Signed,
                #[codec(index = 2)]
                Unsigned((::core::primitive::bool, _0)),
                #[codec(index = 3)]
                Emergency,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RawSolution<_0> {
                pub solution: _0,
                pub score: runtime_types::sp_npos_elections::ElectionScore,
                pub round: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReadySolution {
                pub supports: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                    ::subxt::utils::AccountId32,
                    runtime_types::sp_npos_elections::Support<::subxt::utils::AccountId32>,
                )>,
                pub score: runtime_types::sp_npos_elections::ElectionScore,
                pub compute: runtime_types::pallet_election_provider_multi_phase::ElectionCompute,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RoundSnapshot<_0, _1> {
                pub voters: ::std::vec::Vec<_1>,
                pub targets: ::std::vec::Vec<_0>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SolutionOrSnapshotSize {
                #[codec(compact)]
                pub voters: ::core::primitive::u32,
                #[codec(compact)]
                pub targets: ::core::primitive::u32,
            }
        }
        pub mod pallet_elections_phragmen {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        votes: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::remove_voter`]."]
                    remove_voter,
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::submit_candidacy`]."]
                    submit_candidacy {
                        #[codec(compact)]
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::renounce_candidacy`]."]
                    renounce_candidacy {
                        renouncing: runtime_types::pallet_elections_phragmen::Renouncing,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::remove_member`]."]
                    remove_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        slash_bond: ::core::primitive::bool,
                        rerun_election: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::clean_defunct_voters`]."]
                    clean_defunct_voters {
                        num_voters: ::core::primitive::u32,
                        num_defunct: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Cannot vote when no candidates or members exist."]
                    UnableToVote,
                    #[codec(index = 1)]
                    #[doc = "Must vote for at least one candidate."]
                    NoVotes,
                    #[codec(index = 2)]
                    #[doc = "Cannot vote more than candidates."]
                    TooManyVotes,
                    #[codec(index = 3)]
                    #[doc = "Cannot vote more than maximum allowed."]
                    MaximumVotesExceeded,
                    #[codec(index = 4)]
                    #[doc = "Cannot vote with stake less than minimum balance."]
                    LowBalance,
                    #[codec(index = 5)]
                    #[doc = "Voter can not pay voting bond."]
                    UnableToPayBond,
                    #[codec(index = 6)]
                    #[doc = "Must be a voter."]
                    MustBeVoter,
                    #[codec(index = 7)]
                    #[doc = "Duplicated candidate submission."]
                    DuplicatedCandidate,
                    #[codec(index = 8)]
                    #[doc = "Too many candidates have been created."]
                    TooManyCandidates,
                    #[codec(index = 9)]
                    #[doc = "Member cannot re-submit candidacy."]
                    MemberSubmit,
                    #[codec(index = 10)]
                    #[doc = "Runner cannot re-submit candidacy."]
                    RunnerUpSubmit,
                    #[codec(index = 11)]
                    #[doc = "Candidate does not have enough funds."]
                    InsufficientCandidateFunds,
                    #[codec(index = 12)]
                    #[doc = "Not a member."]
                    NotMember,
                    #[codec(index = 13)]
                    #[doc = "The provided count of number of candidates is incorrect."]
                    InvalidWitnessData,
                    #[codec(index = 14)]
                    #[doc = "The provided count of number of votes is incorrect."]
                    InvalidVoteCount,
                    #[codec(index = 15)]
                    #[doc = "The renouncing origin presented a wrong `Renouncing` parameter."]
                    InvalidRenouncing,
                    #[codec(index = 16)]
                    #[doc = "Prediction regarding replacement after member removal is wrong."]
                    InvalidReplacement,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new term with new_members. This indicates that enough candidates existed to run"]
                    #[doc = "the election, not that enough have has been elected. The inner value must be examined"]
                    #[doc = "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond"]
                    #[doc = "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to"]
                    #[doc = "begin with."]
                    NewTerm {
                        new_members:
                            ::std::vec::Vec<(::subxt::utils::AccountId32, ::core::primitive::u128)>,
                    },
                    #[codec(index = 1)]
                    #[doc = "No (or not enough) candidates existed for this round. This is different from"]
                    #[doc = "`NewTerm(\\[\\])`. See the description of `NewTerm`."]
                    EmptyTerm,
                    #[codec(index = 2)]
                    #[doc = "Internal error happened while trying to perform election."]
                    ElectionError,
                    #[codec(index = 3)]
                    #[doc = "A member has been removed. This should always be followed by either `NewTerm` or"]
                    #[doc = "`EmptyTerm`."]
                    MemberKicked { member: ::subxt::utils::AccountId32 },
                    #[codec(index = 4)]
                    #[doc = "Someone has renounced their candidacy."]
                    Renounced {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A candidate was slashed by amount due to failing to obtain a seat as member or"]
                    #[doc = "runner-up."]
                    #[doc = ""]
                    #[doc = "Note that old members and runners-up are also candidates."]
                    CandidateSlashed {
                        candidate: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "A seat holder was slashed by amount by being forcefully removed from the set."]
                    SeatHolderSlashed {
                        seat_holder: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Renouncing {
                #[codec(index = 0)]
                Member,
                #[codec(index = 1)]
                RunnerUp,
                #[codec(index = 2)]
                Candidate(#[codec(compact)] ::core::primitive::u32),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SeatHolder<_0, _1> {
                pub who: _0,
                pub stake: _1,
                pub deposit: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Voter<_0, _1> {
                pub votes: ::std::vec::Vec<_0>,
                pub stake: _1,
                pub deposit: _1,
            }
        }
        pub mod pallet_fast_unstake {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::register_fast_unstake`]."]
                    register_fast_unstake,
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::deregister`]."]
                    deregister,
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::control`]."]
                    control {
                        eras_to_check: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The provided Controller account was not found."]
                    #[doc = ""]
                    #[doc = "This means that the given account is not bonded."]
                    NotController,
                    #[codec(index = 1)]
                    #[doc = "The bonded account has already been queued."]
                    AlreadyQueued,
                    #[codec(index = 2)]
                    #[doc = "The bonded account has active unlocking chunks."]
                    NotFullyBonded,
                    #[codec(index = 3)]
                    #[doc = "The provided un-staker is not in the `Queue`."]
                    NotQueued,
                    #[codec(index = 4)]
                    #[doc = "The provided un-staker is already in Head, and cannot deregister."]
                    AlreadyHead,
                    #[codec(index = 5)]
                    #[doc = "The call is not allowed at this point because the pallet is not active."]
                    CallNotAllowed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A staker was unstaked."]
                    Unstaked {
                        stash: ::subxt::utils::AccountId32,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "A staker was slashed for requesting fast-unstake whilst being exposed."]
                    Slashed {
                        stash: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A batch was partially checked for the given eras, but the process did not finish."]
                    BatchChecked {
                        eras: ::std::vec::Vec<::core::primitive::u32>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A batch of a given size was terminated."]
                    #[doc = ""]
                    #[doc = "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end"]
                    #[doc = "of the batch. A new batch will be created upon next block."]
                    BatchFinished { size: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "An internal error happened. Operations will be paused now."]
                    InternalError,
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct UnstakeRequest {
                    pub stashes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u128,
                    )>,
                    pub checked: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u32,
                    >,
                }
            }
        }
        pub mod pallet_glutton {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::initialize_pallet`]."]
                    initialize_pallet {
                        new_count: ::core::primitive::u32,
                        witness_count: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_compute`]."]
                    set_compute {
                        compute: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_storage`]."]
                    set_storage {
                        storage: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The pallet was already initialized."]
                    #[doc = ""]
                    #[doc = "Set `witness_count` to `Some` to bypass this error."]
                    AlreadyInitialized,
                    #[codec(index = 1)]
                    #[doc = "The limit was over [`crate::RESOURCE_HARD_LIMIT`]."]
                    InsaneLimit,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The pallet has been (re)initialized."]
                    PalletInitialized { reinit: ::core::primitive::bool },
                    #[codec(index = 1)]
                    #[doc = "The computation limit has been updated."]
                    ComputationLimitSet {
                        compute: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                    },
                    #[codec(index = 2)]
                    #[doc = "The storage limit has been updated."]
                    StorageLimitSet {
                        storage: runtime_types::sp_arithmetic::fixed_point::FixedU64,
                    },
                }
            }
        }
        pub mod pallet_grandpa {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::report_equivocation`]."]
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_grandpa::EquivocationProof<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::report_equivocation_unsigned`]."]
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_grandpa::EquivocationProof<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::note_stalled`]."]
                    note_stalled {
                        delay: ::core::primitive::u32,
                        best_finalized_block_number: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to signal GRANDPA pause when the authority set isn't live"]
                    #[doc = "(either paused or already pending pause)."]
                    PauseFailed,
                    #[codec(index = 1)]
                    #[doc = "Attempt to signal GRANDPA resume when the authority set isn't paused"]
                    #[doc = "(either live or already pending resume)."]
                    ResumeFailed,
                    #[codec(index = 2)]
                    #[doc = "Attempt to signal GRANDPA change with one already pending."]
                    ChangePending,
                    #[codec(index = 3)]
                    #[doc = "Cannot signal forced change so soon after last."]
                    TooSoon,
                    #[codec(index = 4)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 5)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 6)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New authority set has been applied."]
                    NewAuthorities {
                        authority_set: ::std::vec::Vec<(
                            runtime_types::sp_consensus_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Current authority set has been paused."]
                    Paused,
                    #[codec(index = 2)]
                    #[doc = "Current authority set has been resumed."]
                    Resumed,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StoredPendingChange<_0> {
                pub scheduled_at: _0,
                pub delay: _0,
                pub next_authorities:
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                pub forced: ::core::option::Option<_0>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum StoredState<_0> {
                #[codec(index = 0)]
                Live,
                #[codec(index = 1)]
                PendingPause { scheduled_at: _0, delay: _0 },
                #[codec(index = 2)]
                Paused,
                #[codec(index = 3)]
                PendingResume { scheduled_at: _0, delay: _0 },
            }
        }
        pub mod pallet_identity {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Identity pallet declaration."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::add_registrar`]."]
                    add_registrar {
                        account: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_identity`]."]
                    set_identity {
                        info:
                            ::std::boxed::Box<runtime_types::pallet_identity::types::IdentityInfo>,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_subs`]."]
                    set_subs {
                        subs: ::std::vec::Vec<(
                            ::subxt::utils::AccountId32,
                            runtime_types::pallet_identity::types::Data,
                        )>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::clear_identity`]."]
                    clear_identity,
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::request_judgement`]."]
                    request_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        #[codec(compact)]
                        max_fee: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::cancel_request`]."]
                    cancel_request { reg_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::set_fee`]."]
                    set_fee {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::set_account_id`]."]
                    set_account_id {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        new: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::set_fields`]."]
                    set_fields {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        fields: runtime_types::pallet_identity::types::BitFlags<
                            runtime_types::pallet_identity::types::IdentityField,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::provide_judgement`]."]
                    provide_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        judgement: runtime_types::pallet_identity::types::Judgement<
                            ::core::primitive::u128,
                        >,
                        identity: ::subxt::utils::H256,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::kill_identity`]."]
                    kill_identity {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::add_sub`]."]
                    add_sub {
                        sub: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::rename_sub`]."]
                    rename_sub {
                        sub: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::remove_sub`]."]
                    remove_sub {
                        sub: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::quit_sub`]."]
                    quit_sub,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many subs-accounts."]
                    TooManySubAccounts,
                    #[codec(index = 1)]
                    #[doc = "Account isn't found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Account isn't named."]
                    NotNamed,
                    #[codec(index = 3)]
                    #[doc = "Empty index."]
                    EmptyIndex,
                    #[codec(index = 4)]
                    #[doc = "Fee is changed."]
                    FeeChanged,
                    #[codec(index = 5)]
                    #[doc = "No identity found."]
                    NoIdentity,
                    #[codec(index = 6)]
                    #[doc = "Sticky judgement."]
                    StickyJudgement,
                    #[codec(index = 7)]
                    #[doc = "Judgement given."]
                    JudgementGiven,
                    #[codec(index = 8)]
                    #[doc = "Invalid judgement."]
                    InvalidJudgement,
                    #[codec(index = 9)]
                    #[doc = "The index is invalid."]
                    InvalidIndex,
                    #[codec(index = 10)]
                    #[doc = "The target is invalid."]
                    InvalidTarget,
                    #[codec(index = 11)]
                    #[doc = "Too many additional fields."]
                    TooManyFields,
                    #[codec(index = 12)]
                    #[doc = "Maximum amount of registrars reached. Cannot add any more."]
                    TooManyRegistrars,
                    #[codec(index = 13)]
                    #[doc = "Account ID is already named."]
                    AlreadyClaimed,
                    #[codec(index = 14)]
                    #[doc = "Sender is not a sub-account."]
                    NotSub,
                    #[codec(index = 15)]
                    #[doc = "Sub-account isn't owned by sender."]
                    NotOwned,
                    #[codec(index = 16)]
                    #[doc = "The provided judgement was for a different identity."]
                    JudgementForDifferentIdentity,
                    #[codec(index = 17)]
                    #[doc = "Error that occurs when there is an issue paying for judgement."]
                    JudgementPaymentFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A name was set or reset (which will remove all judgements)."]
                    IdentitySet { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    #[doc = "A name was cleared, and the given balance returned."]
                    IdentityCleared {
                        who: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A name was removed and the given balance slashed."]
                    IdentityKilled {
                        who: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A judgement was asked from a registrar."]
                    JudgementRequested {
                        who: ::subxt::utils::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A judgement request was retracted."]
                    JudgementUnrequested {
                        who: ::subxt::utils::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A judgement was given by a registrar."]
                    JudgementGiven {
                        target: ::subxt::utils::AccountId32,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "A registrar was added."]
                    RegistrarAdded {
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "A sub-identity was added to an identity and the deposit paid."]
                    SubIdentityAdded {
                        sub: ::subxt::utils::AccountId32,
                        main: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "A sub-identity was removed from an identity and the deposit freed."]
                    SubIdentityRemoved {
                        sub: ::subxt::utils::AccountId32,
                        main: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
                    #[doc = "main identity account to the sub-identity account."]
                    SubIdentityRevoked {
                        sub: ::subxt::utils::AccountId32,
                        main: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BitFlags<_0>(
                    pub ::core::primitive::u64,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 35)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 36)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 37)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum IdentityField {
                    #[codec(index = 1)]
                    Display,
                    #[codec(index = 2)]
                    Legal,
                    #[codec(index = 4)]
                    Web,
                    #[codec(index = 8)]
                    Riot,
                    #[codec(index = 16)]
                    Email,
                    #[codec(index = 32)]
                    PgpFingerprint,
                    #[codec(index = 64)]
                    Image,
                    #[codec(index = 128)]
                    Twitter,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdentityInfo {
                    pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::pallet_identity::types::Data,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                    pub display: runtime_types::pallet_identity::types::Data,
                    pub legal: runtime_types::pallet_identity::types::Data,
                    pub web: runtime_types::pallet_identity::types::Data,
                    pub riot: runtime_types::pallet_identity::types::Data,
                    pub email: runtime_types::pallet_identity::types::Data,
                    pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
                    pub image: runtime_types::pallet_identity::types::Data,
                    pub twitter: runtime_types::pallet_identity::types::Data,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Judgement<_0> {
                    #[codec(index = 0)]
                    Unknown,
                    #[codec(index = 1)]
                    FeePaid(_0),
                    #[codec(index = 2)]
                    Reasonable,
                    #[codec(index = 3)]
                    KnownGood,
                    #[codec(index = 4)]
                    OutOfDate,
                    #[codec(index = 5)]
                    LowQuality,
                    #[codec(index = 6)]
                    Erroneous,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegistrarInfo<_0, _1> {
                    pub account: _1,
                    pub fee: _0,
                    pub fields: runtime_types::pallet_identity::types::BitFlags<
                        runtime_types::pallet_identity::types::IdentityField,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Registration<_0> {
                    pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::pallet_identity::types::Judgement<_0>,
                    )>,
                    pub deposit: _0,
                    pub info: runtime_types::pallet_identity::types::IdentityInfo,
                }
            }
        }
        pub mod pallet_im_online {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::heartbeat`]."]
                    heartbeat {
                        heartbeat:
                            runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                        signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Non existent public key."]
                    InvalidKey,
                    #[codec(index = 1)]
                    #[doc = "Duplicated heartbeat."]
                    DuplicatedHeartbeat,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new heartbeat was received from `AuthorityId`."]
                    HeartbeatReceived {
                        authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                    },
                    #[codec(index = 1)]
                    #[doc = "At the end of the session, no offence was committed."]
                    AllGood,
                    #[codec(index = 2)]
                    #[doc = "At the end of the session, at least one validator was found to be offline."]
                    SomeOffline {
                        offline: ::std::vec::Vec<(
                            ::subxt::utils::AccountId32,
                            runtime_types::pallet_staking::Exposure<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u128,
                            >,
                        )>,
                    },
                }
            }
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Heartbeat<_0> {
                pub block_number: _0,
                pub session_index: ::core::primitive::u32,
                pub authority_index: ::core::primitive::u32,
                pub validators_len: ::core::primitive::u32,
            }
        }
        pub mod pallet_indices {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::claim`]."]
                    claim { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::transfer`]."]
                    transfer {
                        new: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::free`]."]
                    free { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::force_transfer`]."]
                    force_transfer {
                        new: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        index: ::core::primitive::u32,
                        freeze: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::freeze`]."]
                    freeze { index: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The index was not already assigned."]
                    NotAssigned,
                    #[codec(index = 1)]
                    #[doc = "The index is assigned to another account."]
                    NotOwner,
                    #[codec(index = 2)]
                    #[doc = "The index was not available."]
                    InUse,
                    #[codec(index = 3)]
                    #[doc = "The source and destination accounts are identical."]
                    NotTransfer,
                    #[codec(index = 4)]
                    #[doc = "The index is permanent and may not be freed/changed."]
                    Permanent,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A account index was assigned."]
                    IndexAssigned {
                        who: ::subxt::utils::AccountId32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A account index has been freed up (unassigned)."]
                    IndexFreed { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "A account index has been frozen to its current account ID."]
                    IndexFrozen {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                    },
                }
            }
        }
        pub mod pallet_lottery {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::buy_ticket`]."]
                    buy_ticket {
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_calls`]."]
                    set_calls {
                        calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::start_lottery`]."]
                    start_lottery {
                        price: ::core::primitive::u128,
                        length: ::core::primitive::u32,
                        delay: ::core::primitive::u32,
                        repeat: ::core::primitive::bool,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::stop_repeat`]."]
                    stop_repeat,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "A lottery has not been configured."]
                    NotConfigured,
                    #[codec(index = 1)]
                    #[doc = "A lottery is already in progress."]
                    InProgress,
                    #[codec(index = 2)]
                    #[doc = "A lottery has already ended."]
                    AlreadyEnded,
                    #[codec(index = 3)]
                    #[doc = "The call is not valid for an open lottery."]
                    InvalidCall,
                    #[codec(index = 4)]
                    #[doc = "You are already participating in the lottery with this call."]
                    AlreadyParticipating,
                    #[codec(index = 5)]
                    #[doc = "Too many calls for a single lottery."]
                    TooManyCalls,
                    #[codec(index = 6)]
                    #[doc = "Failed to encode calls"]
                    EncodingFailed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A lottery has been started!"]
                    LotteryStarted,
                    #[codec(index = 1)]
                    #[doc = "A new set of calls have been set!"]
                    CallsUpdated,
                    #[codec(index = 2)]
                    #[doc = "A winner has been chosen!"]
                    Winner {
                        winner: ::subxt::utils::AccountId32,
                        lottery_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A ticket has been bought!"]
                    TicketBought {
                        who: ::subxt::utils::AccountId32,
                        call_index: (::core::primitive::u8, ::core::primitive::u8),
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LotteryConfig<_0, _1> {
                pub price: _1,
                pub start: _0,
                pub length: _0,
                pub delay: _0,
                pub repeat: ::core::primitive::bool,
            }
        }
        pub mod pallet_membership {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::add_member`]."]
                    add_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::remove_member`]."]
                    remove_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::swap_member`]."]
                    swap_member {
                        remove: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        add: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::reset_members`]."]
                    reset_members {
                        members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::change_key`]."]
                    change_key {
                        new: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::set_prime`]."]
                    set_prime {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::clear_prime`]."]
                    clear_prime,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Already a member."]
                    AlreadyMember,
                    #[codec(index = 1)]
                    #[doc = "Not a member."]
                    NotMember,
                    #[codec(index = 2)]
                    #[doc = "Too many members."]
                    TooManyMembers,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The given member was added; see the transaction for who."]
                    MemberAdded,
                    #[codec(index = 1)]
                    #[doc = "The given member was removed; see the transaction for who."]
                    MemberRemoved,
                    #[codec(index = 2)]
                    #[doc = "Two members were swapped; see the transaction for who."]
                    MembersSwapped,
                    #[codec(index = 3)]
                    #[doc = "The membership was reset; see the transaction for who the new set is."]
                    MembersReset,
                    #[codec(index = 4)]
                    #[doc = "One of the members' keys changed."]
                    KeyChanged,
                    #[codec(index = 5)]
                    #[doc = "Phantom member, never used."]
                    Dummy,
                }
            }
        }
        pub mod pallet_message_queue {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::reap_page`]."]
                    reap_page {
                        message_origin: ::core::primitive::u32,
                        page_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::execute_overweight`]."]
                    execute_overweight {
                        message_origin: ::core::primitive::u32,
                        page: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                        weight_limit: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Page is not reapable because it has items remaining to be processed and is not old"]
                    #[doc = "enough."]
                    NotReapable,
                    #[codec(index = 1)]
                    #[doc = "Page to be reaped does not exist."]
                    NoPage,
                    #[codec(index = 2)]
                    #[doc = "The referenced message could not be found."]
                    NoMessage,
                    #[codec(index = 3)]
                    #[doc = "The message was already processed and cannot be processed again."]
                    AlreadyProcessed,
                    #[codec(index = 4)]
                    #[doc = "The message is queued for future execution."]
                    Queued,
                    #[codec(index = 5)]
                    #[doc = "There is temporarily not enough weight to continue servicing messages."]
                    InsufficientWeight,
                    #[codec(index = 6)]
                    #[doc = "This message is temporarily unprocessable."]
                    #[doc = ""]
                    #[doc = "Such errors are expected, but not guaranteed, to resolve themselves eventually through"]
                    #[doc = "retrying."]
                    TemporarilyUnprocessable,
                    #[codec(index = 7)]
                    #[doc = "The queue is paused and no message can be executed from it."]
                    #[doc = ""]
                    #[doc = "This can change at any time and may resolve in the future by re-trying."]
                    QueuePaused,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Message discarded due to an error in the `MessageProcessor` (usually a format error)."]
                    ProcessingFailed {
                        id: [::core::primitive::u8; 32usize],
                        origin: ::core::primitive::u32,
                        error: runtime_types::frame_support::traits::messages::ProcessMessageError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Message is processed."]
                    Processed {
                        id: [::core::primitive::u8; 32usize],
                        origin: ::core::primitive::u32,
                        weight_used: runtime_types::sp_weights::weight_v2::Weight,
                        success: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Message placed in overweight queue."]
                    OverweightEnqueued {
                        id: [::core::primitive::u8; 32usize],
                        origin: ::core::primitive::u32,
                        page_index: ::core::primitive::u32,
                        message_index: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "This page was reaped."]
                    PageReaped {
                        origin: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BookState<_0> {
                pub begin: ::core::primitive::u32,
                pub end: ::core::primitive::u32,
                pub count: ::core::primitive::u32,
                pub ready_neighbours:
                    ::core::option::Option<runtime_types::pallet_message_queue::Neighbours<_0>>,
                pub message_count: ::core::primitive::u64,
                pub size: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Neighbours<_0> {
                pub prev: _0,
                pub next: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Page<_0> {
                pub remaining: _0,
                pub remaining_size: _0,
                pub first_index: _0,
                pub first: _0,
                pub last: _0,
                pub heap: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::as_multi_threshold_1`]."]
                    as_multi_threshold_1 {
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::as_multi`]."]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::approve_as_multi`]."]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::cancel_as_multi`]."]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: ::subxt::utils::AccountId32,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: ::core::primitive::u32,
            }
        }
        pub mod pallet_nft_fractionalization {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::fractionalize`]."]
                    fractionalize {
                        nft_collection_id: ::core::primitive::u32,
                        nft_id: ::core::primitive::u32,
                        asset_id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        fractions: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::unify`]."]
                    unify {
                        nft_collection_id: ::core::primitive::u32,
                        nft_id: ::core::primitive::u32,
                        asset_id: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Asset ID does not correspond to locked NFT."]
                    IncorrectAssetId,
                    #[codec(index = 1)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 2)]
                    #[doc = "NFT doesn't exist."]
                    NftNotFound,
                    #[codec(index = 3)]
                    #[doc = "NFT has not yet been fractionalised."]
                    NftNotFractionalized,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An NFT was successfully fractionalized."]
                    NftFractionalized {
                        nft_collection: ::core::primitive::u32,
                        nft: ::core::primitive::u32,
                        fractions: ::core::primitive::u128,
                        asset: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "An NFT was successfully returned back."]
                    NftUnified {
                        nft_collection: ::core::primitive::u32,
                        nft: ::core::primitive::u32,
                        asset: ::core::primitive::u32,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum HoldReason {
                    #[codec(index = 0)]
                    Fractionalized,
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Details<_0, _1, _2, _3> {
                    pub asset: _0,
                    pub fractions: _1,
                    pub deposit: _2,
                    pub asset_creator: _3,
                }
            }
        }
        pub mod pallet_nfts {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::create`]."]
                    create {
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        config: runtime_types::pallet_nfts::types::CollectionConfig<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::force_create`]."]
                    force_create {
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        config: runtime_types::pallet_nfts::types::CollectionConfig<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::destroy`]."]
                    destroy {
                        collection: ::core::primitive::u32,
                        witness: runtime_types::pallet_nfts::types::DestroyWitness,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::mint`]."]
                    mint {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        mint_to: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        witness_data: ::core::option::Option<
                            runtime_types::pallet_nfts::types::MintWitness<
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::force_mint`]."]
                    force_mint {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        mint_to: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        item_config: runtime_types::pallet_nfts::types::ItemConfig,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::burn`]."]
                    burn {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::transfer`]."]
                    transfer {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::redeposit`]."]
                    redeposit {
                        collection: ::core::primitive::u32,
                        items: ::std::vec::Vec<::core::primitive::u32>,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::lock_item_transfer`]."]
                    lock_item_transfer {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::unlock_item_transfer`]."]
                    unlock_item_transfer {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::lock_collection`]."]
                    lock_collection {
                        collection: ::core::primitive::u32,
                        lock_settings: runtime_types::pallet_nfts::types::BitFlags<
                            runtime_types::pallet_nfts::types::CollectionSetting,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::transfer_ownership`]."]
                    transfer_ownership {
                        collection: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::set_team`]."]
                    set_team {
                        collection: ::core::primitive::u32,
                        issuer: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                        admin: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                        freezer: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::force_collection_owner`]."]
                    force_collection_owner {
                        collection: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::force_collection_config`]."]
                    force_collection_config {
                        collection: ::core::primitive::u32,
                        config: runtime_types::pallet_nfts::types::CollectionConfig<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::approve_transfer`]."]
                    approve_transfer {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        maybe_deadline: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::cancel_approval`]."]
                    cancel_approval {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::clear_all_transfer_approvals`]."]
                    clear_all_transfer_approvals {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 18)]
                    #[doc = "See [`Pallet::lock_item_properties`]."]
                    lock_item_properties {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        lock_metadata: ::core::primitive::bool,
                        lock_attributes: ::core::primitive::bool,
                    },
                    #[codec(index = 19)]
                    #[doc = "See [`Pallet::set_attribute`]."]
                    set_attribute {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            ::subxt::utils::AccountId32,
                        >,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 20)]
                    #[doc = "See [`Pallet::force_set_attribute`]."]
                    force_set_attribute {
                        set_as: ::core::option::Option<::subxt::utils::AccountId32>,
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            ::subxt::utils::AccountId32,
                        >,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 21)]
                    #[doc = "See [`Pallet::clear_attribute`]."]
                    clear_attribute {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            ::subxt::utils::AccountId32,
                        >,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 22)]
                    #[doc = "See [`Pallet::approve_item_attributes`]."]
                    approve_item_attributes {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 23)]
                    #[doc = "See [`Pallet::cancel_item_attributes_approval`]."]
                    cancel_item_attributes_approval {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        witness: runtime_types::pallet_nfts::types::CancelAttributesApprovalWitness,
                    },
                    #[codec(index = 24)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 25)]
                    #[doc = "See [`Pallet::clear_metadata`]."]
                    clear_metadata {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 26)]
                    #[doc = "See [`Pallet::set_collection_metadata`]."]
                    set_collection_metadata {
                        collection: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 27)]
                    #[doc = "See [`Pallet::clear_collection_metadata`]."]
                    clear_collection_metadata { collection: ::core::primitive::u32 },
                    #[codec(index = 28)]
                    #[doc = "See [`Pallet::set_accept_ownership`]."]
                    set_accept_ownership {
                        maybe_collection: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 29)]
                    #[doc = "See [`Pallet::set_collection_max_supply`]."]
                    set_collection_max_supply {
                        collection: ::core::primitive::u32,
                        max_supply: ::core::primitive::u32,
                    },
                    #[codec(index = 30)]
                    #[doc = "See [`Pallet::update_mint_settings`]."]
                    update_mint_settings {
                        collection: ::core::primitive::u32,
                        mint_settings: runtime_types::pallet_nfts::types::MintSettings<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 31)]
                    #[doc = "See [`Pallet::set_price`]."]
                    set_price {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        price: ::core::option::Option<::core::primitive::u128>,
                        whitelisted_buyer: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 32)]
                    #[doc = "See [`Pallet::buy_item`]."]
                    buy_item {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        bid_price: ::core::primitive::u128,
                    },
                    #[codec(index = 33)]
                    #[doc = "See [`Pallet::pay_tips`]."]
                    pay_tips {
                        tips: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_nfts::types::ItemTip<
                                ::core::primitive::u32,
                                ::core::primitive::u32,
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 34)]
                    #[doc = "See [`Pallet::create_swap`]."]
                    create_swap {
                        offered_collection: ::core::primitive::u32,
                        offered_item: ::core::primitive::u32,
                        desired_collection: ::core::primitive::u32,
                        maybe_desired_item: ::core::option::Option<::core::primitive::u32>,
                        maybe_price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    #[doc = "See [`Pallet::cancel_swap`]."]
                    cancel_swap {
                        offered_collection: ::core::primitive::u32,
                        offered_item: ::core::primitive::u32,
                    },
                    #[codec(index = 36)]
                    #[doc = "See [`Pallet::claim_swap`]."]
                    claim_swap {
                        send_collection: ::core::primitive::u32,
                        send_item: ::core::primitive::u32,
                        receive_collection: ::core::primitive::u32,
                        receive_item: ::core::primitive::u32,
                        witness_price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                    #[codec(index = 37)]
                    #[doc = "See [`Pallet::mint_pre_signed`]."]
                    mint_pre_signed {
                        mint_data: ::std::boxed::Box<
                            runtime_types::pallet_nfts::types::PreSignedMint<
                                ::core::primitive::u32,
                                ::core::primitive::u32,
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                            >,
                        >,
                        signature: runtime_types::sp_runtime::MultiSignature,
                        signer: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 38)]
                    #[doc = "See [`Pallet::set_attributes_pre_signed`]."]
                    set_attributes_pre_signed {
                        data: runtime_types::pallet_nfts::types::PreSignedAttributes<
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        signature: runtime_types::sp_runtime::MultiSignature,
                        signer: ::subxt::utils::AccountId32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 1)]
                    #[doc = "The given item ID is unknown."]
                    UnknownCollection,
                    #[codec(index = 2)]
                    #[doc = "The item ID has already been used for an item."]
                    AlreadyExists,
                    #[codec(index = 3)]
                    #[doc = "The approval had a deadline that expired, so the approval isn't valid anymore."]
                    ApprovalExpired,
                    #[codec(index = 4)]
                    #[doc = "The owner turned out to be different to what was expected."]
                    WrongOwner,
                    #[codec(index = 5)]
                    #[doc = "The witness data given does not match the current state of the chain."]
                    BadWitness,
                    #[codec(index = 6)]
                    #[doc = "Collection ID is already taken."]
                    CollectionIdInUse,
                    #[codec(index = 7)]
                    #[doc = "Items within that collection are non-transferable."]
                    ItemsNonTransferable,
                    #[codec(index = 8)]
                    #[doc = "The provided account is not a delegate."]
                    NotDelegate,
                    #[codec(index = 9)]
                    #[doc = "The delegate turned out to be different to what was expected."]
                    WrongDelegate,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The named owner has not signed ownership acceptance of the collection."]
                    Unaccepted,
                    #[codec(index = 12)]
                    #[doc = "The item is locked (non-transferable)."]
                    ItemLocked,
                    #[codec(index = 13)]
                    #[doc = "Item's attributes are locked."]
                    LockedItemAttributes,
                    #[codec(index = 14)]
                    #[doc = "Collection's attributes are locked."]
                    LockedCollectionAttributes,
                    #[codec(index = 15)]
                    #[doc = "Item's metadata is locked."]
                    LockedItemMetadata,
                    #[codec(index = 16)]
                    #[doc = "Collection's metadata is locked."]
                    LockedCollectionMetadata,
                    #[codec(index = 17)]
                    #[doc = "All items have been minted."]
                    MaxSupplyReached,
                    #[codec(index = 18)]
                    #[doc = "The max supply is locked and can't be changed."]
                    MaxSupplyLocked,
                    #[codec(index = 19)]
                    #[doc = "The provided max supply is less than the number of items a collection already has."]
                    MaxSupplyTooSmall,
                    #[codec(index = 20)]
                    #[doc = "The given item ID is unknown."]
                    UnknownItem,
                    #[codec(index = 21)]
                    #[doc = "Swap doesn't exist."]
                    UnknownSwap,
                    #[codec(index = 22)]
                    #[doc = "The given item has no metadata set."]
                    MetadataNotFound,
                    #[codec(index = 23)]
                    #[doc = "The provided attribute can't be found."]
                    AttributeNotFound,
                    #[codec(index = 24)]
                    #[doc = "Item is not for sale."]
                    NotForSale,
                    #[codec(index = 25)]
                    #[doc = "The provided bid is too low."]
                    BidTooLow,
                    #[codec(index = 26)]
                    #[doc = "The item has reached its approval limit."]
                    ReachedApprovalLimit,
                    #[codec(index = 27)]
                    #[doc = "The deadline has already expired."]
                    DeadlineExpired,
                    #[codec(index = 28)]
                    #[doc = "The duration provided should be less than or equal to `MaxDeadlineDuration`."]
                    WrongDuration,
                    #[codec(index = 29)]
                    #[doc = "The method is disabled by system settings."]
                    MethodDisabled,
                    #[codec(index = 30)]
                    #[doc = "The provided setting can't be set."]
                    WrongSetting,
                    #[codec(index = 31)]
                    #[doc = "Item's config already exists and should be equal to the provided one."]
                    InconsistentItemConfig,
                    #[codec(index = 32)]
                    #[doc = "Config for a collection or an item can't be found."]
                    NoConfig,
                    #[codec(index = 33)]
                    #[doc = "Some roles were not cleared."]
                    RolesNotCleared,
                    #[codec(index = 34)]
                    #[doc = "Mint has not started yet."]
                    MintNotStarted,
                    #[codec(index = 35)]
                    #[doc = "Mint has already ended."]
                    MintEnded,
                    #[codec(index = 36)]
                    #[doc = "The provided Item was already used for claiming."]
                    AlreadyClaimed,
                    #[codec(index = 37)]
                    #[doc = "The provided data is incorrect."]
                    IncorrectData,
                    #[codec(index = 38)]
                    #[doc = "The extrinsic was sent by the wrong origin."]
                    WrongOrigin,
                    #[codec(index = 39)]
                    #[doc = "The provided signature is incorrect."]
                    WrongSignature,
                    #[codec(index = 40)]
                    #[doc = "The provided metadata might be too long."]
                    IncorrectMetadata,
                    #[codec(index = 41)]
                    #[doc = "Can't set more attributes per one call."]
                    MaxAttributesLimitReached,
                    #[codec(index = 42)]
                    #[doc = "The provided namespace isn't supported in this call."]
                    WrongNamespace,
                    #[codec(index = 43)]
                    #[doc = "Can't delete non-empty collections."]
                    CollectionNotEmpty,
                    #[codec(index = 44)]
                    #[doc = "The witness data should be provided."]
                    WitnessRequired,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A `collection` was created."]
                    Created {
                        collection: ::core::primitive::u32,
                        creator: ::subxt::utils::AccountId32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A `collection` was force-created."]
                    ForceCreated {
                        collection: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A `collection` was destroyed."]
                    Destroyed { collection: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "An `item` was issued."]
                    Issued {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An `item` was transferred."]
                    Transferred {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "An `item` was destroyed."]
                    Burned {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "An `item` became non-transferable."]
                    ItemTransferLocked {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "An `item` became transferable."]
                    ItemTransferUnlocked {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "`item` metadata or attributes were locked."]
                    ItemPropertiesLocked {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        lock_metadata: ::core::primitive::bool,
                        lock_attributes: ::core::primitive::bool,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some `collection` was locked."]
                    CollectionLocked { collection: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        collection: ::core::primitive::u32,
                        new_owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 11)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        collection: ::core::primitive::u32,
                        issuer: ::core::option::Option<::subxt::utils::AccountId32>,
                        admin: ::core::option::Option<::subxt::utils::AccountId32>,
                        freezer: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 12)]
                    #[doc = "An `item` of a `collection` has been approved by the `owner` for transfer by"]
                    #[doc = "a `delegate`."]
                    TransferApproved {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                        deadline: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 13)]
                    #[doc = "An approval for a `delegate` account to transfer the `item` of an item"]
                    #[doc = "`collection` was cancelled by its `owner`."]
                    ApprovalCancelled {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 14)]
                    #[doc = "All approvals of an item got cancelled."]
                    AllApprovalsCancelled {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 15)]
                    #[doc = "A `collection` has had its config changed by the `Force` origin."]
                    CollectionConfigChanged { collection: ::core::primitive::u32 },
                    #[codec(index = 16)]
                    #[doc = "New metadata has been set for a `collection`."]
                    CollectionMetadataSet {
                        collection: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 17)]
                    #[doc = "Metadata has been cleared for a `collection`."]
                    CollectionMetadataCleared { collection: ::core::primitive::u32 },
                    #[codec(index = 18)]
                    #[doc = "New metadata has been set for an item."]
                    ItemMetadataSet {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 19)]
                    #[doc = "Metadata has been cleared for an item."]
                    ItemMetadataCleared {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 20)]
                    #[doc = "The deposit for a set of `item`s within a `collection` has been updated."]
                    Redeposited {
                        collection: ::core::primitive::u32,
                        successful_items: ::std::vec::Vec<::core::primitive::u32>,
                    },
                    #[codec(index = 21)]
                    #[doc = "New attribute metadata has been set for a `collection` or `item`."]
                    AttributeSet {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            ::subxt::utils::AccountId32,
                        >,
                    },
                    #[codec(index = 22)]
                    #[doc = "Attribute metadata has been cleared for a `collection` or `item`."]
                    AttributeCleared {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            ::subxt::utils::AccountId32,
                        >,
                    },
                    #[codec(index = 23)]
                    #[doc = "A new approval to modify item attributes was added."]
                    ItemAttributesApprovalAdded {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        delegate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 24)]
                    #[doc = "A new approval to modify item attributes was removed."]
                    ItemAttributesApprovalRemoved {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        delegate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 25)]
                    #[doc = "Ownership acceptance has changed for an account."]
                    OwnershipAcceptanceChanged {
                        who: ::subxt::utils::AccountId32,
                        maybe_collection: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 26)]
                    #[doc = "Max supply has been set for a collection."]
                    CollectionMaxSupplySet {
                        collection: ::core::primitive::u32,
                        max_supply: ::core::primitive::u32,
                    },
                    #[codec(index = 27)]
                    #[doc = "Mint settings for a collection had changed."]
                    CollectionMintSettingsUpdated { collection: ::core::primitive::u32 },
                    #[codec(index = 28)]
                    #[doc = "Event gets emitted when the `NextCollectionId` gets incremented."]
                    NextCollectionIdIncremented { next_id: ::core::primitive::u32 },
                    #[codec(index = 29)]
                    #[doc = "The price was set for the item."]
                    ItemPriceSet {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        price: ::core::primitive::u128,
                        whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 30)]
                    #[doc = "The price for the item was removed."]
                    ItemPriceRemoved {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 31)]
                    #[doc = "An item was bought."]
                    ItemBought {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        price: ::core::primitive::u128,
                        seller: ::subxt::utils::AccountId32,
                        buyer: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 32)]
                    #[doc = "A tip was sent."]
                    TipSent {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        sender: ::subxt::utils::AccountId32,
                        receiver: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 33)]
                    #[doc = "An `item` swap intent was created."]
                    SwapCreated {
                        offered_collection: ::core::primitive::u32,
                        offered_item: ::core::primitive::u32,
                        desired_collection: ::core::primitive::u32,
                        desired_item: ::core::option::Option<::core::primitive::u32>,
                        price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 34)]
                    #[doc = "The swap was cancelled."]
                    SwapCancelled {
                        offered_collection: ::core::primitive::u32,
                        offered_item: ::core::primitive::u32,
                        desired_collection: ::core::primitive::u32,
                        desired_item: ::core::option::Option<::core::primitive::u32>,
                        price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 35)]
                    #[doc = "The swap has been claimed."]
                    SwapClaimed {
                        sent_collection: ::core::primitive::u32,
                        sent_item: ::core::primitive::u32,
                        sent_item_owner: ::subxt::utils::AccountId32,
                        received_collection: ::core::primitive::u32,
                        received_item: ::core::primitive::u32,
                        received_item_owner: ::subxt::utils::AccountId32,
                        price: ::core::option::Option<
                            runtime_types::pallet_nfts::types::PriceWithDirection<
                                ::core::primitive::u128,
                            >,
                        >,
                        deadline: ::core::primitive::u32,
                    },
                    #[codec(index = 36)]
                    #[doc = "New attributes have been set for an `item` of the `collection`."]
                    PreSignedAttributesSet {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        namespace: runtime_types::pallet_nfts::types::AttributeNamespace<
                            ::subxt::utils::AccountId32,
                        >,
                    },
                    #[codec(index = 37)]
                    #[doc = "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`"]
                    #[doc = "within that `collection`."]
                    PalletAttributeSet {
                        collection: ::core::primitive::u32,
                        item: ::core::option::Option<::core::primitive::u32>,
                        attribute: runtime_types::pallet_nfts::types::PalletAttributes<
                            ::core::primitive::u32,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AttributeDeposit<_0, _1> {
                    pub account: ::core::option::Option<_1>,
                    pub amount: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum AttributeNamespace<_0> {
                    #[codec(index = 0)]
                    Pallet,
                    #[codec(index = 1)]
                    CollectionOwner,
                    #[codec(index = 2)]
                    ItemOwner,
                    #[codec(index = 3)]
                    Account(_0),
                }
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BitFlags<_0>(
                    pub ::core::primitive::u64,
                    #[codec(skip)] pub ::core::marker::PhantomData<_0>,
                );
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CancelAttributesApprovalWitness {
                    pub account_attributes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectionConfig<_0, _1, _2> {
                    pub settings: runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::CollectionSetting,
                    >,
                    pub max_supply: ::core::option::Option<_1>,
                    pub mint_settings: runtime_types::pallet_nfts::types::MintSettings<_0, _1, _1>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectionDetails<_0, _1> {
                    pub owner: _0,
                    pub owner_deposit: _1,
                    pub items: ::core::primitive::u32,
                    pub item_metadatas: ::core::primitive::u32,
                    pub item_configs: ::core::primitive::u32,
                    pub attributes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectionMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CollectionRole {
                    #[codec(index = 1)]
                    Issuer,
                    #[codec(index = 2)]
                    Freezer,
                    #[codec(index = 4)]
                    Admin,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum CollectionSetting {
                    #[codec(index = 1)]
                    TransferableItems,
                    #[codec(index = 2)]
                    UnlockedMetadata,
                    #[codec(index = 4)]
                    UnlockedAttributes,
                    #[codec(index = 8)]
                    UnlockedMaxSupply,
                    #[codec(index = 16)]
                    DepositRequired,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyWitness {
                    #[codec(compact)]
                    pub item_metadatas: ::core::primitive::u32,
                    #[codec(compact)]
                    pub item_configs: ::core::primitive::u32,
                    #[codec(compact)]
                    pub attributes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemConfig {
                    pub settings: runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::ItemSetting,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemDeposit<_0, _1> {
                    pub account: _1,
                    pub amount: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemDetails<_0, _1, _2> {
                    pub owner: _0,
                    pub approvals: _2,
                    pub deposit: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemMetadataDeposit<_0, _1> {
                    pub account: ::core::option::Option<_1>,
                    pub amount: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ItemSetting {
                    #[codec(index = 1)]
                    Transferable,
                    #[codec(index = 2)]
                    UnlockedMetadata,
                    #[codec(index = 4)]
                    UnlockedAttributes,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemTip<_0, _1, _2, _3> {
                    pub collection: _0,
                    pub item: _1,
                    pub receiver: _2,
                    pub amount: _3,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MintSettings<_0, _1, _2> {
                    pub mint_type: runtime_types::pallet_nfts::types::MintType<_1>,
                    pub price: ::core::option::Option<_0>,
                    pub start_block: ::core::option::Option<_1>,
                    pub end_block: ::core::option::Option<_1>,
                    pub default_item_settings: runtime_types::pallet_nfts::types::BitFlags<
                        runtime_types::pallet_nfts::types::ItemSetting,
                    >,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MintType<_0> {
                    #[codec(index = 0)]
                    Issuer,
                    #[codec(index = 1)]
                    Public,
                    #[codec(index = 2)]
                    HolderOf(_0),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MintWitness<_0, _1> {
                    pub owned_item: _0,
                    pub mint_price: ::core::option::Option<_1>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PalletAttributes<_0> {
                    #[codec(index = 0)]
                    UsedToClaim(_0),
                    #[codec(index = 1)]
                    TransferDisabled,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PalletFeature {
                    #[codec(index = 1)]
                    Trading,
                    #[codec(index = 2)]
                    Attributes,
                    #[codec(index = 4)]
                    Approvals,
                    #[codec(index = 8)]
                    Swaps,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PendingSwap<_0, _1, _2, _3> {
                    pub desired_collection: _0,
                    pub desired_item: ::core::option::Option<_0>,
                    pub price: ::core::option::Option<_2>,
                    pub deadline: _3,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PreSignedAttributes<_0, _1, _2, _3> {
                    pub collection: _0,
                    pub item: _1,
                    pub attributes: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    pub namespace: runtime_types::pallet_nfts::types::AttributeNamespace<_2>,
                    pub deadline: _3,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PreSignedMint<_0, _1, _2, _3, _4> {
                    pub collection: _0,
                    pub item: _1,
                    pub attributes: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                    pub metadata: ::std::vec::Vec<::core::primitive::u8>,
                    pub only_account: ::core::option::Option<_2>,
                    pub deadline: _3,
                    pub mint_price: ::core::option::Option<_4>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PriceDirection {
                    #[codec(index = 0)]
                    Send,
                    #[codec(index = 1)]
                    Receive,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PriceWithDirection<_0> {
                    pub amount: _0,
                    pub direction: runtime_types::pallet_nfts::types::PriceDirection,
                }
            }
        }
        pub mod pallet_nis {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Bid<_0, _1> {
                    pub amount: _0,
                    pub who: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::place_bid`]."]
                    place_bid {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::retract_bid`]."]
                    retract_bid {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::fund_deficit`]."]
                    fund_deficit,
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::thaw_private`]."]
                    thaw_private {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        maybe_proportion: ::core::option::Option<
                            runtime_types::sp_arithmetic::per_things::Perquintill,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::thaw_communal`]."]
                    thaw_communal {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::communify`]."]
                    communify {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::privatize`]."]
                    privatize {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The duration of the bid is less than one."]
                    DurationTooSmall,
                    #[codec(index = 1)]
                    #[doc = "The duration is the bid is greater than the number of queues."]
                    DurationTooBig,
                    #[codec(index = 2)]
                    #[doc = "The amount of the bid is less than the minimum allowed."]
                    AmountTooSmall,
                    #[codec(index = 3)]
                    #[doc = "The queue for the bid's duration is full and the amount bid is too low to get in"]
                    #[doc = "through replacing an existing bid."]
                    BidTooLow,
                    #[codec(index = 4)]
                    #[doc = "Receipt index is unknown."]
                    UnknownReceipt,
                    #[codec(index = 5)]
                    #[doc = "Not the owner of the receipt."]
                    NotOwner,
                    #[codec(index = 6)]
                    #[doc = "Bond not yet at expiry date."]
                    NotExpired,
                    #[codec(index = 7)]
                    #[doc = "The given bid for retraction is not found."]
                    UnknownBid,
                    #[codec(index = 8)]
                    #[doc = "The portion supplied is beyond the value of the receipt."]
                    PortionTooBig,
                    #[codec(index = 9)]
                    #[doc = "Not enough funds are held to pay out."]
                    Unfunded,
                    #[codec(index = 10)]
                    #[doc = "There are enough funds for what is required."]
                    AlreadyFunded,
                    #[codec(index = 11)]
                    #[doc = "The thaw throttle has been reached for this period."]
                    Throttled,
                    #[codec(index = 12)]
                    #[doc = "The operation would result in a receipt worth an insignficant value."]
                    MakesDust,
                    #[codec(index = 13)]
                    #[doc = "The receipt is already communal."]
                    AlreadyCommunal,
                    #[codec(index = 14)]
                    #[doc = "The receipt is already private."]
                    AlreadyPrivate,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A bid was successfully placed."]
                    BidPlaced {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A bid was successfully removed (before being accepted)."]
                    BidRetracted {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A bid was dropped from a queue because of another, more substantial, bid was present."]
                    BidDropped {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A bid was accepted. The balance may not be released until expiry."]
                    Issued {
                        index: ::core::primitive::u32,
                        expiry: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "An receipt has been (at least partially) thawed."]
                    Thawed {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                        amount: ::core::primitive::u128,
                        dropped: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "An automatic funding of the deficit was made."]
                    Funded { deficit: ::core::primitive::u128 },
                    #[codec(index = 6)]
                    #[doc = "A receipt was transfered."]
                    Transferred {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum HoldReason {
                    #[codec(index = 0)]
                    NftReceipt,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReceiptRecord<_0, _1, _2> {
                    pub proportion: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub owner: ::core::option::Option<(_0, _2)>,
                    pub expiry: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SummaryRecord<_0, _1> {
                    pub proportion_owed: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub index: ::core::primitive::u32,
                    pub thawed: runtime_types::sp_arithmetic::per_things::Perquintill,
                    pub last_period: _0,
                    pub receipts_on_hold: _1,
                }
            }
        }
        pub mod pallet_nomination_pools {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::join`]."]
                    join {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        pool_id: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::bond_extra`]."]
                    bond_extra {
                        extra: runtime_types::pallet_nomination_pools::BondExtra<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::claim_payout`]."]
                    claim_payout,
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::unbond`]."]
                    unbond {
                        member_account: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        unbonding_points: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::pool_withdraw_unbonded`]."]
                    pool_withdraw_unbonded {
                        pool_id: ::core::primitive::u32,
                        num_slashing_spans: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::withdraw_unbonded`]."]
                    withdraw_unbonded {
                        member_account: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        num_slashing_spans: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::create`]."]
                    create {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        root: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        nominator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        bouncer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::create_with_pool_id`]."]
                    create_with_pool_id {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        root: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        nominator: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        bouncer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        pool_id: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::nominate`]."]
                    nominate {
                        pool_id: ::core::primitive::u32,
                        validators: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::set_state`]."]
                    set_state {
                        pool_id: ::core::primitive::u32,
                        state: runtime_types::pallet_nomination_pools::PoolState,
                    },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        pool_id: ::core::primitive::u32,
                        metadata: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::set_configs`]."]
                    set_configs {
                        min_join_bond: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::core::primitive::u128,
                        >,
                        min_create_bond: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::core::primitive::u128,
                        >,
                        max_pools: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::core::primitive::u32,
                        >,
                        max_members: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::core::primitive::u32,
                        >,
                        max_members_per_pool: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::core::primitive::u32,
                        >,
                        global_max_commission: runtime_types::pallet_nomination_pools::ConfigOp<
                            runtime_types::sp_arithmetic::per_things::Perbill,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::update_roles`]."]
                    update_roles {
                        pool_id: ::core::primitive::u32,
                        new_root: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::subxt::utils::AccountId32,
                        >,
                        new_nominator: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::subxt::utils::AccountId32,
                        >,
                        new_bouncer: runtime_types::pallet_nomination_pools::ConfigOp<
                            ::subxt::utils::AccountId32,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::chill`]."]
                    chill { pool_id: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::bond_extra_other`]."]
                    bond_extra_other {
                        member: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        extra: runtime_types::pallet_nomination_pools::BondExtra<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::set_claim_permission`]."]
                    set_claim_permission {
                        permission: runtime_types::pallet_nomination_pools::ClaimPermission,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::claim_payout_other`]."]
                    claim_payout_other { other: ::subxt::utils::AccountId32 },
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::set_commission`]."]
                    set_commission {
                        pool_id: ::core::primitive::u32,
                        new_commission: ::core::option::Option<(
                            runtime_types::sp_arithmetic::per_things::Perbill,
                            ::subxt::utils::AccountId32,
                        )>,
                    },
                    #[codec(index = 18)]
                    #[doc = "See [`Pallet::set_commission_max`]."]
                    set_commission_max {
                        pool_id: ::core::primitive::u32,
                        max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 19)]
                    #[doc = "See [`Pallet::set_commission_change_rate`]."]
                    set_commission_change_rate {
                        pool_id: ::core::primitive::u32,
                        change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 20)]
                    #[doc = "See [`Pallet::claim_commission`]."]
                    claim_commission { pool_id: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DefensiveError {
                    #[codec(index = 0)]
                    NotEnoughSpaceInUnbondPool,
                    #[codec(index = 1)]
                    PoolNotFound,
                    #[codec(index = 2)]
                    RewardPoolNotFound,
                    #[codec(index = 3)]
                    SubPoolsNotFound,
                    #[codec(index = 4)]
                    BondedStashKilledPrematurely,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "A (bonded) pool id does not exist."]
                    PoolNotFound,
                    #[codec(index = 1)]
                    #[doc = "An account is not a member."]
                    PoolMemberNotFound,
                    #[codec(index = 2)]
                    #[doc = "A reward pool does not exist. In all cases this is a system logic error."]
                    RewardPoolNotFound,
                    #[codec(index = 3)]
                    #[doc = "A sub pool does not exist."]
                    SubPoolsNotFound,
                    #[codec(index = 4)]
                    #[doc = "An account is already delegating in another pool. An account may only belong to one"]
                    #[doc = "pool at a time."]
                    AccountBelongsToOtherPool,
                    #[codec(index = 5)]
                    #[doc = "The member is fully unbonded (and thus cannot access the bonded and reward pool"]
                    #[doc = "anymore to, for example, collect rewards)."]
                    FullyUnbonding,
                    #[codec(index = 6)]
                    #[doc = "The member cannot unbond further chunks due to reaching the limit."]
                    MaxUnbondingLimit,
                    #[codec(index = 7)]
                    #[doc = "None of the funds can be withdrawn yet because the bonding duration has not passed."]
                    CannotWithdrawAny,
                    #[codec(index = 8)]
                    #[doc = "The amount does not meet the minimum bond to either join or create a pool."]
                    #[doc = ""]
                    #[doc = "The depositor can never unbond to a value less than"]
                    #[doc = "`Pallet::depositor_min_bond`. The caller does not have nominating"]
                    #[doc = "permissions for the pool. Members can never unbond to a value below `MinJoinBond`."]
                    MinimumBondNotMet,
                    #[codec(index = 9)]
                    #[doc = "The transaction could not be executed due to overflow risk for the pool."]
                    OverflowRisk,
                    #[codec(index = 10)]
                    #[doc = "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for"]
                    #[doc = "other members to be permissionlessly unbonded."]
                    NotDestroying,
                    #[codec(index = 11)]
                    #[doc = "The caller does not have nominating permissions for the pool."]
                    NotNominator,
                    #[codec(index = 12)]
                    #[doc = "Either a) the caller cannot make a valid kick or b) the pool is not destroying."]
                    NotKickerOrDestroying,
                    #[codec(index = 13)]
                    #[doc = "The pool is not open to join"]
                    NotOpen,
                    #[codec(index = 14)]
                    #[doc = "The system is maxed out on pools."]
                    MaxPools,
                    #[codec(index = 15)]
                    #[doc = "Too many members in the pool or system."]
                    MaxPoolMembers,
                    #[codec(index = 16)]
                    #[doc = "The pools state cannot be changed."]
                    CanNotChangeState,
                    #[codec(index = 17)]
                    #[doc = "The caller does not have adequate permissions."]
                    DoesNotHavePermission,
                    #[codec(index = 18)]
                    #[doc = "Metadata exceeds [`Config::MaxMetadataLen`]"]
                    MetadataExceedsMaxLen,
                    #[codec(index = 19)]
                    #[doc = "Some error occurred that should never happen. This should be reported to the"]
                    #[doc = "maintainers."]
                    Defensive(runtime_types::pallet_nomination_pools::pallet::DefensiveError),
                    #[codec(index = 20)]
                    #[doc = "Partial unbonding now allowed permissionlessly."]
                    PartialUnbondNotAllowedPermissionlessly,
                    #[codec(index = 21)]
                    #[doc = "The pool's max commission cannot be set higher than the existing value."]
                    MaxCommissionRestricted,
                    #[codec(index = 22)]
                    #[doc = "The supplied commission exceeds the max allowed commission."]
                    CommissionExceedsMaximum,
                    #[codec(index = 23)]
                    #[doc = "Not enough blocks have surpassed since the last commission update."]
                    CommissionChangeThrottled,
                    #[codec(index = 24)]
                    #[doc = "The submitted changes to commission change rate are not allowed."]
                    CommissionChangeRateNotAllowed,
                    #[codec(index = 25)]
                    #[doc = "There is no pending commission to claim."]
                    NoPendingCommission,
                    #[codec(index = 26)]
                    #[doc = "No commission current has been set."]
                    NoCommissionCurrentSet,
                    #[codec(index = 27)]
                    #[doc = "Pool id currently in use."]
                    PoolIdInUse,
                    #[codec(index = 28)]
                    #[doc = "Pool id provided is not correct/usable."]
                    InvalidPoolId,
                    #[codec(index = 29)]
                    #[doc = "Bonding extra is restricted to the exact pending reward amount."]
                    BondExtraRestricted,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Events of this pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A pool has been created."]
                    Created {
                        depositor: ::subxt::utils::AccountId32,
                        pool_id: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A member has became bonded in a pool."]
                    Bonded {
                        member: ::subxt::utils::AccountId32,
                        pool_id: ::core::primitive::u32,
                        bonded: ::core::primitive::u128,
                        joined: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "A payout has been made to a member."]
                    PaidOut {
                        member: ::subxt::utils::AccountId32,
                        pool_id: ::core::primitive::u32,
                        payout: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A member has unbonded from their pool."]
                    #[doc = ""]
                    #[doc = "- `balance` is the corresponding balance of the number of points that has been"]
                    #[doc = "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded"]
                    #[doc = "  pool."]
                    #[doc = "- `points` is the number of points that are issued as a result of `balance` being"]
                    #[doc = "dissolved into the corresponding unbonding pool."]
                    #[doc = "- `era` is the era in which the balance will be unbonded."]
                    #[doc = "In the absence of slashing, these values will match. In the presence of slashing, the"]
                    #[doc = "number of points that are issued in the unbonding pool will be less than the amount"]
                    #[doc = "requested to be unbonded."]
                    Unbonded {
                        member: ::subxt::utils::AccountId32,
                        pool_id: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                        points: ::core::primitive::u128,
                        era: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A member has withdrawn from their pool."]
                    #[doc = ""]
                    #[doc = "The given number of `points` have been dissolved in return of `balance`."]
                    #[doc = ""]
                    #[doc = "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance"]
                    #[doc = "will be 1."]
                    Withdrawn {
                        member: ::subxt::utils::AccountId32,
                        pool_id: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                        points: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "A pool has been destroyed."]
                    Destroyed { pool_id: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "The state of a pool has changed"]
                    StateChanged {
                        pool_id: ::core::primitive::u32,
                        new_state: runtime_types::pallet_nomination_pools::PoolState,
                    },
                    #[codec(index = 7)]
                    #[doc = "A member has been removed from a pool."]
                    #[doc = ""]
                    #[doc = "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."]
                    MemberRemoved {
                        pool_id: ::core::primitive::u32,
                        member: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "The roles of a pool have been updated to the given new roles. Note that the depositor"]
                    #[doc = "can never change."]
                    RolesUpdated {
                        root: ::core::option::Option<::subxt::utils::AccountId32>,
                        bouncer: ::core::option::Option<::subxt::utils::AccountId32>,
                        nominator: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 9)]
                    #[doc = "The active balance of pool `pool_id` has been slashed to `balance`."]
                    PoolSlashed {
                        pool_id: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."]
                    UnbondingPoolSlashed {
                        pool_id: ::core::primitive::u32,
                        era: ::core::primitive::u32,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "A pool's commission setting has been changed."]
                    PoolCommissionUpdated {
                        pool_id: ::core::primitive::u32,
                        current: ::core::option::Option<(
                            runtime_types::sp_arithmetic::per_things::Perbill,
                            ::subxt::utils::AccountId32,
                        )>,
                    },
                    #[codec(index = 12)]
                    #[doc = "A pool's maximum commission setting has been changed."]
                    PoolMaxCommissionUpdated {
                        pool_id: ::core::primitive::u32,
                        max_commission: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 13)]
                    #[doc = "A pool's commission `change_rate` has been changed."]
                    PoolCommissionChangeRateUpdated {
                        pool_id: ::core::primitive::u32,
                        change_rate: runtime_types::pallet_nomination_pools::CommissionChangeRate<
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "Pool commission has been claimed."]
                    PoolCommissionClaimed {
                        pool_id: ::core::primitive::u32,
                        commission: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum BondExtra<_0> {
                #[codec(index = 0)]
                FreeBalance(_0),
                #[codec(index = 1)]
                Rewards,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BondedPoolInner {
                pub commission: runtime_types::pallet_nomination_pools::Commission,
                pub member_counter: ::core::primitive::u32,
                pub points: ::core::primitive::u128,
                pub roles:
                    runtime_types::pallet_nomination_pools::PoolRoles<::subxt::utils::AccountId32>,
                pub state: runtime_types::pallet_nomination_pools::PoolState,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ClaimPermission {
                #[codec(index = 0)]
                Permissioned,
                #[codec(index = 1)]
                PermissionlessCompound,
                #[codec(index = 2)]
                PermissionlessWithdraw,
                #[codec(index = 3)]
                PermissionlessAll,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Commission {
                pub current: ::core::option::Option<(
                    runtime_types::sp_arithmetic::per_things::Perbill,
                    ::subxt::utils::AccountId32,
                )>,
                pub max: ::core::option::Option<runtime_types::sp_arithmetic::per_things::Perbill>,
                pub change_rate: ::core::option::Option<
                    runtime_types::pallet_nomination_pools::CommissionChangeRate<
                        ::core::primitive::u32,
                    >,
                >,
                pub throttle_from: ::core::option::Option<::core::primitive::u32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CommissionChangeRate<_0> {
                pub max_increase: runtime_types::sp_arithmetic::per_things::Perbill,
                pub min_delay: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ConfigOp<_0> {
                #[codec(index = 0)]
                Noop,
                #[codec(index = 1)]
                Set(_0),
                #[codec(index = 2)]
                Remove,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PoolMember {
                pub pool_id: ::core::primitive::u32,
                pub points: ::core::primitive::u128,
                pub last_recorded_reward_counter:
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                pub unbonding_eras:
                    runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PoolRoles<_0> {
                pub depositor: _0,
                pub root: ::core::option::Option<_0>,
                pub nominator: ::core::option::Option<_0>,
                pub bouncer: ::core::option::Option<_0>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum PoolState {
                #[codec(index = 0)]
                Open,
                #[codec(index = 1)]
                Blocked,
                #[codec(index = 2)]
                Destroying,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RewardPool {
                pub last_recorded_reward_counter:
                    runtime_types::sp_arithmetic::fixed_point::FixedU128,
                pub last_recorded_total_payouts: ::core::primitive::u128,
                pub total_rewards_claimed: ::core::primitive::u128,
                pub total_commission_pending: ::core::primitive::u128,
                pub total_commission_claimed: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SubPools {
                pub no_era: runtime_types::pallet_nomination_pools::UnbondPool,
                pub with_era:
                    runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                        ::core::primitive::u32,
                        runtime_types::pallet_nomination_pools::UnbondPool,
                    >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnbondPool {
                pub points: ::core::primitive::u128,
                pub balance: ::core::primitive::u128,
            }
        }
        pub mod pallet_offences {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "There is an offence reported of the given `kind` happened at the `session_index` and"]
                    #[doc = "(kind-specific) time slot. This event is not deposited for duplicate slashes."]
                    #[doc = "\\[kind, timeslot\\]."]
                    Offence {
                        kind: [::core::primitive::u8; 16usize],
                        timeslot: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
            }
        }
        pub mod pallet_preimage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::note_preimage`]."]
                    note_preimage {
                        bytes: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::unnote_preimage`]."]
                    unnote_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::request_preimage`]."]
                    request_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::unrequest_preimage`]."]
                    unrequest_preimage { hash: ::subxt::utils::H256 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Preimage is too large to store on-chain."]
                    TooBig,
                    #[codec(index = 1)]
                    #[doc = "Preimage has already been noted on-chain."]
                    AlreadyNoted,
                    #[codec(index = 2)]
                    #[doc = "The user is not authorized to perform this action."]
                    NotAuthorized,
                    #[codec(index = 3)]
                    #[doc = "The preimage cannot be removed since it has not yet been noted."]
                    NotNoted,
                    #[codec(index = 4)]
                    #[doc = "A preimage may not be removed when there are outstanding requests."]
                    Requested,
                    #[codec(index = 5)]
                    #[doc = "The preimage request cannot be removed since no outstanding requests exist."]
                    NotRequested,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A preimage has been noted."]
                    Noted { hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    #[doc = "A preimage has been requested."]
                    Requested { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "A preimage has ben cleared."]
                    Cleared { hash: ::subxt::utils::H256 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested {
                    deposit: (_0, _1),
                    len: ::core::primitive::u32,
                },
                #[codec(index = 1)]
                Requested {
                    deposit: ::core::option::Option<(_0, _1)>,
                    count: ::core::primitive::u32,
                    len: ::core::option::Option<::core::primitive::u32>,
                },
            }
        }
        pub mod pallet_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::proxy`]."]
                    proxy {
                        real: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::kitchensink_runtime::ProxyType>,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::add_proxy`]."]
                    add_proxy {
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::remove_proxy`]."]
                    remove_proxy {
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::remove_proxies`]."]
                    remove_proxies,
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::create_pure`]."]
                    create_pure {
                        proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::kill_pure`]."]
                    kill_pure {
                        spawner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                        index: ::core::primitive::u16,
                        #[codec(compact)]
                        height: ::core::primitive::u32,
                        #[codec(compact)]
                        ext_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::announce`]."]
                    announce {
                        real: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::remove_announcement`]."]
                    remove_announcement {
                        real: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::reject_announcement`]."]
                    reject_announcement {
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::proxy_announced`]."]
                    proxy_announced {
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        real: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        force_proxy_type:
                            ::core::option::Option<runtime_types::kitchensink_runtime::ProxyType>,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "There are too many proxies registered or too many announcements pending."]
                    TooMany,
                    #[codec(index = 1)]
                    #[doc = "Proxy registration not found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Sender is not a proxy of the account to be proxied."]
                    NotProxy,
                    #[codec(index = 3)]
                    #[doc = "A call which is incompatible with the proxy type's filter was attempted."]
                    Unproxyable,
                    #[codec(index = 4)]
                    #[doc = "Account is already a proxy."]
                    Duplicate,
                    #[codec(index = 5)]
                    #[doc = "Call may not be made by proxy because it may escalate its privileges."]
                    NoPermission,
                    #[codec(index = 6)]
                    #[doc = "Announcement, if made at all, was made too recently."]
                    Unannounced,
                    #[codec(index = 7)]
                    #[doc = "Cannot add self as proxy."]
                    NoSelfProxy,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A proxy was executed correctly, with the given."]
                    ProxyExecuted {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "A pure account has been created by new proxy with given"]
                    #[doc = "disambiguation index and proxy type."]
                    PureCreated {
                        pure: ::subxt::utils::AccountId32,
                        who: ::subxt::utils::AccountId32,
                        proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                        disambiguation_index: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    #[doc = "An announcement was placed to make a call in the future."]
                    Announced {
                        real: ::subxt::utils::AccountId32,
                        proxy: ::subxt::utils::AccountId32,
                        call_hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proxy was added."]
                    ProxyAdded {
                        delegator: ::subxt::utils::AccountId32,
                        delegatee: ::subxt::utils::AccountId32,
                        proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A proxy was removed."]
                    ProxyRemoved {
                        delegator: ::subxt::utils::AccountId32,
                        delegatee: ::subxt::utils::AccountId32,
                        proxy_type: runtime_types::kitchensink_runtime::ProxyType,
                        delay: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Announcement<_0, _1, _2> {
                pub real: _0,
                pub call_hash: _1,
                pub height: _2,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ProxyDefinition<_0, _1, _2> {
                pub delegate: _0,
                pub proxy_type: _1,
                pub delay: _2,
            }
        }
        pub mod pallet_ranked_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::add_member`]."]
                    add_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::promote_member`]."]
                    promote_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::demote_member`]."]
                    demote_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::remove_member`]."]
                    remove_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        min_rank: ::core::primitive::u16,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        poll: ::core::primitive::u32,
                        aye: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::cleanup_poll`]."]
                    cleanup_poll {
                        poll_index: ::core::primitive::u32,
                        max: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is already a member."]
                    AlreadyMember,
                    #[codec(index = 1)]
                    #[doc = "Account is not a member."]
                    NotMember,
                    #[codec(index = 2)]
                    #[doc = "The given poll index is unknown or has closed."]
                    NotPolling,
                    #[codec(index = 3)]
                    #[doc = "The given poll is still ongoing."]
                    Ongoing,
                    #[codec(index = 4)]
                    #[doc = "There are no further records to be removed."]
                    NoneRemaining,
                    #[codec(index = 5)]
                    #[doc = "Unexpected error in state."]
                    Corruption,
                    #[codec(index = 6)]
                    #[doc = "The member's rank is too low to vote."]
                    RankTooLow,
                    #[codec(index = 7)]
                    #[doc = "The information provided is incorrect."]
                    InvalidWitness,
                    #[codec(index = 8)]
                    #[doc = "The origin is not sufficiently privileged to do the operation."]
                    NoPermission,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A member `who` has been added."]
                    MemberAdded { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    #[doc = "The member `who`se rank has been changed to the given `rank`."]
                    RankChanged {
                        who: ::subxt::utils::AccountId32,
                        rank: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    #[doc = "The member `who` of given `rank` has been removed from the collective."]
                    MemberRemoved {
                        who: ::subxt::utils::AccountId32,
                        rank: ::core::primitive::u16,
                    },
                    #[codec(index = 3)]
                    #[doc = "The member `who` has voted for the `poll` with the given `vote` leading to an updated"]
                    #[doc = "`tally`."]
                    Voted {
                        who: ::subxt::utils::AccountId32,
                        poll: ::core::primitive::u32,
                        vote: runtime_types::pallet_ranked_collective::VoteRecord,
                        tally: runtime_types::pallet_ranked_collective::Tally,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MemberRecord {
                pub rank: ::core::primitive::u16,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Tally {
                pub bare_ayes: ::core::primitive::u32,
                pub ayes: ::core::primitive::u32,
                pub nays: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VoteRecord {
                #[codec(index = 0)]
                Aye(::core::primitive::u32),
                #[codec(index = 1)]
                Nay(::core::primitive::u32),
            }
        }
        pub mod pallet_recovery {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::as_recovered`]."]
                    as_recovered {
                        account: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::set_recovered`]."]
                    set_recovered {
                        lost: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        rescuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::create_recovery`]."]
                    create_recovery {
                        friends: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        threshold: ::core::primitive::u16,
                        delay_period: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::initiate_recovery`]."]
                    initiate_recovery {
                        account: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::vouch_recovery`]."]
                    vouch_recovery {
                        lost: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        rescuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::claim_recovery`]."]
                    claim_recovery {
                        account: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::close_recovery`]."]
                    close_recovery {
                        rescuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::remove_recovery`]."]
                    remove_recovery,
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::cancel_recovered`]."]
                    cancel_recovered {
                        account: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "User is not allowed to make a call on behalf of this account"]
                    NotAllowed,
                    #[codec(index = 1)]
                    #[doc = "Threshold must be greater than zero"]
                    ZeroThreshold,
                    #[codec(index = 2)]
                    #[doc = "Friends list must be greater than zero and threshold"]
                    NotEnoughFriends,
                    #[codec(index = 3)]
                    #[doc = "Friends list must be less than max friends"]
                    MaxFriends,
                    #[codec(index = 4)]
                    #[doc = "Friends list must be sorted and free of duplicates"]
                    NotSorted,
                    #[codec(index = 5)]
                    #[doc = "This account is not set up for recovery"]
                    NotRecoverable,
                    #[codec(index = 6)]
                    #[doc = "This account is already set up for recovery"]
                    AlreadyRecoverable,
                    #[codec(index = 7)]
                    #[doc = "A recovery process has already started for this account"]
                    AlreadyStarted,
                    #[codec(index = 8)]
                    #[doc = "A recovery process has not started for this rescuer"]
                    NotStarted,
                    #[codec(index = 9)]
                    #[doc = "This account is not a friend who can vouch"]
                    NotFriend,
                    #[codec(index = 10)]
                    #[doc = "The friend must wait until the delay period to vouch for this recovery"]
                    DelayPeriod,
                    #[codec(index = 11)]
                    #[doc = "This user has already vouched for this recovery"]
                    AlreadyVouched,
                    #[codec(index = 12)]
                    #[doc = "The threshold for recovering this account has not been met"]
                    Threshold,
                    #[codec(index = 13)]
                    #[doc = "There are still active recovery attempts that need to be closed"]
                    StillActive,
                    #[codec(index = 14)]
                    #[doc = "This account is already set up for recovery"]
                    AlreadyProxy,
                    #[codec(index = 15)]
                    #[doc = "Some internal state is broken."]
                    BadState,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A recovery process has been set up for an account."]
                    RecoveryCreated {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A recovery process has been initiated for lost account by rescuer account."]
                    RecoveryInitiated {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A recovery process for lost account by rescuer account has been vouched for by sender."]
                    RecoveryVouched {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                        sender: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A recovery process for lost account by rescuer account has been closed."]
                    RecoveryClosed {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Lost account has been successfully recovered by rescuer account."]
                    AccountRecovered {
                        lost_account: ::subxt::utils::AccountId32,
                        rescuer_account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A recovery process has been removed for an account."]
                    RecoveryRemoved {
                        lost_account: ::subxt::utils::AccountId32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ActiveRecovery<_0, _1, _2> {
                pub created: _0,
                pub deposit: _1,
                pub friends: _2,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RecoveryConfig<_0, _1, _2> {
                pub delay_period: _0,
                pub deposit: _1,
                pub friends: _2,
                pub threshold: ::core::primitive::u16,
            }
        }
        pub mod pallet_referenda {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::submit`]."]
                    submit {
                        proposal_origin:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::OriginCaller>,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        enactment_moment:
                            runtime_types::frame_support::traits::schedule::DispatchTime<
                                ::core::primitive::u32,
                            >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::place_decision_deposit`]."]
                    place_decision_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::refund_decision_deposit`]."]
                    refund_decision_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::cancel`]."]
                    cancel { index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::kill`]."]
                    kill { index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::nudge_referendum`]."]
                    nudge_referendum { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::one_fewer_deciding`]."]
                    one_fewer_deciding { track: ::core::primitive::u16 },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::refund_submission_deposit`]."]
                    refund_submission_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        index: ::core::primitive::u32,
                        maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call2 {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::submit`]."]
                    submit {
                        proposal_origin:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::OriginCaller>,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        enactment_moment:
                            runtime_types::frame_support::traits::schedule::DispatchTime<
                                ::core::primitive::u32,
                            >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::place_decision_deposit`]."]
                    place_decision_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::refund_decision_deposit`]."]
                    refund_decision_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::cancel`]."]
                    cancel { index: ::core::primitive::u32 },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::kill`]."]
                    kill { index: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::nudge_referendum`]."]
                    nudge_referendum { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::one_fewer_deciding`]."]
                    one_fewer_deciding { track: ::core::primitive::u16 },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::refund_submission_deposit`]."]
                    refund_submission_deposit { index: ::core::primitive::u32 },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        index: ::core::primitive::u32,
                        maybe_hash: ::core::option::Option<::subxt::utils::H256>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Referendum is not ongoing."]
                    NotOngoing,
                    #[codec(index = 1)]
                    #[doc = "Referendum's decision deposit is already paid."]
                    HasDeposit,
                    #[codec(index = 2)]
                    #[doc = "The track identifier given was invalid."]
                    BadTrack,
                    #[codec(index = 3)]
                    #[doc = "There are already a full complement of referenda in progress for this track."]
                    Full,
                    #[codec(index = 4)]
                    #[doc = "The queue of the track is empty."]
                    QueueEmpty,
                    #[codec(index = 5)]
                    #[doc = "The referendum index provided is invalid in this context."]
                    BadReferendum,
                    #[codec(index = 6)]
                    #[doc = "There was nothing to do in the advancement."]
                    NothingToDo,
                    #[codec(index = 7)]
                    #[doc = "No track exists for the proposal origin."]
                    NoTrack,
                    #[codec(index = 8)]
                    #[doc = "Any deposit cannot be refunded until after the decision is over."]
                    Unfinished,
                    #[codec(index = 9)]
                    #[doc = "The deposit refunder is not the depositor."]
                    NoPermission,
                    #[codec(index = 10)]
                    #[doc = "The deposit cannot be refunded since none was made."]
                    NoDeposit,
                    #[codec(index = 11)]
                    #[doc = "The referendum status is invalid for this operation."]
                    BadStatus,
                    #[codec(index = 12)]
                    #[doc = "The preimage does not exist."]
                    PreimageNotExist,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error2 {
                    #[codec(index = 0)]
                    #[doc = "Referendum is not ongoing."]
                    NotOngoing,
                    #[codec(index = 1)]
                    #[doc = "Referendum's decision deposit is already paid."]
                    HasDeposit,
                    #[codec(index = 2)]
                    #[doc = "The track identifier given was invalid."]
                    BadTrack,
                    #[codec(index = 3)]
                    #[doc = "There are already a full complement of referenda in progress for this track."]
                    Full,
                    #[codec(index = 4)]
                    #[doc = "The queue of the track is empty."]
                    QueueEmpty,
                    #[codec(index = 5)]
                    #[doc = "The referendum index provided is invalid in this context."]
                    BadReferendum,
                    #[codec(index = 6)]
                    #[doc = "There was nothing to do in the advancement."]
                    NothingToDo,
                    #[codec(index = 7)]
                    #[doc = "No track exists for the proposal origin."]
                    NoTrack,
                    #[codec(index = 8)]
                    #[doc = "Any deposit cannot be refunded until after the decision is over."]
                    Unfinished,
                    #[codec(index = 9)]
                    #[doc = "The deposit refunder is not the depositor."]
                    NoPermission,
                    #[codec(index = 10)]
                    #[doc = "The deposit cannot be refunded since none was made."]
                    NoDeposit,
                    #[codec(index = 11)]
                    #[doc = "The referendum status is invalid for this operation."]
                    BadStatus,
                    #[codec(index = 12)]
                    #[doc = "The preimage does not exist."]
                    PreimageNotExist,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A referendum has been submitted."]
                    Submitted {
                        index: ::core::primitive::u32,
                        track: ::core::primitive::u16,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "The decision deposit has been placed."]
                    DecisionDepositPlaced {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "The decision deposit has been refunded."]
                    DecisionDepositRefunded {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A deposit has been slashaed."]
                    DepositSlashed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "A referendum has moved into the deciding phase."]
                    DecisionStarted {
                        index: ::core::primitive::u32,
                        track: ::core::primitive::u16,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 5)]
                    ConfirmStarted { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    ConfirmAborted { index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "A referendum has ended its confirmation phase and is ready for approval."]
                    Confirmed {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "A referendum has been approved and its proposal has been scheduled."]
                    Approved { index: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "A proposal has been rejected by referendum."]
                    Rejected {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 10)]
                    #[doc = "A referendum has been timed out without being decided."]
                    TimedOut {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "A referendum has been cancelled."]
                    Cancelled {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "A referendum has been killed."]
                    Killed {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_conviction_voting::types::Tally<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "The submission deposit has been refunded."]
                    SubmissionDepositRefunded {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "Metadata for a referendum has been set."]
                    MetadataSet {
                        index: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 15)]
                    #[doc = "Metadata for a referendum has been cleared."]
                    MetadataCleared {
                        index: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event2 {
                    #[codec(index = 0)]
                    #[doc = "A referendum has been submitted."]
                    Submitted {
                        index: ::core::primitive::u32,
                        track: ::core::primitive::u16,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "The decision deposit has been placed."]
                    DecisionDepositPlaced {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "The decision deposit has been refunded."]
                    DecisionDepositRefunded {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A deposit has been slashaed."]
                    DepositSlashed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "A referendum has moved into the deciding phase."]
                    DecisionStarted {
                        index: ::core::primitive::u32,
                        track: ::core::primitive::u16,
                        proposal: runtime_types::frame_support::traits::preimages::Bounded<
                            runtime_types::kitchensink_runtime::RuntimeCall,
                        >,
                        tally: runtime_types::pallet_ranked_collective::Tally,
                    },
                    #[codec(index = 5)]
                    ConfirmStarted { index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    ConfirmAborted { index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "A referendum has ended its confirmation phase and is ready for approval."]
                    Confirmed {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_ranked_collective::Tally,
                    },
                    #[codec(index = 8)]
                    #[doc = "A referendum has been approved and its proposal has been scheduled."]
                    Approved { index: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "A proposal has been rejected by referendum."]
                    Rejected {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_ranked_collective::Tally,
                    },
                    #[codec(index = 10)]
                    #[doc = "A referendum has been timed out without being decided."]
                    TimedOut {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_ranked_collective::Tally,
                    },
                    #[codec(index = 11)]
                    #[doc = "A referendum has been cancelled."]
                    Cancelled {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_ranked_collective::Tally,
                    },
                    #[codec(index = 12)]
                    #[doc = "A referendum has been killed."]
                    Killed {
                        index: ::core::primitive::u32,
                        tally: runtime_types::pallet_ranked_collective::Tally,
                    },
                    #[codec(index = 13)]
                    #[doc = "The submission deposit has been refunded."]
                    SubmissionDepositRefunded {
                        index: ::core::primitive::u32,
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 14)]
                    #[doc = "Metadata for a referendum has been set."]
                    MetadataSet {
                        index: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                    },
                    #[codec(index = 15)]
                    #[doc = "Metadata for a referendum has been cleared."]
                    MetadataCleared {
                        index: ::core::primitive::u32,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Curve {
                    #[codec(index = 0)]
                    LinearDecreasing {
                        length: runtime_types::sp_arithmetic::per_things::Perbill,
                        floor: runtime_types::sp_arithmetic::per_things::Perbill,
                        ceil: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 1)]
                    SteppedDecreasing {
                        begin: runtime_types::sp_arithmetic::per_things::Perbill,
                        end: runtime_types::sp_arithmetic::per_things::Perbill,
                        step: runtime_types::sp_arithmetic::per_things::Perbill,
                        period: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 2)]
                    Reciprocal {
                        factor: runtime_types::sp_arithmetic::fixed_point::FixedI64,
                        x_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
                        y_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DecidingStatus<_0> {
                    pub since: _0,
                    pub confirming: ::core::option::Option<_0>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Deposit<_0, _1> {
                    pub who: _0,
                    pub amount: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum ReferendumInfo<_0, _1, _2, _3, _4, _5, _6, _7> {
                    #[codec(index = 0)]
                    Ongoing(
                        runtime_types::pallet_referenda::types::ReferendumStatus<
                            _0,
                            _1,
                            _2,
                            _3,
                            _4,
                            _5,
                            _6,
                            _7,
                        >,
                    ),
                    #[codec(index = 1)]
                    Approved(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 2)]
                    Rejected(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 3)]
                    Cancelled(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 4)]
                    TimedOut(
                        _2,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                        ::core::option::Option<
                            runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                        >,
                    ),
                    #[codec(index = 5)]
                    Killed(_2),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ReferendumStatus<_0, _1, _2, _3, _4, _5, _6, _7> {
                    pub track: _0,
                    pub origin: _1,
                    pub proposal: _3,
                    pub enactment: runtime_types::frame_support::traits::schedule::DispatchTime<_2>,
                    pub submitted: _2,
                    pub submission_deposit: runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                    pub decision_deposit: ::core::option::Option<
                        runtime_types::pallet_referenda::types::Deposit<_6, _4>,
                    >,
                    pub deciding: ::core::option::Option<
                        runtime_types::pallet_referenda::types::DecidingStatus<_2>,
                    >,
                    pub tally: _5,
                    pub in_queue: ::core::primitive::bool,
                    pub alarm: ::core::option::Option<(_2, _7)>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct TrackInfo<_0, _1> {
                    pub name: ::std::string::String,
                    pub max_deciding: ::core::primitive::u32,
                    pub decision_deposit: _0,
                    pub prepare_period: _1,
                    pub decision_period: _1,
                    pub confirm_period: _1,
                    pub min_enactment_period: _1,
                    pub min_approval: runtime_types::pallet_referenda::types::Curve,
                    pub min_support: runtime_types::pallet_referenda::types::Curve,
                }
            }
        }
        pub mod pallet_remark {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::store`]."]
                    store {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempting to store empty data."]
                    Empty,
                    #[codec(index = 1)]
                    #[doc = "Attempted to call `store` outside of block execution."]
                    BadContext,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Stored data off chain."]
                    Stored {
                        sender: ::subxt::utils::AccountId32,
                        content_hash: ::subxt::utils::H256,
                    },
                }
            }
        }
        pub mod pallet_root_testing {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::fill_block`]."]
                    fill_block {
                        ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                }
            }
        }
        pub mod pallet_salary {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::init`]."]
                    init,
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::bump`]."]
                    bump,
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::induct`]."]
                    induct,
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::register`]."]
                    register,
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::payout`]."]
                    payout,
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::payout_other`]."]
                    payout_other {
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::check_payment`]."]
                    check_payment,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The salary system has already been started."]
                    AlreadyStarted,
                    #[codec(index = 1)]
                    #[doc = "The account is not a ranked member."]
                    NotMember,
                    #[codec(index = 2)]
                    #[doc = "The account is already inducted."]
                    AlreadyInducted,
                    #[codec(index = 3)]
                    NotInducted,
                    #[codec(index = 4)]
                    #[doc = "The member does not have a current valid claim."]
                    NoClaim,
                    #[codec(index = 5)]
                    #[doc = "The member's claim is zero."]
                    ClaimZero,
                    #[codec(index = 6)]
                    #[doc = "Current cycle's registration period is over."]
                    TooLate,
                    #[codec(index = 7)]
                    #[doc = "Current cycle's payment period is not yet begun."]
                    TooEarly,
                    #[codec(index = 8)]
                    #[doc = "Cycle is not yet over."]
                    NotYet,
                    #[codec(index = 9)]
                    #[doc = "The payout cycles have not yet started."]
                    NotStarted,
                    #[codec(index = 10)]
                    #[doc = "There is no budget left for the payout."]
                    Bankrupt,
                    #[codec(index = 11)]
                    #[doc = "There was some issue with the mechanism of payment."]
                    PayError,
                    #[codec(index = 12)]
                    #[doc = "The payment has neither failed nor succeeded yet."]
                    Inconclusive,
                    #[codec(index = 13)]
                    #[doc = "The cycle is after that in which the payment was made."]
                    NotCurrent,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A member is inducted into the payroll."]
                    Inducted { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    #[doc = "A member registered for a payout."]
                    Registered {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A payment happened."]
                    Paid {
                        who: ::subxt::utils::AccountId32,
                        beneficiary: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                        id: (),
                    },
                    #[codec(index = 3)]
                    #[doc = "The next cycle begins."]
                    CycleStarted { index: ::core::primitive::u32 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ClaimState<_0, _1> {
                #[codec(index = 0)]
                Nothing,
                #[codec(index = 1)]
                Registered(_0),
                #[codec(index = 2)]
                Attempted {
                    registered: ::core::option::Option<_0>,
                    id: _1,
                    amount: _0,
                },
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ClaimantStatus<_0, _1, _2> {
                pub last_active: _0,
                pub status: runtime_types::pallet_salary::ClaimState<_1, _2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StatusType<_0, _1, _2> {
                pub cycle_index: _0,
                pub cycle_start: _1,
                pub budget: _2,
                pub total_registrations: _2,
                pub total_unregistered_paid: _2,
            }
        }
        pub mod pallet_scheduler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::schedule`]."]
                    schedule {
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::cancel`]."]
                    cancel {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::schedule_named`]."]
                    schedule_named {
                        id: [::core::primitive::u8; 32usize],
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::cancel_named`]."]
                    cancel_named {
                        id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::schedule_after`]."]
                    schedule_after {
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::schedule_named_after`]."]
                    schedule_named_after {
                        id: [::core::primitive::u8; 32usize],
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to schedule a call"]
                    FailedToSchedule,
                    #[codec(index = 1)]
                    #[doc = "Cannot find the scheduled call."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Given target block number is in the past."]
                    TargetBlockNumberInPast,
                    #[codec(index = 3)]
                    #[doc = "Reschedule failed because it does not change scheduled time."]
                    RescheduleNoChange,
                    #[codec(index = 4)]
                    #[doc = "Attempt to use a non-named function on a named task."]
                    Named,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Scheduled some task."]
                    Scheduled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Canceled some task."]
                    Canceled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Dispatched some task."]
                    Dispatched {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "The call for the provided hash was not found so the task has been aborted."]
                    CallUnavailable {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 4)]
                    #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
                    PeriodicFailed {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 5)]
                    #[doc = "The given task can never be executed since it is overweight."]
                    PermanentlyOverweight {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Scheduled<_0, _1, _2, _3, _4> {
                pub maybe_id: ::core::option::Option<_0>,
                pub priority: ::core::primitive::u8,
                pub call: _1,
                pub maybe_periodic: ::core::option::Option<(_2, _2)>,
                pub origin: _3,
                #[codec(skip)]
                pub __subxt_unused_type_params: ::core::marker::PhantomData<_4>,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set_keys`]."]
                    set_keys {
                        keys: runtime_types::kitchensink_runtime::SessionKeys,
                        proof: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::purge_keys`]."]
                    purge_keys,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the session pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid ownership proof."]
                    InvalidProof,
                    #[codec(index = 1)]
                    #[doc = "No associated validator ID for account."]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    #[doc = "Registered duplicate key."]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    #[doc = "No keys are associated with this account."]
                    NoKeys,
                    #[codec(index = 4)]
                    #[doc = "Key setting account is not live, so it's impossible to associate keys."]
                    NoAccount,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New session has happened. Note that the argument is the session index, not the"]
                    #[doc = "block number as the type might suggest."]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_society {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::bid`]."]
                    bid { value: ::core::primitive::u128 },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::unbid`]."]
                    unbid,
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::vouch`]."]
                    vouch {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        value: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::unvouch`]."]
                    unvouch,
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::vote`]."]
                    vote {
                        candidate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::defender_vote`]."]
                    defender_vote { approve: ::core::primitive::bool },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::payout`]."]
                    payout,
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::waive_repay`]."]
                    waive_repay { amount: ::core::primitive::u128 },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::found_society`]."]
                    found_society {
                        founder: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        max_members: ::core::primitive::u32,
                        max_intake: ::core::primitive::u32,
                        max_strikes: ::core::primitive::u32,
                        candidate_deposit: ::core::primitive::u128,
                        rules: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::dissolve`]."]
                    dissolve,
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::judge_suspended_member`]."]
                    judge_suspended_member {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        forgive: ::core::primitive::bool,
                    },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::set_parameters`]."]
                    set_parameters {
                        max_members: ::core::primitive::u32,
                        max_intake: ::core::primitive::u32,
                        max_strikes: ::core::primitive::u32,
                        candidate_deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::punish_skeptic`]."]
                    punish_skeptic,
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::claim_membership`]."]
                    claim_membership,
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::bestow_membership`]."]
                    bestow_membership {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::kick_candidate`]."]
                    kick_candidate {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::resign_candidacy`]."]
                    resign_candidacy,
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::drop_candidate`]."]
                    drop_candidate {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 18)]
                    #[doc = "See [`Pallet::cleanup_candidacy`]."]
                    cleanup_candidacy {
                        candidate: ::subxt::utils::AccountId32,
                        max: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "See [`Pallet::cleanup_challenge`]."]
                    cleanup_challenge {
                        challenge_round: ::core::primitive::u32,
                        max: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "User is not a member."]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "User is already a member."]
                    AlreadyMember,
                    #[codec(index = 2)]
                    #[doc = "User is suspended."]
                    Suspended,
                    #[codec(index = 3)]
                    #[doc = "User is not suspended."]
                    NotSuspended,
                    #[codec(index = 4)]
                    #[doc = "Nothing to payout."]
                    NoPayout,
                    #[codec(index = 5)]
                    #[doc = "Society already founded."]
                    AlreadyFounded,
                    #[codec(index = 6)]
                    #[doc = "Not enough in pot to accept candidate."]
                    InsufficientPot,
                    #[codec(index = 7)]
                    #[doc = "Member is already vouching or banned from vouching again."]
                    AlreadyVouching,
                    #[codec(index = 8)]
                    #[doc = "Member is not vouching."]
                    NotVouchingOnBidder,
                    #[codec(index = 9)]
                    #[doc = "Cannot remove the head of the chain."]
                    Head,
                    #[codec(index = 10)]
                    #[doc = "Cannot remove the founder."]
                    Founder,
                    #[codec(index = 11)]
                    #[doc = "User has already made a bid."]
                    AlreadyBid,
                    #[codec(index = 12)]
                    #[doc = "User is already a candidate."]
                    AlreadyCandidate,
                    #[codec(index = 13)]
                    #[doc = "User is not a candidate."]
                    NotCandidate,
                    #[codec(index = 14)]
                    #[doc = "Too many members in the society."]
                    MaxMembers,
                    #[codec(index = 15)]
                    #[doc = "The caller is not the founder."]
                    NotFounder,
                    #[codec(index = 16)]
                    #[doc = "The caller is not the head."]
                    NotHead,
                    #[codec(index = 17)]
                    #[doc = "The membership cannot be claimed as the candidate was not clearly approved."]
                    NotApproved,
                    #[codec(index = 18)]
                    #[doc = "The candidate cannot be kicked as the candidate was not clearly rejected."]
                    NotRejected,
                    #[codec(index = 19)]
                    #[doc = "The candidacy cannot be dropped as the candidate was clearly approved."]
                    Approved,
                    #[codec(index = 20)]
                    #[doc = "The candidacy cannot be bestowed as the candidate was clearly rejected."]
                    Rejected,
                    #[codec(index = 21)]
                    #[doc = "The candidacy cannot be concluded as the voting is still in progress."]
                    InProgress,
                    #[codec(index = 22)]
                    #[doc = "The candidacy cannot be pruned until a full additional intake period has passed."]
                    TooEarly,
                    #[codec(index = 23)]
                    #[doc = "The skeptic already voted."]
                    Voted,
                    #[codec(index = 24)]
                    #[doc = "The skeptic need not vote on candidates from expired rounds."]
                    Expired,
                    #[codec(index = 25)]
                    #[doc = "User is not a bidder."]
                    NotBidder,
                    #[codec(index = 26)]
                    #[doc = "There is no defender currently."]
                    NoDefender,
                    #[codec(index = 27)]
                    #[doc = "Group doesn't exist."]
                    NotGroup,
                    #[codec(index = 28)]
                    #[doc = "The member is already elevated to this rank."]
                    AlreadyElevated,
                    #[codec(index = 29)]
                    #[doc = "The skeptic has already been punished for this offence."]
                    AlreadyPunished,
                    #[codec(index = 30)]
                    #[doc = "Funds are insufficient to pay off society debts."]
                    InsufficientFunds,
                    #[codec(index = 31)]
                    #[doc = "The candidate/defender has no stale votes to remove."]
                    NoVotes,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The society is founded by the given identity."]
                    Founded {
                        founder: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A membership bid just happened. The given account is the candidate's ID and their offer"]
                    #[doc = "is the second."]
                    Bid {
                        candidate_id: ::subxt::utils::AccountId32,
                        offer: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A membership bid just happened by vouching. The given account is the candidate's ID and"]
                    #[doc = "their offer is the second. The vouching party is the third."]
                    Vouch {
                        candidate_id: ::subxt::utils::AccountId32,
                        offer: ::core::primitive::u128,
                        vouching: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A candidate was dropped (due to an excess of bids in the system)."]
                    AutoUnbid {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A candidate was dropped (by their request)."]
                    Unbid {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A candidate was dropped (by request of who vouched for them)."]
                    Unvouch {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "A group of candidates have been inducted. The batch's primary is the first value, the"]
                    #[doc = "batch in full is the second."]
                    Inducted {
                        primary: ::subxt::utils::AccountId32,
                        candidates: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 7)]
                    #[doc = "A suspended member has been judged."]
                    SuspendedMemberJudgement {
                        who: ::subxt::utils::AccountId32,
                        judged: ::core::primitive::bool,
                    },
                    #[codec(index = 8)]
                    #[doc = "A candidate has been suspended"]
                    CandidateSuspended {
                        candidate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 9)]
                    #[doc = "A member has been suspended"]
                    MemberSuspended { member: ::subxt::utils::AccountId32 },
                    #[codec(index = 10)]
                    #[doc = "A member has been challenged"]
                    Challenged { member: ::subxt::utils::AccountId32 },
                    #[codec(index = 11)]
                    #[doc = "A vote has been placed"]
                    Vote {
                        candidate: ::subxt::utils::AccountId32,
                        voter: ::subxt::utils::AccountId32,
                        vote: ::core::primitive::bool,
                    },
                    #[codec(index = 12)]
                    #[doc = "A vote has been placed for a defending member"]
                    DefenderVote {
                        voter: ::subxt::utils::AccountId32,
                        vote: ::core::primitive::bool,
                    },
                    #[codec(index = 13)]
                    #[doc = "A new set of \\[params\\] has been set for the group."]
                    NewParams {
                        params: runtime_types::pallet_society::GroupParams<::core::primitive::u128>,
                    },
                    #[codec(index = 14)]
                    #[doc = "Society is unfounded."]
                    Unfounded {
                        founder: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 15)]
                    #[doc = "Some funds were deposited into the society account."]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 16)]
                    #[doc = "A \\[member\\] got elevated to \\[rank\\]."]
                    Elevated {
                        member: ::subxt::utils::AccountId32,
                        rank: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Bid<_0, _1> {
                pub who: _0,
                pub kind: runtime_types::pallet_society::BidKind<_0, _1>,
                pub value: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum BidKind<_0, _1> {
                #[codec(index = 0)]
                Deposit(_1),
                #[codec(index = 1)]
                Vouch(_0, _1),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Candidacy<_0, _1> {
                pub round: ::core::primitive::u32,
                pub kind: runtime_types::pallet_society::BidKind<_0, _1>,
                pub bid: _1,
                pub tally: runtime_types::pallet_society::Tally,
                pub skeptic_struck: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct GroupParams<_0> {
                pub max_members: ::core::primitive::u32,
                pub max_intake: ::core::primitive::u32,
                pub max_strikes: ::core::primitive::u32,
                pub candidate_deposit: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct IntakeRecord<_0, _1> {
                pub who: _0,
                pub bid: _1,
                pub round: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MemberRecord {
                pub rank: ::core::primitive::u32,
                pub strikes: ::core::primitive::u32,
                pub vouching: ::core::option::Option<runtime_types::pallet_society::VouchingStatus>,
                pub index: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PayoutRecord<_0, _1> {
                pub paid: _0,
                pub payouts: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Tally {
                pub approvals: ::core::primitive::u32,
                pub rejections: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Vote {
                pub approve: ::core::primitive::bool,
                pub weight: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum VouchingStatus {
                #[codec(index = 0)]
                Vouching,
                #[codec(index = 1)]
                Banned,
            }
        }
        pub mod pallet_staking {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                pub mod pallet {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                    pub enum Call {
                        #[codec(index = 0)]
                        #[doc = "See [`Pallet::bond`]."]
                        bond {
                            #[codec(compact)]
                            value: ::core::primitive::u128,
                            payee: runtime_types::pallet_staking::RewardDestination<
                                ::subxt::utils::AccountId32,
                            >,
                        },
                        #[codec(index = 1)]
                        #[doc = "See [`Pallet::bond_extra`]."]
                        bond_extra {
                            #[codec(compact)]
                            max_additional: ::core::primitive::u128,
                        },
                        #[codec(index = 2)]
                        #[doc = "See [`Pallet::unbond`]."]
                        unbond {
                            #[codec(compact)]
                            value: ::core::primitive::u128,
                        },
                        #[codec(index = 3)]
                        #[doc = "See [`Pallet::withdraw_unbonded`]."]
                        withdraw_unbonded {
                            num_slashing_spans: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        #[doc = "See [`Pallet::validate`]."]
                        validate {
                            prefs: runtime_types::pallet_staking::ValidatorPrefs,
                        },
                        #[codec(index = 5)]
                        #[doc = "See [`Pallet::nominate`]."]
                        nominate {
                            targets: ::std::vec::Vec<
                                ::subxt::utils::MultiAddress<
                                    ::subxt::utils::AccountId32,
                                    ::core::primitive::u32,
                                >,
                            >,
                        },
                        #[codec(index = 6)]
                        #[doc = "See [`Pallet::chill`]."]
                        chill,
                        #[codec(index = 7)]
                        #[doc = "See [`Pallet::set_payee`]."]
                        set_payee {
                            payee: runtime_types::pallet_staking::RewardDestination<
                                ::subxt::utils::AccountId32,
                            >,
                        },
                        #[codec(index = 8)]
                        #[doc = "See [`Pallet::set_controller`]."]
                        set_controller,
                        #[codec(index = 9)]
                        #[doc = "See [`Pallet::set_validator_count`]."]
                        set_validator_count {
                            #[codec(compact)]
                            new: ::core::primitive::u32,
                        },
                        #[codec(index = 10)]
                        #[doc = "See [`Pallet::increase_validator_count`]."]
                        increase_validator_count {
                            #[codec(compact)]
                            additional: ::core::primitive::u32,
                        },
                        #[codec(index = 11)]
                        #[doc = "See [`Pallet::scale_validator_count`]."]
                        scale_validator_count {
                            factor: runtime_types::sp_arithmetic::per_things::Percent,
                        },
                        #[codec(index = 12)]
                        #[doc = "See [`Pallet::force_no_eras`]."]
                        force_no_eras,
                        #[codec(index = 13)]
                        #[doc = "See [`Pallet::force_new_era`]."]
                        force_new_era,
                        #[codec(index = 14)]
                        #[doc = "See [`Pallet::set_invulnerables`]."]
                        set_invulnerables {
                            invulnerables: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        },
                        #[codec(index = 15)]
                        #[doc = "See [`Pallet::force_unstake`]."]
                        force_unstake {
                            stash: ::subxt::utils::AccountId32,
                            num_slashing_spans: ::core::primitive::u32,
                        },
                        #[codec(index = 16)]
                        #[doc = "See [`Pallet::force_new_era_always`]."]
                        force_new_era_always,
                        #[codec(index = 17)]
                        #[doc = "See [`Pallet::cancel_deferred_slash`]."]
                        cancel_deferred_slash {
                            era: ::core::primitive::u32,
                            slash_indices: ::std::vec::Vec<::core::primitive::u32>,
                        },
                        #[codec(index = 18)]
                        #[doc = "See [`Pallet::payout_stakers`]."]
                        payout_stakers {
                            validator_stash: ::subxt::utils::AccountId32,
                            era: ::core::primitive::u32,
                        },
                        #[codec(index = 19)]
                        #[doc = "See [`Pallet::rebond`]."]
                        rebond {
                            #[codec(compact)]
                            value: ::core::primitive::u128,
                        },
                        #[codec(index = 20)]
                        #[doc = "See [`Pallet::reap_stash`]."]
                        reap_stash {
                            stash: ::subxt::utils::AccountId32,
                            num_slashing_spans: ::core::primitive::u32,
                        },
                        #[codec(index = 21)]
                        #[doc = "See [`Pallet::kick`]."]
                        kick {
                            who: ::std::vec::Vec<
                                ::subxt::utils::MultiAddress<
                                    ::subxt::utils::AccountId32,
                                    ::core::primitive::u32,
                                >,
                            >,
                        },
                        #[codec(index = 22)]
                        #[doc = "See [`Pallet::set_staking_configs`]."]
                        set_staking_configs {
                            min_nominator_bond:
                                runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                                    ::core::primitive::u128,
                                >,
                            min_validator_bond:
                                runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                                    ::core::primitive::u128,
                                >,
                            max_nominator_count:
                                runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                                    ::core::primitive::u32,
                                >,
                            max_validator_count:
                                runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                                    ::core::primitive::u32,
                                >,
                            chill_threshold:
                                runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                                    runtime_types::sp_arithmetic::per_things::Percent,
                                >,
                            min_commission: runtime_types::pallet_staking::pallet::pallet::ConfigOp<
                                runtime_types::sp_arithmetic::per_things::Perbill,
                            >,
                        },
                        #[codec(index = 23)]
                        #[doc = "See [`Pallet::chill_other`]."]
                        chill_other {
                            controller: ::subxt::utils::AccountId32,
                        },
                        #[codec(index = 24)]
                        #[doc = "See [`Pallet::force_apply_min_commission`]."]
                        force_apply_min_commission {
                            validator_stash: ::subxt::utils::AccountId32,
                        },
                        #[codec(index = 25)]
                        #[doc = "See [`Pallet::set_min_commission`]."]
                        set_min_commission {
                            new: runtime_types::sp_arithmetic::per_things::Perbill,
                        },
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum ConfigOp<_0> {
                        #[codec(index = 0)]
                        Noop,
                        #[codec(index = 1)]
                        Set(_0),
                        #[codec(index = 2)]
                        Remove,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    #[doc = "The `Error` enum of this pallet."]
                    pub enum Error {
                        #[codec(index = 0)]
                        #[doc = "Not a controller account."]
                        NotController,
                        #[codec(index = 1)]
                        #[doc = "Not a stash account."]
                        NotStash,
                        #[codec(index = 2)]
                        #[doc = "Stash is already bonded."]
                        AlreadyBonded,
                        #[codec(index = 3)]
                        #[doc = "Controller is already paired."]
                        AlreadyPaired,
                        #[codec(index = 4)]
                        #[doc = "Targets cannot be empty."]
                        EmptyTargets,
                        #[codec(index = 5)]
                        #[doc = "Duplicate index."]
                        DuplicateIndex,
                        #[codec(index = 6)]
                        #[doc = "Slash record index out of bounds."]
                        InvalidSlashIndex,
                        #[codec(index = 7)]
                        #[doc = "Cannot have a validator or nominator role, with value less than the minimum defined by"]
                        #[doc = "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the"]
                        #[doc = "intention, `chill` first to remove one's role as validator/nominator."]
                        InsufficientBond,
                        #[codec(index = 8)]
                        #[doc = "Can not schedule more unlock chunks."]
                        NoMoreChunks,
                        #[codec(index = 9)]
                        #[doc = "Can not rebond without unlocking chunks."]
                        NoUnlockChunk,
                        #[codec(index = 10)]
                        #[doc = "Attempting to target a stash that still has funds."]
                        FundedTarget,
                        #[codec(index = 11)]
                        #[doc = "Invalid era to reward."]
                        InvalidEraToReward,
                        #[codec(index = 12)]
                        #[doc = "Invalid number of nominations."]
                        InvalidNumberOfNominations,
                        #[codec(index = 13)]
                        #[doc = "Items are not sorted and unique."]
                        NotSortedAndUnique,
                        #[codec(index = 14)]
                        #[doc = "Rewards for this era have already been claimed for this validator."]
                        AlreadyClaimed,
                        #[codec(index = 15)]
                        #[doc = "Incorrect previous history depth input provided."]
                        IncorrectHistoryDepth,
                        #[codec(index = 16)]
                        #[doc = "Incorrect number of slashing spans provided."]
                        IncorrectSlashingSpans,
                        #[codec(index = 17)]
                        #[doc = "Internal state has become somehow corrupted and the operation cannot continue."]
                        BadState,
                        #[codec(index = 18)]
                        #[doc = "Too many nomination targets supplied."]
                        TooManyTargets,
                        #[codec(index = 19)]
                        #[doc = "A nomination target was supplied that was blocked or otherwise not a validator."]
                        BadTarget,
                        #[codec(index = 20)]
                        #[doc = "The user has enough bond and thus cannot be chilled forcefully by an external person."]
                        CannotChillOther,
                        #[codec(index = 21)]
                        #[doc = "There are too many nominators in the system. Governance needs to adjust the staking"]
                        #[doc = "settings to keep things safe for the runtime."]
                        TooManyNominators,
                        #[codec(index = 22)]
                        #[doc = "There are too many validator candidates in the system. Governance needs to adjust the"]
                        #[doc = "staking settings to keep things safe for the runtime."]
                        TooManyValidators,
                        #[codec(index = 23)]
                        #[doc = "Commission is too low. Must be at least `MinCommission`."]
                        CommissionTooLow,
                        #[codec(index = 24)]
                        #[doc = "Some bound is not met."]
                        BoundNotMet,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    #[doc = "The `Event` enum of this pallet"]
                    pub enum Event {
                        #[codec(index = 0)]
                        #[doc = "The era payout has been set; the first balance is the validator-payout; the second is"]
                        #[doc = "the remainder from the maximum amount of reward."]
                        EraPaid {
                            era_index: ::core::primitive::u32,
                            validator_payout: ::core::primitive::u128,
                            remainder: ::core::primitive::u128,
                        },
                        #[codec(index = 1)]
                        #[doc = "The nominator has been rewarded by this amount."]
                        Rewarded {
                            stash: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 2)]
                        #[doc = "A staker (validator or nominator) has been slashed by the given amount."]
                        Slashed {
                            staker: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 3)]
                        #[doc = "A slash for the given validator, for the given percentage of their stake, at the given"]
                        #[doc = "era as been reported."]
                        SlashReported {
                            validator: ::subxt::utils::AccountId32,
                            fraction: runtime_types::sp_arithmetic::per_things::Perbill,
                            slash_era: ::core::primitive::u32,
                        },
                        #[codec(index = 4)]
                        #[doc = "An old slashing report from a prior era was discarded because it could"]
                        #[doc = "not be processed."]
                        OldSlashingReportDiscarded {
                            session_index: ::core::primitive::u32,
                        },
                        #[codec(index = 5)]
                        #[doc = "A new set of stakers was elected."]
                        StakersElected,
                        #[codec(index = 6)]
                        #[doc = "An account has bonded this amount. \\[stash, amount\\]"]
                        #[doc = ""]
                        #[doc = "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,"]
                        #[doc = "it will not be emitted for staking rewards when they are added to stake."]
                        Bonded {
                            stash: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 7)]
                        #[doc = "An account has unbonded this amount."]
                        Unbonded {
                            stash: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 8)]
                        #[doc = "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`"]
                        #[doc = "from the unlocking queue."]
                        Withdrawn {
                            stash: ::subxt::utils::AccountId32,
                            amount: ::core::primitive::u128,
                        },
                        #[codec(index = 9)]
                        #[doc = "A nominator has been kicked from a validator."]
                        Kicked {
                            nominator: ::subxt::utils::AccountId32,
                            stash: ::subxt::utils::AccountId32,
                        },
                        #[codec(index = 10)]
                        #[doc = "The election failed. No new era is planned."]
                        StakingElectionFailed,
                        #[codec(index = 11)]
                        #[doc = "An account has stopped participating as either a validator or nominator."]
                        Chilled { stash: ::subxt::utils::AccountId32 },
                        #[codec(index = 12)]
                        #[doc = "The stakers' rewards are getting paid."]
                        PayoutStarted {
                            era_index: ::core::primitive::u32,
                            validator_stash: ::subxt::utils::AccountId32,
                        },
                        #[codec(index = 13)]
                        #[doc = "A validator has set their preferences."]
                        ValidatorPrefsSet {
                            stash: ::subxt::utils::AccountId32,
                            prefs: runtime_types::pallet_staking::ValidatorPrefs,
                        },
                        #[codec(index = 14)]
                        #[doc = "A new force era mode was set."]
                        ForceEra {
                            mode: runtime_types::pallet_staking::Forcing,
                        },
                    }
                }
            }
            pub mod slashing {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SlashingSpans {
                    pub span_index: ::core::primitive::u32,
                    pub last_start: ::core::primitive::u32,
                    pub last_nonzero_slash: ::core::primitive::u32,
                    pub prior: ::std::vec::Vec<::core::primitive::u32>,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SpanRecord<_0> {
                    pub slashed: _0,
                    pub paid_out: _0,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ActiveEraInfo {
                pub index: ::core::primitive::u32,
                pub start: ::core::option::Option<::core::primitive::u64>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EraRewardPoints<_0> {
                pub total: ::core::primitive::u32,
                pub individual: ::subxt::utils::KeyedVec<_0, ::core::primitive::u32>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Exposure<_0, _1> {
                #[codec(compact)]
                pub total: _1,
                #[codec(compact)]
                pub own: _1,
                pub others:
                    ::std::vec::Vec<runtime_types::pallet_staking::IndividualExposure<_0, _1>>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Forcing {
                #[codec(index = 0)]
                NotForcing,
                #[codec(index = 1)]
                ForceNew,
                #[codec(index = 2)]
                ForceNone,
                #[codec(index = 3)]
                ForceAlways,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct IndividualExposure<_0, _1> {
                pub who: _0,
                #[codec(compact)]
                pub value: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Nominations {
                pub targets: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::subxt::utils::AccountId32,
                >,
                pub submitted_in: ::core::primitive::u32,
                pub suppressed: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RewardDestination<_0> {
                #[codec(index = 0)]
                Staked,
                #[codec(index = 1)]
                Stash,
                #[codec(index = 2)]
                Controller,
                #[codec(index = 3)]
                Account(_0),
                #[codec(index = 4)]
                None,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StakingLedger {
                pub stash: ::subxt::utils::AccountId32,
                #[codec(compact)]
                pub total: ::core::primitive::u128,
                #[codec(compact)]
                pub active: ::core::primitive::u128,
                pub unlocking: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    runtime_types::pallet_staking::UnlockChunk<::core::primitive::u128>,
                >,
                pub claimed_rewards: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u32,
                >,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnappliedSlash<_0, _1> {
                pub validator: _0,
                pub own: _1,
                pub others: ::std::vec::Vec<(_0, _1)>,
                pub reporters: ::std::vec::Vec<_0>,
                pub payout: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct UnlockChunk<_0> {
                #[codec(compact)]
                pub value: _0,
                #[codec(compact)]
                pub era: ::core::primitive::u32,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ValidatorPrefs {
                #[codec(compact)]
                pub commission: runtime_types::sp_arithmetic::per_things::Perbill,
                pub blocked: ::core::primitive::bool,
            }
        }
        pub mod pallet_state_trie_migration {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::control_auto_migration`]."]
                    control_auto_migration {
                        maybe_config: ::core::option::Option<
                            runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::continue_migrate`]."]
                    continue_migrate {
                        limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                        real_size_upper: ::core::primitive::u32,
                        witness_task:
                            runtime_types::pallet_state_trie_migration::pallet::MigrationTask,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::migrate_custom_top`]."]
                    migrate_custom_top {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                        witness_size: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::migrate_custom_child`]."]
                    migrate_custom_child {
                        root: ::std::vec::Vec<::core::primitive::u8>,
                        child_keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                        total_size: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::set_signed_max_limits`]."]
                    set_signed_max_limits {
                        limits: runtime_types::pallet_state_trie_migration::pallet::MigrationLimits,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::force_set_progress`]."]
                    force_set_progress {
                        progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                        progress_child:
                            runtime_types::pallet_state_trie_migration::pallet::Progress,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Max signed limits not respected."]
                    MaxSignedLimits,
                    #[codec(index = 1)]
                    #[doc = "A key was longer than the configured maximum."]
                    #[doc = ""]
                    #[doc = "This means that the migration halted at the current [`Progress`] and"]
                    #[doc = "can be resumed with a larger [`crate::Config::MaxKeyLen`] value."]
                    #[doc = "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work."]
                    #[doc = "The value should only be increased to avoid a storage migration for the currently"]
                    #[doc = "stored [`crate::Progress::LastKey`]."]
                    KeyTooLong,
                    #[codec(index = 2)]
                    #[doc = "submitter does not have enough funds."]
                    NotEnoughFunds,
                    #[codec(index = 3)]
                    #[doc = "Bad witness data provided."]
                    BadWitness,
                    #[codec(index = 4)]
                    #[doc = "Signed migration is not allowed because the maximum limit is not set yet."]
                    SignedMigrationNotAllowed,
                    #[codec(index = 5)]
                    #[doc = "Bad child root provided."]
                    BadChildRoot,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Inner events of this pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Given number of `(top, child)` keys were migrated respectively, with the given"]
                    #[doc = "`compute`."]
                    Migrated {
                        top: ::core::primitive::u32,
                        child: ::core::primitive::u32,
                        compute:
                            runtime_types::pallet_state_trie_migration::pallet::MigrationCompute,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some account got slashed by the given amount."]
                    Slashed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "The auto migration task finished."]
                    AutoMigrationFinished,
                    #[codec(index = 3)]
                    #[doc = "Migration got halted due to an error or miss-configuration."]
                    Halted {
                        error: runtime_types::pallet_state_trie_migration::pallet::Error,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum MigrationCompute {
                    #[codec(index = 0)]
                    Signed,
                    #[codec(index = 1)]
                    Auto,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MigrationLimits {
                    pub size: ::core::primitive::u32,
                    pub item: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct MigrationTask {
                    pub progress_top: runtime_types::pallet_state_trie_migration::pallet::Progress,
                    pub progress_child:
                        runtime_types::pallet_state_trie_migration::pallet::Progress,
                    pub size: ::core::primitive::u32,
                    pub top_items: ::core::primitive::u32,
                    pub child_items: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Progress {
                    #[codec(index = 0)]
                    ToStart,
                    #[codec(index = 1)]
                    LastKey(
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    ),
                    #[codec(index = 2)]
                    Complete,
                }
            }
        }
        pub mod pallet_statement {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new statement is submitted"]
                    NewStatement {
                        account: ::subxt::utils::AccountId32,
                        statement: runtime_types::sp_statement_store::Statement,
                    },
                }
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::sudo`]."]
                    sudo {
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::sudo_unchecked_weight`]."]
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::set_key`]."]
                    set_key {
                        new: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::sudo_as`]."]
                    sudo_as {
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the Sudo pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account"]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
                    KeyChanged {
                        old_sudoer: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 2)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::set`]."]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_tips {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::report_awesome`]."]
                    report_awesome {
                        reason: ::std::vec::Vec<::core::primitive::u8>,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::retract_tip`]."]
                    retract_tip { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::tip_new`]."]
                    tip_new {
                        reason: ::std::vec::Vec<::core::primitive::u8>,
                        who: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        #[codec(compact)]
                        tip_value: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::tip`]."]
                    tip {
                        hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        tip_value: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::close_tip`]."]
                    close_tip { hash: ::subxt::utils::H256 },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::slash_tip`]."]
                    slash_tip { hash: ::subxt::utils::H256 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The reason given is just too big."]
                    ReasonTooBig,
                    #[codec(index = 1)]
                    #[doc = "The tip was already found/started."]
                    AlreadyKnown,
                    #[codec(index = 2)]
                    #[doc = "The tip hash is unknown."]
                    UnknownTip,
                    #[codec(index = 3)]
                    #[doc = "The account attempting to retract the tip is not the finder of the tip."]
                    NotFinder,
                    #[codec(index = 4)]
                    #[doc = "The tip cannot be claimed/closed because there are not enough tippers yet."]
                    StillOpen,
                    #[codec(index = 5)]
                    #[doc = "The tip cannot be claimed/closed because it's still in the countdown period."]
                    Premature,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new tip suggestion has been opened."]
                    NewTip { tip_hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    #[doc = "A tip suggestion has reached threshold and is closing."]
                    TipClosing { tip_hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "A tip suggestion has been closed."]
                    TipClosed {
                        tip_hash: ::subxt::utils::H256,
                        who: ::subxt::utils::AccountId32,
                        payout: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A tip suggestion has been retracted."]
                    TipRetracted { tip_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A tip suggestion has been slashed."]
                    TipSlashed {
                        tip_hash: ::subxt::utils::H256,
                        finder: ::subxt::utils::AccountId32,
                        deposit: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OpenTip<_0, _1, _2, _3> {
                pub reason: _3,
                pub who: _0,
                pub finder: _0,
                pub deposit: _1,
                pub closes: ::core::option::Option<_2>,
                pub tips: ::std::vec::Vec<(_0, _1)>,
                pub finders_fee: ::core::primitive::bool,
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: ::subxt::utils::AccountId32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FeeDetails<_0> {
                    pub inclusion_fee: ::core::option::Option<
                        runtime_types::pallet_transaction_payment::types::InclusionFee<_0>,
                    >,
                    pub tip: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct InclusionFee<_0> {
                    pub base_fee: _0,
                    pub len_fee: _0,
                    pub adjusted_weight_fee: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RuntimeDispatchInfo<_0, _1> {
                    pub weight: _1,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub partial_fee: _0,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_transaction_storage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::store`]."]
                    store {
                        data: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::renew`]."]
                    renew {
                        block: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::check_proof`]."]
                    check_proof {
                        proof: runtime_types::sp_transaction_storage_proof::TransactionStorageProof,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Insufficient account balance."]
                    InsufficientFunds,
                    #[codec(index = 1)]
                    #[doc = "Invalid configuration."]
                    NotConfigured,
                    #[codec(index = 2)]
                    #[doc = "Renewed extrinsic is not found."]
                    RenewedNotFound,
                    #[codec(index = 3)]
                    #[doc = "Attempting to store empty transaction"]
                    EmptyTransaction,
                    #[codec(index = 4)]
                    #[doc = "Proof was not expected in this block."]
                    UnexpectedProof,
                    #[codec(index = 5)]
                    #[doc = "Proof failed verification."]
                    InvalidProof,
                    #[codec(index = 6)]
                    #[doc = "Missing storage proof."]
                    MissingProof,
                    #[codec(index = 7)]
                    #[doc = "Unable to verify proof becasue state data is missing."]
                    MissingStateData,
                    #[codec(index = 8)]
                    #[doc = "Double proof check in the block."]
                    DoubleCheck,
                    #[codec(index = 9)]
                    #[doc = "Storage proof was not checked in the block."]
                    ProofNotChecked,
                    #[codec(index = 10)]
                    #[doc = "Transaction is too large."]
                    TransactionTooLarge,
                    #[codec(index = 11)]
                    #[doc = "Too many transactions in the block."]
                    TooManyTransactions,
                    #[codec(index = 12)]
                    #[doc = "Attempted to call `store` outside of block execution."]
                    BadContext,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Stored data under specified index."]
                    Stored { index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "Renewed data under specified index."]
                    Renewed { index: ::core::primitive::u32 },
                    #[codec(index = 2)]
                    #[doc = "Storage proof was successfully checked."]
                    ProofChecked,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransactionInfo {
                pub chunk_root: ::subxt::utils::H256,
                pub content_hash: ::subxt::utils::H256,
                pub size: ::core::primitive::u32,
                pub block_chunks: ::core::primitive::u32,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::propose_spend`]."]
                    propose_spend {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::reject_proposal`]."]
                    reject_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::approve_proposal`]."]
                    approve_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::spend`]."]
                    spend {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::remove_approval`]."]
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the treasury pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposer's balance is too low."]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    #[doc = "No proposal or bounty at that index."]
                    InvalidIndex,
                    #[codec(index = 2)]
                    #[doc = "Too many approvals in the queue."]
                    TooManyApprovals,
                    #[codec(index = 3)]
                    #[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
                    #[doc = "amount to be spent."]
                    InsufficientPermission,
                    #[codec(index = 4)]
                    #[doc = "Proposal has not been approved."]
                    ProposalNotApproved,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New proposal."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "We have ended a spend period and will now allocate funds."]
                    Spending {
                        budget_remaining: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some funds have been allocated."]
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proposal was rejected; funds were slashed."]
                    Rejected {
                        proposal_index: ::core::primitive::u32,
                        slashed: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some of our funds have been burnt."]
                    Burnt {
                        burnt_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
                    Rollover {
                        rollover_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some funds have been deposited."]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    #[doc = "A new spend proposal has been approved."]
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "The inactive funds of the pallet have been updated."]
                    UpdatedInactive {
                        reactivated: ::core::primitive::u128,
                        deactivated: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
        }
        pub mod pallet_uniques {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::create`]."]
                    create {
                        collection: ::core::primitive::u32,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::force_create`]."]
                    force_create {
                        collection: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        free_holding: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::destroy`]."]
                    destroy {
                        collection: ::core::primitive::u32,
                        witness: runtime_types::pallet_uniques::types::DestroyWitness,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::mint`]."]
                    mint {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::burn`]."]
                    burn {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        check_owner: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::transfer`]."]
                    transfer {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        dest: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "See [`Pallet::redeposit`]."]
                    redeposit {
                        collection: ::core::primitive::u32,
                        items: ::std::vec::Vec<::core::primitive::u32>,
                    },
                    #[codec(index = 7)]
                    #[doc = "See [`Pallet::freeze`]."]
                    freeze {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "See [`Pallet::thaw`]."]
                    thaw {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    #[doc = "See [`Pallet::freeze_collection`]."]
                    freeze_collection { collection: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "See [`Pallet::thaw_collection`]."]
                    thaw_collection { collection: ::core::primitive::u32 },
                    #[codec(index = 11)]
                    #[doc = "See [`Pallet::transfer_ownership`]."]
                    transfer_ownership {
                        collection: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 12)]
                    #[doc = "See [`Pallet::set_team`]."]
                    set_team {
                        collection: ::core::primitive::u32,
                        issuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "See [`Pallet::approve_transfer`]."]
                    approve_transfer {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        delegate: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 14)]
                    #[doc = "See [`Pallet::cancel_approval`]."]
                    cancel_approval {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        maybe_check_delegate: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 15)]
                    #[doc = "See [`Pallet::force_item_status`]."]
                    force_item_status {
                        collection: ::core::primitive::u32,
                        owner: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        issuer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        admin: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        freezer: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        free_holding: ::core::primitive::bool,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    #[doc = "See [`Pallet::set_attribute`]."]
                    set_attribute {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 17)]
                    #[doc = "See [`Pallet::clear_attribute`]."]
                    clear_attribute {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 18)]
                    #[doc = "See [`Pallet::set_metadata`]."]
                    set_metadata {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 19)]
                    #[doc = "See [`Pallet::clear_metadata`]."]
                    clear_metadata {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 20)]
                    #[doc = "See [`Pallet::set_collection_metadata`]."]
                    set_collection_metadata {
                        collection: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 21)]
                    #[doc = "See [`Pallet::clear_collection_metadata`]."]
                    clear_collection_metadata { collection: ::core::primitive::u32 },
                    #[codec(index = 22)]
                    #[doc = "See [`Pallet::set_accept_ownership`]."]
                    set_accept_ownership {
                        maybe_collection: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 23)]
                    #[doc = "See [`Pallet::set_collection_max_supply`]."]
                    set_collection_max_supply {
                        collection: ::core::primitive::u32,
                        max_supply: ::core::primitive::u32,
                    },
                    #[codec(index = 24)]
                    #[doc = "See [`Pallet::set_price`]."]
                    set_price {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        price: ::core::option::Option<::core::primitive::u128>,
                        whitelisted_buyer: ::core::option::Option<
                            ::subxt::utils::MultiAddress<
                                ::subxt::utils::AccountId32,
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 25)]
                    #[doc = "See [`Pallet::buy_item`]."]
                    buy_item {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        bid_price: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 1)]
                    #[doc = "The given item ID is unknown."]
                    UnknownCollection,
                    #[codec(index = 2)]
                    #[doc = "The item ID has already been used for an item."]
                    AlreadyExists,
                    #[codec(index = 3)]
                    #[doc = "The owner turned out to be different to what was expected."]
                    WrongOwner,
                    #[codec(index = 4)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 5)]
                    #[doc = "The item ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "The item or collection is frozen."]
                    Frozen,
                    #[codec(index = 7)]
                    #[doc = "The delegate turned out to be different to what was expected."]
                    WrongDelegate,
                    #[codec(index = 8)]
                    #[doc = "There is no delegate approved."]
                    NoDelegate,
                    #[codec(index = 9)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 10)]
                    #[doc = "The named owner has not signed ownership of the collection is acceptable."]
                    Unaccepted,
                    #[codec(index = 11)]
                    #[doc = "The item is locked."]
                    Locked,
                    #[codec(index = 12)]
                    #[doc = "All items have been minted."]
                    MaxSupplyReached,
                    #[codec(index = 13)]
                    #[doc = "The max supply has already been set."]
                    MaxSupplyAlreadySet,
                    #[codec(index = 14)]
                    #[doc = "The provided max supply is less to the amount of items a collection already has."]
                    MaxSupplyTooSmall,
                    #[codec(index = 15)]
                    #[doc = "The given item ID is unknown."]
                    UnknownItem,
                    #[codec(index = 16)]
                    #[doc = "Item is not for sale."]
                    NotForSale,
                    #[codec(index = 17)]
                    #[doc = "The provided bid is too low."]
                    BidTooLow,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A `collection` was created."]
                    Created {
                        collection: ::core::primitive::u32,
                        creator: ::subxt::utils::AccountId32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A `collection` was force-created."]
                    ForceCreated {
                        collection: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A `collection` was destroyed."]
                    Destroyed { collection: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "An `item` was issued."]
                    Issued {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An `item` was transferred."]
                    Transferred {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "An `item` was destroyed."]
                    Burned {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some `item` was frozen."]
                    Frozen {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some `item` was thawed."]
                    Thawed {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some `collection` was frozen."]
                    CollectionFrozen { collection: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "Some `collection` was thawed."]
                    CollectionThawed { collection: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        collection: ::core::primitive::u32,
                        new_owner: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 11)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        collection: ::core::primitive::u32,
                        issuer: ::subxt::utils::AccountId32,
                        admin: ::subxt::utils::AccountId32,
                        freezer: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 12)]
                    #[doc = "An `item` of a `collection` has been approved by the `owner` for transfer by"]
                    #[doc = "a `delegate`."]
                    ApprovedTransfer {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 13)]
                    #[doc = "An approval for a `delegate` account to transfer the `item` of an item"]
                    #[doc = "`collection` was cancelled by its `owner`."]
                    ApprovalCancelled {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        owner: ::subxt::utils::AccountId32,
                        delegate: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 14)]
                    #[doc = "A `collection` has had its attributes changed by the `Force` origin."]
                    ItemStatusChanged { collection: ::core::primitive::u32 },
                    #[codec(index = 15)]
                    #[doc = "New metadata has been set for a `collection`."]
                    CollectionMetadataSet {
                        collection: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been cleared for a `collection`."]
                    CollectionMetadataCleared { collection: ::core::primitive::u32 },
                    #[codec(index = 17)]
                    #[doc = "New metadata has been set for an item."]
                    MetadataSet {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 18)]
                    #[doc = "Metadata has been cleared for an item."]
                    MetadataCleared {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "Metadata has been cleared for an item."]
                    Redeposited {
                        collection: ::core::primitive::u32,
                        successful_items: ::std::vec::Vec<::core::primitive::u32>,
                    },
                    #[codec(index = 20)]
                    #[doc = "New attribute metadata has been set for a `collection` or `item`."]
                    AttributeSet {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 21)]
                    #[doc = "Attribute metadata has been cleared for a `collection` or `item`."]
                    AttributeCleared {
                        collection: ::core::primitive::u32,
                        maybe_item: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 22)]
                    #[doc = "Ownership acceptance has changed for an account."]
                    OwnershipAcceptanceChanged {
                        who: ::subxt::utils::AccountId32,
                        maybe_collection: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 23)]
                    #[doc = "Max supply has been set for a collection."]
                    CollectionMaxSupplySet {
                        collection: ::core::primitive::u32,
                        max_supply: ::core::primitive::u32,
                    },
                    #[codec(index = 24)]
                    #[doc = "The price was set for the instance."]
                    ItemPriceSet {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        price: ::core::primitive::u128,
                        whitelisted_buyer: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 25)]
                    #[doc = "The price for the instance was removed."]
                    ItemPriceRemoved {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                    },
                    #[codec(index = 26)]
                    #[doc = "An item was bought."]
                    ItemBought {
                        collection: ::core::primitive::u32,
                        item: ::core::primitive::u32,
                        price: ::core::primitive::u128,
                        seller: ::subxt::utils::AccountId32,
                        buyer: ::subxt::utils::AccountId32,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectionDetails<_0, _1> {
                    pub owner: _0,
                    pub issuer: _0,
                    pub admin: _0,
                    pub freezer: _0,
                    pub total_deposit: _1,
                    pub free_holding: ::core::primitive::bool,
                    pub items: ::core::primitive::u32,
                    pub item_metadatas: ::core::primitive::u32,
                    pub attributes: ::core::primitive::u32,
                    pub is_frozen: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CollectionMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub is_frozen: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DestroyWitness {
                    #[codec(compact)]
                    pub items: ::core::primitive::u32,
                    #[codec(compact)]
                    pub item_metadatas: ::core::primitive::u32,
                    #[codec(compact)]
                    pub attributes: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemDetails<_0, _1> {
                    pub owner: _0,
                    pub approved: ::core::option::Option<_0>,
                    pub is_frozen: ::core::primitive::bool,
                    pub deposit: _1,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ItemMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub is_frozen: ::core::primitive::bool,
                }
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::batch`]."]
                    batch {
                        calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::as_derivative`]."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::batch_all`]."]
                    batch_all {
                        calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::dispatch_as`]."]
                    dispatch_as {
                        as_origin:
                            ::std::boxed::Box<runtime_types::kitchensink_runtime::OriginCaller>,
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::force_batch`]."]
                    force_batch {
                        calls: ::std::vec::Vec<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    #[doc = "See [`Pallet::with_weight`]."]
                    with_weight {
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_vesting {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::vest`]."]
                    vest,
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::vest_other`]."]
                    vest_other {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::vested_transfer`]."]
                    vested_transfer {
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::force_vested_transfer`]."]
                    force_vested_transfer {
                        source: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        target: ::subxt::utils::MultiAddress<
                            ::subxt::utils::AccountId32,
                            ::core::primitive::u32,
                        >,
                        schedule: runtime_types::pallet_vesting::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "See [`Pallet::merge_schedules`]."]
                    merge_schedules {
                        schedule1_index: ::core::primitive::u32,
                        schedule2_index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the vesting pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The account given is not vesting."]
                    NotVesting,
                    #[codec(index = 1)]
                    #[doc = "The account already has `MaxVestingSchedules` count of schedules and thus"]
                    #[doc = "cannot add another one. Consider merging existing schedules in order to add another."]
                    AtMaxVestingSchedules,
                    #[codec(index = 2)]
                    #[doc = "Amount being transferred is too low to create a vesting schedule."]
                    AmountLow,
                    #[codec(index = 3)]
                    #[doc = "An index was out of bounds of the vesting schedules."]
                    ScheduleIndexOutOfBounds,
                    #[codec(index = 4)]
                    #[doc = "Failed to create a new schedule because some parameter was invalid."]
                    InvalidScheduleParams,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The amount vested has been updated. This could indicate a change in funds available."]
                    #[doc = "The balance given is the amount which is left unvested (and thus locked)."]
                    VestingUpdated {
                        account: ::subxt::utils::AccountId32,
                        unvested: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An \\[account\\] has become fully vested."]
                    VestingCompleted {
                        account: ::subxt::utils::AccountId32,
                    },
                }
            }
            pub mod vesting_info {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct VestingInfo<_0, _1> {
                    pub locked: _0,
                    pub per_block: _0,
                    pub starting_block: _1,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V0,
                #[codec(index = 1)]
                V1,
            }
        }
        pub mod pallet_whitelist {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "See [`Pallet::whitelist_call`]."]
                    whitelist_call { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    #[doc = "See [`Pallet::remove_whitelisted_call`]."]
                    remove_whitelisted_call { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "See [`Pallet::dispatch_whitelisted_call`]."]
                    dispatch_whitelisted_call {
                        call_hash: ::subxt::utils::H256,
                        call_encoded_len: ::core::primitive::u32,
                        call_weight_witness: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    #[doc = "See [`Pallet::dispatch_whitelisted_call_with_preimage`]."]
                    dispatch_whitelisted_call_with_preimage {
                        call: ::std::boxed::Box<runtime_types::kitchensink_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The preimage of the call hash could not be loaded."]
                    UnavailablePreImage,
                    #[codec(index = 1)]
                    #[doc = "The call could not be decoded."]
                    UndecodableCall,
                    #[codec(index = 2)]
                    #[doc = "The weight of the decoded call was higher than the witness."]
                    InvalidCallWeightWitness,
                    #[codec(index = 3)]
                    #[doc = "The call was not whitelisted."]
                    CallIsNotWhitelisted,
                    #[codec(index = 4)]
                    #[doc = "The call was already whitelisted; No-Op."]
                    CallAlreadyWhitelisted,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    CallWhitelisted { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    WhitelistedCallRemoved { call_hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    WhitelistedCallDispatched {
                        call_hash: ::subxt::utils::H256,
                        result: ::core::result::Result<
                            runtime_types::frame_support::dispatch::PostDispatchInfo,
                            runtime_types::sp_runtime::DispatchErrorWithPostInfo<
                                runtime_types::frame_support::dispatch::PostDispatchInfo,
                            >,
                        >,
                    },
                }
            }
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedI64(pub ::core::primitive::i64);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedU128(pub ::core::primitive::u128);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedU64(pub ::core::primitive::u64);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PerU16(pub ::core::primitive::u16);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Perbill(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Percent(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Permill(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Perquintill(pub ::core::primitive::u64);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_authority_discovery {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
        }
        pub mod sp_consensus_babe {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
            pub mod digests {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum NextConfigDescriptor {
                    #[codec(index = 1)]
                    V1 {
                        c: (::core::primitive::u64, ::core::primitive::u64),
                        allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum PreDigest {
                    #[codec(index = 1)]
                    Primary(runtime_types::sp_consensus_babe::digests::PrimaryPreDigest),
                    #[codec(index = 2)]
                    SecondaryPlain(
                        runtime_types::sp_consensus_babe::digests::SecondaryPlainPreDigest,
                    ),
                    #[codec(index = 3)]
                    SecondaryVRF(runtime_types::sp_consensus_babe::digests::SecondaryVRFPreDigest),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PrimaryPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                    pub vrf_signature: runtime_types::sp_core::sr25519::vrf::VrfSignature,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SecondaryPlainPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SecondaryVRFPreDigest {
                    pub authority_index: ::core::primitive::u32,
                    pub slot: runtime_types::sp_consensus_slots::Slot,
                    pub vrf_signature: runtime_types::sp_core::sr25519::vrf::VrfSignature,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum AllowedSlots {
                #[codec(index = 0)]
                PrimarySlots,
                #[codec(index = 1)]
                PrimaryAndSecondaryPlainSlots,
                #[codec(index = 2)]
                PrimaryAndSecondaryVRFSlots,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BabeConfiguration {
                pub slot_duration: ::core::primitive::u64,
                pub epoch_length: ::core::primitive::u64,
                pub c: (::core::primitive::u64, ::core::primitive::u64),
                pub authorities: ::std::vec::Vec<(
                    runtime_types::sp_consensus_babe::app::Public,
                    ::core::primitive::u64,
                )>,
                pub randomness: [::core::primitive::u8; 32usize],
                pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BabeEpochConfiguration {
                pub c: (::core::primitive::u64, ::core::primitive::u64),
                pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Epoch {
                pub epoch_index: ::core::primitive::u64,
                pub start_slot: runtime_types::sp_consensus_slots::Slot,
                pub duration: ::core::primitive::u64,
                pub authorities: ::std::vec::Vec<(
                    runtime_types::sp_consensus_babe::app::Public,
                    ::core::primitive::u64,
                )>,
                pub randomness: [::core::primitive::u8; 32usize],
                pub config: runtime_types::sp_consensus_babe::BabeEpochConfiguration,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OpaqueKeyOwnershipProof(pub ::std::vec::Vec<::core::primitive::u8>);
        }
        pub mod sp_consensus_grandpa {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::ed25519::Public);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Equivocation<_0, _1> {
                #[codec(index = 0)]
                Prevote(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_consensus_grandpa::app::Public,
                        runtime_types::finality_grandpa::Prevote<_0, _1>,
                        runtime_types::sp_consensus_grandpa::app::Signature,
                    >,
                ),
                #[codec(index = 1)]
                Precommit(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_consensus_grandpa::app::Public,
                        runtime_types::finality_grandpa::Precommit<_0, _1>,
                        runtime_types::sp_consensus_grandpa::app::Signature,
                    >,
                ),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EquivocationProof<_0, _1> {
                pub set_id: ::core::primitive::u64,
                pub equivocation: runtime_types::sp_consensus_grandpa::Equivocation<_0, _1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OpaqueKeyOwnershipProof(pub ::std::vec::Vec<::core::primitive::u8>);
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EquivocationProof<_0, _1> {
                pub offender: _1,
                pub slot: runtime_types::sp_consensus_slots::Slot,
                pub first_header: _0,
                pub second_header: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Slot(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod sr25519 {
                use super::runtime_types;
                pub mod vrf {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct VrfSignature {
                        pub output: [::core::primitive::u8; 32usize],
                        pub proof: [::core::primitive::u8; 64usize],
                    }
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OpaqueMetadata(pub ::std::vec::Vec<::core::primitive::u8>);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Void {}
        }
        pub mod sp_inherents {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CheckInherentsResult {
                pub okay: ::core::primitive::bool,
                pub fatal_error: ::core::primitive::bool,
                pub errors: runtime_types::sp_inherents::InherentData,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct InherentData {
                pub data: ::subxt::utils::KeyedVec<
                    [::core::primitive::u8; 8usize],
                    ::std::vec::Vec<::core::primitive::u8>,
                >,
            }
        }
        pub mod sp_mmr_primitives {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EncodableOpaqueLeaf(pub ::std::vec::Vec<::core::primitive::u8>);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Error {
                #[codec(index = 0)]
                InvalidNumericOp,
                #[codec(index = 1)]
                Push,
                #[codec(index = 2)]
                GetRoot,
                #[codec(index = 3)]
                Commit,
                #[codec(index = 4)]
                GenerateProof,
                #[codec(index = 5)]
                Verify,
                #[codec(index = 6)]
                LeafNotFound,
                #[codec(index = 7)]
                PalletNotIncluded,
                #[codec(index = 8)]
                InvalidLeafIndex,
                #[codec(index = 9)]
                InvalidBestKnownBlock,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Proof<_0> {
                pub leaf_indices: ::std::vec::Vec<::core::primitive::u64>,
                pub leaf_count: ::core::primitive::u64,
                pub items: ::std::vec::Vec<_0>,
            }
        }
        pub mod sp_npos_elections {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ElectionScore {
                pub minimal_stake: ::core::primitive::u128,
                pub sum_stake: ::core::primitive::u128,
                pub sum_stake_squared: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Support<_0> {
                pub total: ::core::primitive::u128,
                pub voters: ::std::vec::Vec<(_0, ::core::primitive::u128)>,
            }
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod block {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Block<_0, _1> {
                        pub header: _0,
                        pub extrinsics: ::std::vec::Vec<_1>,
                    }
                }
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Header<_0, _1> {
                        pub parent_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: ::subxt::utils::H256,
                        pub extrinsics_root: ::subxt::utils::H256,
                        pub digest: runtime_types::sp_runtime::generic::digest::Digest,
                        #[codec(skip)]
                        pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                    }
                }
                pub mod unchecked_extrinsic {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
                        pub ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(skip)] pub ::core::marker::PhantomData<(_1, _0, _2, _3)>,
                    );
                }
            }
            pub mod traits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlakeTwo256;
            }
            pub mod transaction_validity {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum InvalidTransaction {
                    #[codec(index = 0)]
                    Call,
                    #[codec(index = 1)]
                    Payment,
                    #[codec(index = 2)]
                    Future,
                    #[codec(index = 3)]
                    Stale,
                    #[codec(index = 4)]
                    BadProof,
                    #[codec(index = 5)]
                    AncientBirthBlock,
                    #[codec(index = 6)]
                    ExhaustsResources,
                    #[codec(index = 7)]
                    Custom(::core::primitive::u8),
                    #[codec(index = 8)]
                    BadMandatory,
                    #[codec(index = 9)]
                    MandatoryValidation,
                    #[codec(index = 10)]
                    BadSigner,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionSource {
                    #[codec(index = 0)]
                    InBlock,
                    #[codec(index = 1)]
                    Local,
                    #[codec(index = 2)]
                    External,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum TransactionValidityError {
                    #[codec(index = 0)]
                    Invalid(runtime_types::sp_runtime::transaction_validity::InvalidTransaction),
                    #[codec(index = 1)]
                    Unknown(runtime_types::sp_runtime::transaction_validity::UnknownTransaction),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum UnknownTransaction {
                    #[codec(index = 0)]
                    CannotLookup,
                    #[codec(index = 1)]
                    NoUnsignedValidator,
                    #[codec(index = 2)]
                    Custom(::core::primitive::u8),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidTransaction {
                    pub priority: ::core::primitive::u64,
                    pub requires: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    pub provides: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    pub longevity: ::core::primitive::u64,
                    pub propagate: ::core::primitive::bool,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
                #[codec(index = 13)]
                RootNotAllowed,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DispatchErrorWithPostInfo<_0> {
                pub post_info: _0,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                FundsUnavailable,
                #[codec(index = 1)]
                OnlyProvider,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
                #[codec(index = 7)]
                CannotCreateHold,
                #[codec(index = 8)]
                NotExpendable,
                #[codec(index = 9)]
                Blocked,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_session {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MembershipProof {
                pub session: ::core::primitive::u32,
                pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                pub validator_count: ::core::primitive::u32,
            }
        }
        pub mod sp_staking {
            use super::runtime_types;
            pub mod offence {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct OffenceDetails<_0, _1> {
                    pub offender: _1,
                    pub reporters: ::std::vec::Vec<_0>,
                }
            }
        }
        pub mod sp_statement_store {
            use super::runtime_types;
            pub mod runtime_api {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum InvalidStatement {
                    #[codec(index = 0)]
                    BadProof,
                    #[codec(index = 1)]
                    NoProof,
                    #[codec(index = 2)]
                    InternalError,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum StatementSource {
                    #[codec(index = 0)]
                    Chain,
                    #[codec(index = 1)]
                    Network,
                    #[codec(index = 2)]
                    Local,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ValidStatement {
                    pub max_count: ::core::primitive::u32,
                    pub max_size: ::core::primitive::u32,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Proof {
                #[codec(index = 0)]
                Sr25519 {
                    signature: [::core::primitive::u8; 64usize],
                    signer: [::core::primitive::u8; 32usize],
                },
                #[codec(index = 1)]
                Ed25519 {
                    signature: [::core::primitive::u8; 64usize],
                    signer: [::core::primitive::u8; 32usize],
                },
                #[codec(index = 2)]
                Secp256k1Ecdsa {
                    signature: [::core::primitive::u8; 65usize],
                    signer: [::core::primitive::u8; 33usize],
                },
                #[codec(index = 3)]
                OnChain {
                    who: [::core::primitive::u8; 32usize],
                    block_hash: [::core::primitive::u8; 32usize],
                    event_index: ::core::primitive::u64,
                },
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Statement {
                pub proof: ::core::option::Option<runtime_types::sp_statement_store::Proof>,
                pub decryption_key: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                pub channel: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                pub priority: ::core::option::Option<::core::primitive::u32>,
                pub num_topics: ::core::primitive::u8,
                pub topics: [[::core::primitive::u8; 32usize]; 4usize],
                pub data: ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
            }
        }
        pub mod sp_transaction_storage_proof {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TransactionStorageProof {
                pub chunk: ::std::vec::Vec<::core::primitive::u8>,
                pub proof: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
    }
}
